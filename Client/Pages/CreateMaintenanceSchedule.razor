@page "/assets/{assetId:guid}/maintenance/create"
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JS

<PageTitle>Cr√©er une gamme de maintenance - Labor Control</PageTitle>

<link href="css/professional.css" rel="stylesheet" />

<div class="min-h-screen bg-gray-50 py-8">
    <div class="max-w-4xl mx-auto px-4">
        <!-- Header -->
        <div class="mb-6">
            <button @onclick="GoBack"
                    class="lc-btn lc-btn-secondary inline-flex items-center mb-4">
                <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
                </svg>
                Retour
            </button>
            <h1 class="lc-heading-1">Cr√©er une gamme de maintenance</h1>
            @if (!string.IsNullOrEmpty(assetName))
            {
                <p class="lc-text-muted mt-2">Pour l'√©quipement : @assetName</p>
            }
        </div>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="bg-red-50 border-l-4 border-red-500 p-4 rounded-lg mb-6">
                <p class="text-red-700">@errorMessage</p>
            </div>
        }

        @if (!string.IsNullOrEmpty(successMessage))
        {
            <div class="bg-green-50 border-l-4 border-green-500 p-4 rounded-lg mb-6">
                <p class="text-green-700">@successMessage</p>
            </div>
        }

        <!-- Formulaire de cr√©ation -->
        <div class="lc-card">
            <h2 class="lc-heading-3 mb-6">Informations g√©n√©rales</h2>

            <div class="grid md:grid-cols-2 gap-6 mb-6">
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">
                        Nom de la gamme <span class="text-red-500">*</span>
                    </label>
                    <input @bind="schedule.Name"
                           type="text"
                           class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                           placeholder="Ex: Maintenance pr√©ventive mensuelle" />
                </div>

                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">
                        Type de maintenance <span class="text-red-500">*</span>
                    </label>
                    <select @bind="schedule.Type"
                            class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                        <option value="PREVENTIVE">Pr√©ventive</option>
                        <option value="CORRECTIVE">Corrective</option>
                        <option value="PREDICTIVE">Pr√©dictive</option>
                    </select>
                </div>

                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">
                        Priorit√© <span class="text-red-500">*</span>
                    </label>
                    <select @bind="schedule.Priority"
                            class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                        <option value="LOW">Basse</option>
                        <option value="NORMAL">Normale</option>
                        <option value="HIGH">Haute</option>
                        <option value="CRITICAL">Critique</option>
                    </select>
                </div>

                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">
                        Statut
                    </label>
                    <select @bind="schedule.Status"
                            class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                        <option value="DRAFT">Brouillon</option>
                        <option value="ACTIVE">Active</option>
                        <option value="INACTIVE">Inactive</option>
                    </select>
                </div>
            </div>

            <div class="mb-6">
                <label class="block text-sm font-medium text-gray-700 mb-2">
                    Description
                </label>
                <textarea @bind="schedule.Description"
                          rows="3"
                          class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                          placeholder="Description d√©taill√©e de la gamme de maintenance..."></textarea>
            </div>

            <h3 class="lc-heading-4 mb-4">Planification</h3>

            <div class="grid md:grid-cols-3 gap-6 mb-6">
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">
                        Fr√©quence <span class="text-red-500">*</span>
                    </label>
                    <select @bind="schedule.Frequency" @bind:after="OnFrequencyChanged"
                            class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                        <option value="DAILY">Quotidienne</option>
                        <option value="WEEKLY">Hebdomadaire</option>
                        <option value="MONTHLY">Mensuelle</option>
                        <option value="QUARTERLY">Trimestrielle</option>
                        <option value="YEARLY">Annuelle</option>
                        <option value="HOURS_BASED">Bas√©e sur les heures de fonctionnement</option>
                    </select>
                </div>

                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">
                        @if (schedule.Frequency == "HOURS_BASED")
                        {
                            <span>Intervalle (heures) <span class="text-red-500">*</span></span>
                        }
                        else
                        {
                            <span>Intervalle <span class="text-red-500">*</span></span>
                        }
                    </label>
                    @if (schedule.Frequency == "HOURS_BASED")
                    {
                        <input @bind="schedule.OperatingHoursInterval"
                               type="number"
                               min="1"
                               class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                               placeholder="Ex: 500 (toutes les 500 heures)" />
                    }
                    else
                    {
                        <input @bind="schedule.Interval"
                               type="number"
                               min="1"
                               class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                               placeholder="Ex: 2 (toutes les 2 semaines)" />
                    }
                </div>

                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">
                        Dur√©e estim√©e (minutes) <span class="text-red-500">*</span>
                    </label>
                    <input @bind="schedule.EstimatedDurationMinutes"
                           type="number"
                           min="1"
                           class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                           placeholder="Ex: 120" />
                </div>
            </div>

            @if (schedule.Frequency == "HOURS_BASED")
            {
                <div class="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-6">
                    <h4 class="text-sm font-medium text-blue-900 mb-3">üìä Compteur d'heures de l'√©quipement</h4>
                    <div class="grid md:grid-cols-2 gap-4">
                        <div>
                            <label class="block text-sm font-medium text-blue-700 mb-2">
                                Heures actuelles de fonctionnement <span class="text-red-500">*</span>
                            </label>
                            <input @bind="currentOperatingHours"
                                   type="number"
                                   min="0"
                                   class="w-full px-3 py-2 border border-blue-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                                   placeholder="Ex: 2500" />
                            <p class="text-xs text-blue-600 mt-1">Heures relev√©es sur le compteur de l'√©quipement</p>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-blue-700 mb-2">
                                Prochaine maintenance √† (heures)
                            </label>
                            <input value="@(currentOperatingHours + (schedule.OperatingHoursInterval ?? 0))"
                                   type="number"
                                   readonly
                                   class="w-full px-3 py-2 bg-blue-100 border border-blue-300 rounded-lg text-blue-800"
                                   placeholder="Calcul√© automatiquement" />
                            <p class="text-xs text-blue-600 mt-1">Calcul√© automatiquement selon l'intervalle</p>
                        </div>
                    </div>
                </div>
            }



            <div class="mb-6">
                <label class="block text-sm font-medium text-gray-700 mb-2">
                    Instructions particuli√®res
                </label>
                <textarea @bind="schedule.SpecialInstructions"
                          rows="3"
                          class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                          placeholder="Instructions sp√©cifiques pour cette maintenance..."></textarea>
            </div>


            <!-- Actions -->
            <div class="flex justify-end gap-3 pt-6 border-t border-gray-200">
                <button @onclick="GoBack"
                        type="button"
                        class="px-4 py-2 text-gray-700 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 transition">
                    Annuler
                </button>
                <button @onclick="SaveSchedule"
                        type="submit"
                        disabled="@isSubmitting"
                        class="lc-btn lc-btn-primary inline-flex items-center">
                    @if (isSubmitting)
                    {
                        <div class="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                        <span>Cr√©ation...</span>
                    }
                    else
                    {
                        <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                        </svg>
                        <span>Cr√©er la gamme</span>
                    }
                </button>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public Guid AssetId { get; set; }

    private CreateMaintenanceScheduleRequest schedule = new();
    private bool isSubmitting = false;
    private string errorMessage = "";
    private string successMessage = "";
    private string assetName = "";
    private int currentOperatingHours = 0;

    protected override async Task OnInitializedAsync()
    {
        // Initialiser les valeurs par d√©faut
        schedule.AssetId = AssetId;
        schedule.Type = "PREVENTIVE";
        schedule.Priority = "NORMAL";
        schedule.Status = "DRAFT";
        schedule.Frequency = "MONTHLY";
        schedule.Interval = 1;
        schedule.EstimatedDurationMinutes = 60;

        await LoadAssetInfo();
    }

    private async Task LoadAssetInfo()
    {
        try
        {
            var token = await JS.InvokeAsync<string>("localStorage.getItem", "authToken");
            if (!string.IsNullOrEmpty(token))
            {
                token = token.Trim('"');
            }

            if (string.IsNullOrEmpty(token))
            {
                Navigation.NavigateTo("/login");
                return;
            }

            Http.DefaultRequestHeaders.Clear();
            Http.DefaultRequestHeaders.Add("Authorization", $"Bearer {token}");

            var response = await Http.GetAsync($"api/assets/{AssetId}");
            if (response.IsSuccessStatusCode)
            {
                var asset = await response.Content.ReadFromJsonAsync<AssetBasicInfo>();
                assetName = asset?.Name ?? "√âquipement inconnu";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur lors du chargement de l'√©quipement: {ex.Message}");
        }
    }

    private async Task SaveSchedule()
    {
        if (!ValidateForm())
            return;

        isSubmitting = true;
        errorMessage = "";
        successMessage = "";

        try
        {
            var token = await JS.InvokeAsync<string>("localStorage.getItem", "authToken");
            if (!string.IsNullOrEmpty(token))
            {
                token = token.Trim('"');
            }

            if (string.IsNullOrEmpty(token))
            {
                Navigation.NavigateTo("/login");
                return;
            }

            Http.DefaultRequestHeaders.Clear();
            Http.DefaultRequestHeaders.Add("Authorization", $"Bearer {token}");

            // Si c'est une maintenance bas√©e sur les heures, mettre √† jour l'√©quipement d'abord
            if (schedule.Frequency == "HOURS_BASED")
            {
                var updateAssetRequest = new
                {
                    OperatingHours = currentOperatingHours,
                    LastOperatingHoursUpdate = DateTime.Now
                };

                var assetResponse = await Http.PatchAsJsonAsync($"api/assets/{AssetId}/operating-hours", updateAssetRequest);
                if (!assetResponse.IsSuccessStatusCode)
                {
                    var assetError = await assetResponse.Content.ReadAsStringAsync();
                    errorMessage = $"Erreur lors de la mise √† jour du compteur d'heures : {assetError}";
                    return;
                }
            }

            var response = await Http.PostAsJsonAsync("api/maintenanceschedules", schedule);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<MaintenanceScheduleResponse>();
                successMessage = "Gamme de maintenance cr√©√©e avec succ√®s !";

                if (schedule.Frequency == "HOURS_BASED")
                {
                    successMessage += " Le compteur d'heures de l'√©quipement a √©t√© mis √† jour.";
                }

                // Rediriger vers la page de l'√©quipement apr√®s 2 secondes
                await Task.Delay(2000);
                Navigation.NavigateTo($"/assets/{AssetId}");
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                errorMessage = $"Erreur lors de la cr√©ation : {errorContent}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Erreur : {ex.Message}";
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private bool ValidateForm()
    {
        errorMessage = "";

        if (string.IsNullOrWhiteSpace(schedule.Name))
        {
            errorMessage = "Le nom de la gamme est obligatoire.";
            return false;
        }

        if (schedule.Frequency == "HOURS_BASED")
        {
            if (!schedule.OperatingHoursInterval.HasValue || schedule.OperatingHoursInterval <= 0)
            {
                errorMessage = "L'intervalle en heures doit √™tre sup√©rieur √† 0.";
                return false;
            }

            if (currentOperatingHours < 0)
            {
                errorMessage = "Les heures actuelles de fonctionnement doivent √™tre renseign√©es.";
                return false;
            }
        }
        else
        {
            if (schedule.Interval <= 0)
            {
                errorMessage = "L'intervalle doit √™tre sup√©rieur √† 0.";
                return false;
            }
        }

        if (schedule.EstimatedDurationMinutes <= 0)
        {
            errorMessage = "La dur√©e estim√©e doit √™tre sup√©rieure √† 0.";
            return false;
        }

        return true;
    }

    private async Task GoBack()
    {
        await JS.InvokeVoidAsync("history.back");
    }

    private void OnFrequencyChanged()
    {
        // R√©initialiser les champs selon la fr√©quence s√©lectionn√©e
        if (schedule.Frequency == "HOURS_BASED")
        {
            // Pour les maintenances bas√©es sur les heures
            schedule.Interval = 0;
            schedule.OperatingHoursInterval = schedule.OperatingHoursInterval ?? 500; // Valeur par d√©faut
        }
        else
        {
            // Pour les maintenances bas√©es sur le temps
            schedule.OperatingHoursInterval = null;
            schedule.Interval = 1; // Valeur par d√©faut
        }
        StateHasChanged();
    }

    private class CreateMaintenanceScheduleRequest
    {
        public Guid AssetId { get; set; }
        public string Name { get; set; } = "";
        public string? Description { get; set; }
        public string Type { get; set; } = "PREVENTIVE";
        public string Priority { get; set; } = "NORMAL";
        public string Frequency { get; set; } = "MONTHLY";
        public int Interval { get; set; } = 1;
        public int? OperatingHoursInterval { get; set; }
        public int EstimatedDurationMinutes { get; set; } = 60;
        public string Status { get; set; } = "DRAFT";
        public string? SpecialInstructions { get; set; }
    }

    private class MaintenanceScheduleResponse
    {
        public Guid Id { get; set; }
        public string Name { get; set; } = "";
    }

    private class AssetBasicInfo
    {
        public string Name { get; set; } = "";
    }
}
