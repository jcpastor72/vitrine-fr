@page "/qualifications"
@using System.Net.Http.Json
@using System.Net.Http.Headers
@using VitrineFr.Services
@using Microsoft.JSInterop
@inject HttpClient Http
@inject NavigationManager Navigation
@inject AuthService AuthService
@inject IJSRuntime JSRuntime

<PageTitle>Qualifications - Labor Control</PageTitle>

<link href="css/professional.css" rel="stylesheet" />

<div class="min-h-screen bg-gray-50 py-8 px-4">
    <div class="max-w-7xl mx-auto">
        <!-- Header -->
        <div class="mb-8">
            <button @onclick="NavigateToDashboard"
                    class="lc-btn lc-btn-secondary inline-flex items-center mb-4">
                <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
                </svg>
                Retour
            </button>

            <div class="flex justify-between items-center flex-wrap gap-4">
                <div>
                    <h1 class="lc-heading-1">Qualifications</h1>
                    <p class="lc-text-muted mt-1">Activez les qualifications n√©cessaires pour vos secteurs d'activit√©</p>
                </div>
                <div class="flex gap-3">
                    <button @onclick="OpenCreateModal"
                            class="lc-btn lc-btn-primary inline-flex items-center">
                        <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
                        </svg>
                        Qualification personnalis√©e
                    </button>
                </div>
            </div>

            <!-- Industry Filter -->
            <div class="mt-6">
                <label class="block text-sm font-semibold text-gray-700 mb-2">
                    Filtrer par secteur
                </label>
                <select @onchange="OnSectorFilterChange"
                        class="w-full md:w-96 px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                    <option value="">Tous les secteurs</option>
                    @foreach (var industry in sectors.OrderBy(i => i.Name))
                    {
                        <option value="@industry.Id" selected="@(selectedSectorId == industry.Id)">
                            @industry.Icon @industry.Name (@industry.QualificationsCount qualifications)
                        </option>
                    }
                </select>
            </div>
        </div>

        <!-- Loading -->
        @if (isLoading)
        {
            <div class="text-center py-20">
                <div class="inline-block animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
                <p class="mt-4 text-gray-600">Chargement des qualifications...</p>
            </div>
        }
        else if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="bg-red-50 border border-red-200 text-red-800 px-4 py-3 rounded-lg">
                @errorMessage
            </div>
        }
        else if (allQualifications.Count == 0 && sectors.Count == 0)
        {
            <div class="bg-white rounded-xl shadow-sm p-12 text-center">
                <div class="text-6xl mb-4">üè≠</div>
                <h3 class="text-xl font-bold text-gray-800 mb-2">Aucun secteur activ√©</h3>
                <p class="text-gray-600 mb-6">Commencez par activer vos secteurs pour acc√©der aux qualifications correspondantes</p>
                <a href="/sectors"
                   class="inline-block bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 transition-colors">
                    ‚úì Activer des secteurs
                </a>
            </div>
        }
        else if (allQualifications.Count == 0 && selectedSectorId.HasValue)
        {
            <div class="bg-white rounded-xl shadow-sm p-12 text-center">
                <div class="text-6xl mb-4">üéì</div>
                <h3 class="text-xl font-bold text-gray-800 mb-2">Aucune qualification disponible</h3>
                <p class="text-gray-600 mb-6">Les qualifications sont automatiquement initialis√©es lors de l'activation d'un secteur.</p>
                <p class="text-gray-600">Si ce m√©tier vient d'√™tre activ√©, rechargez la page ou s√©lectionnez un autre secteur.</p>
            </div>
        }
        else
        {
            <!-- Active Qualifications -->
            @if (activeQualifications.Count > 0)
            {
                <div class="mb-8">
                    <div class="flex justify-between items-center mb-4">
                        <h2 class="lc-heading-2">Qualifications activ√©es (@activeQualifications.Count)</h2>
                        <button @onclick="NavigateToDashboard"
                                class="lc-btn lc-btn-primary">
                            Valider mon choix
                        </button>
                    </div>
                    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                        @foreach (var qual in activeQualifications.OrderBy(q => q.DisplayOrder).ThenBy(q => q.Name))
                        {
                            <div class="bg-white border rounded-lg p-6 hover:shadow-md transition-all"
                                 style="border-left: 4px solid @(qual.Color ?? qual.SectorColor ?? "#10B981")">
                                <div class="flex justify-between items-start mb-4">
                                    <div class="flex items-center flex-1">
                                        @if (!string.IsNullOrEmpty(qual.Icon))
                                        {
                                            <span class="text-3xl mr-3">@qual.Icon</span>
                                        }
                                        <div class="flex-1">
                                            <h3 class="text-lg font-semibold text-gray-900">@qual.Name</h3>
                                            @if (qual.IsPredefined)
                                            {
                                                <span class="inline-block bg-blue-100 text-blue-800 text-xs px-2 py-1 rounded mt-1">Pr√©d√©fini</span>
                                            }
                                            else
                                            {
                                                <span class="inline-block bg-green-100 text-green-800 text-xs px-2 py-1 rounded mt-1">Personnalis√©</span>
                                            }
                                        </div>
                                    </div>
                                    <div class="flex gap-2 ml-2">
                                        @if (!qual.IsPredefined)
                                        {
                                            <button @onclick="() => OpenEditModal(qual)"
                                                    class="text-blue-600 hover:text-blue-800 p-1"
                                                    title="Modifier">
                                                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                                                </svg>
                                            </button>
                                        }
                                        <button @onclick="() => ToggleQualification(qual)"
                                                class="text-red-600 hover:text-red-800 p-1"
                                                title="D√©sactiver">
                                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                                            </svg>
                                        </button>
                                    </div>
                                </div>

                                @if (!string.IsNullOrEmpty(qual.Description))
                                {
                                    <p class="text-gray-600 text-sm mb-4">@qual.Description</p>
                                }

                                <!-- Details -->
                                <div class="space-y-2 text-sm mb-4">
                                    @if (qual.RequiresRenewal && qual.ValidityPeriodMonths.HasValue)
                                    {
                                        <div class="flex items-center text-orange-600">
                                            <span class="mr-2">‚è∞</span>
                                            <span>Renouvellement: @qual.ValidityPeriodMonths mois</span>
                                        </div>
                                    }
                                    <div class="flex items-center text-gray-600">
                                        <span class="mr-2">‚ö†Ô∏è</span>
                                        <span>Criticit√©: @GetCriticalityLabel(qual.CriticalityLevel)</span>
                                    </div>
                                </div>

                                <!-- Industry Badge -->
                                <div class="pt-4 border-t border-gray-100">
                                    <div class="inline-flex items-center px-3 py-1 rounded-full text-sm"
                                         style="background-color: @(qual.SectorColor ?? "#E5E7EB")20; color: @(qual.SectorColor ?? "#6B7280")">
                                        @if (!string.IsNullOrEmpty(qual.SectorIcon))
                                        {
                                            <span class="mr-1">@qual.SectorIcon</span>
                                        }
                                        <span class="font-semibold">@qual.SectorName</span>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            }

            <!-- Inactive Qualifications -->
            @if (inactiveQualifications.Count > 0)
            {
                <div>
                    <h2 class="lc-heading-2 mb-4">Qualifications disponibles (@inactiveQualifications.Count)</h2>
                    <p class="lc-text-muted mb-4">Cliquez sur une qualification pour l'activer</p>
                    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                        @foreach (var qual in inactiveQualifications.OrderBy(q => q.DisplayOrder).ThenBy(q => q.Name))
                        {
                            <button @onclick="() => ToggleQualification(qual)"
                                    class="bg-gray-50 border rounded-lg p-6 hover:border-blue-400 hover:bg-white transition-all text-left opacity-60 hover:opacity-100"
                                    style="border-left: 4px solid @(qual.Color ?? qual.SectorColor ?? "#3B82F6")">
                                <div class="flex items-center mb-3">
                                    @if (!string.IsNullOrEmpty(qual.Icon))
                                    {
                                        <span class="text-3xl mr-3 opacity-50">@qual.Icon</span>
                                    }
                                    <div class="flex-1">
                                        <h3 class="text-lg font-semibold text-gray-900">@qual.Name</h3>
                                        @if (qual.IsPredefined)
                                        {
                                            <span class="inline-block bg-gray-200 text-gray-600 text-xs px-2 py-1 rounded mt-1">Pr√©d√©fini</span>
                                        }
                                    </div>
                                    <svg class="w-5 h-5 text-gray-400 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
                                    </svg>
                                </div>

                                @if (!string.IsNullOrEmpty(qual.Description))
                                {
                                    <p class="text-gray-500 text-sm mb-3">@qual.Description</p>
                                }

                                <!-- Details -->
                                <div class="space-y-2 text-sm mb-3">
                                    @if (qual.RequiresRenewal && qual.ValidityPeriodMonths.HasValue)
                                    {
                                        <div class="flex items-center text-gray-500">
                                            <span class="mr-2">‚è∞</span>
                                            <span>Renouvellement: @qual.ValidityPeriodMonths mois</span>
                                        </div>
                                    }
                                </div>

                                <!-- Industry Badge -->
                                <div class="inline-flex items-center px-3 py-1 rounded-full text-sm"
                                     style="background-color: @(qual.SectorColor ?? "#E5E7EB")20; color: @(qual.SectorColor ?? "#6B7280")">
                                    @if (!string.IsNullOrEmpty(qual.SectorIcon))
                                    {
                                        <span class="mr-1">@qual.SectorIcon</span>
                                    }
                                    <span class="font-semibold">@qual.SectorName</span>
                                </div>
                            </button>
                        }
                    </div>
                </div>
            }

        }
    </div>
</div>

<!-- Create/Edit Modal (pour qualifications personnalis√©es uniquement) -->
@if (showModal)
{
    <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
        <div class="bg-white rounded-lg shadow-xl max-w-2xl w-full max-h-[90vh] overflow-y-auto">
            <div class="p-8">
                <h2 class="lc-heading-2 mb-6">
                    @(isEditMode ? "Modifier la qualification personnalis√©e" : "Nouvelle qualification personnalis√©e")
                </h2>

                @if (!string.IsNullOrEmpty(modalErrorMessage))
                {
                    <div class="bg-red-50 border border-red-200 text-red-800 px-4 py-3 rounded-lg mb-6">
                        @modalErrorMessage
                    </div>
                }

                <div class="space-y-6">
                    <!-- Industry Selection -->
                    <div>
                        <label class="block text-sm font-semibold text-gray-700 mb-2">
                            Secteur <span class="text-red-500">*</span>
                        </label>
                        @if (sectors.Count == 0)
                        {
                            <div class="bg-yellow-50 border border-yellow-200 text-yellow-800 px-4 py-3 rounded-lg">
                                Aucun secteur disponible. <a href="/sectors" class="underline font-semibold">Activer un secteur d'abord</a>
                            </div>
                        }
                        else
                        {
                            <select @bind="formSectorId"
                                    required
                                    class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                                <option value="">S√©lectionnez un secteur</option>
                                @foreach (var industry in sectors.OrderBy(i => i.Name))
                                {
                                    <option value="@industry.Id">@industry.Icon @industry.Name</option>
                                }
                            </select>
                        }
                    </div>

                    <!-- Name -->
                    <div>
                        <label class="block text-sm font-semibold text-gray-700 mb-2">
                            Nom de la qualification <span class="text-red-500">*</span>
                        </label>
                        <input @bind="formName"
                               type="text"
                               placeholder="Ex: CACES R489 Cat 3 - Nacelle"
                               required
                               class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent" />
                    </div>

                    <!-- Code -->
                    <div>
                        <label class="block text-sm font-semibold text-gray-700 mb-2">
                            Code (optionnel)
                        </label>
                        <input @bind="formCode"
                               type="text"
                               placeholder="Ex: R489-3"
                               class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent" />
                    </div>

                    <!-- Description -->
                    <div>
                        <label class="block text-sm font-semibold text-gray-700 mb-2">
                            Description (optionnelle)
                        </label>
                        <textarea @bind="formDescription"
                                  rows="3"
                                  placeholder="Description de la qualification..."
                                  class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"></textarea>
                    </div>

                    <!-- Requires Renewal -->
                    <div class="flex items-center">
                        <input @bind="formRequiresRenewal"
                               type="checkbox"
                               id="requiresRenewal"
                               class="w-5 h-5 text-blue-600 rounded focus:ring-2 focus:ring-blue-500" />
                        <label for="requiresRenewal" class="ml-3 text-sm font-semibold text-gray-700">
                            Cette qualification n√©cessite un renouvellement
                        </label>
                    </div>

                    <!-- Validity Period -->
                    @if (formRequiresRenewal)
                    {
                        <div>
                            <label class="block text-sm font-semibold text-gray-700 mb-2">
                                P√©riode de validit√© (en mois) <span class="text-red-500">*</span>
                            </label>
                            <input @bind="formValidityPeriodMonths"
                                   type="number"
                                   min="1"
                                   placeholder="Ex: 60 (5 ans pour CACES)"
                                   class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent" />
                        </div>
                    }

                </div>

                <!-- Actions -->
                <div class="flex gap-4 mt-8">
                    <button @onclick="CloseModal"
                            class="flex-1 lc-btn lc-btn-secondary">
                        Annuler
                    </button>
                    <button @onclick="SaveQualification"
                            disabled="@isSaving"
                            class="flex-1 lc-btn lc-btn-primary disabled:opacity-50">
                        @(isSaving ? "Enregistrement..." : isEditMode ? "Mettre √† jour" : "Cr√©er")
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<QualificationDto> allQualifications = new();
    private List<QualificationDto> activeQualifications => allQualifications.Where(q => q.IsActive).ToList();
    private List<QualificationDto> inactiveQualifications => allQualifications.Where(q => !q.IsActive).ToList();

    private List<SectorDto> sectors = new();
    private bool isLoading = true;
    private string? errorMessage;
    private Guid? selectedSectorId;

    // Modal
    private bool showModal = false;
    private bool isEditMode = false;
    private bool isSaving = false;
    private Guid? editingId;
    private string? modalErrorMessage;

    // Form fields
    private string formSectorId = "";
    private string formName = "";
    private string? formCode;
    private string? formDescription;
    private bool formRequiresRenewal = false;
    private int? formValidityPeriodMonths;

    protected override async Task OnInitializedAsync()
    {
        // Check for industryId query parameter
        var uri = new Uri(Navigation.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
        var industryIdParam = query["industryId"];
        if (!string.IsNullOrEmpty(industryIdParam) && Guid.TryParse(industryIdParam, out var industryId))
        {
            selectedSectorId = industryId;
        }

        await LoadSectors();
        await LoadQualifications();
    }

    private async Task LoadSectors()
    {
        try
        {
            var token = await AuthService.GetTokenAsync();
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

            var response = await Http.GetFromJsonAsync<List<SectorDto>>("http://localhost:5278/api/sectors?isActive=true");
            sectors = response ?? new List<SectorDto>();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur lors du chargement des m√©tiers: {ex}");
        }
    }

    private async Task LoadQualifications()
    {
        try
        {
            isLoading = true;
            errorMessage = null;

            var token = await AuthService.GetTokenAsync();
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

            // Load ALL qualifications (active and inactive) for the selected industry or all
            var url = selectedSectorId.HasValue
                ? $"http://localhost:5278/api/qualifications?sectorId={selectedSectorId.Value}"
                : "http://localhost:5278/api/qualifications";

            var response = await Http.GetFromJsonAsync<List<QualificationDto>>(url);
            allQualifications = response ?? new List<QualificationDto>();
        }
        catch (Exception ex)
        {
            errorMessage = $"Erreur lors du chargement: {ex.Message}";
            Console.WriteLine($"Erreur: {ex}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task OnSectorFilterChange(ChangeEventArgs e)
    {
        var value = e.Value?.ToString();
        selectedSectorId = string.IsNullOrEmpty(value) ? null : Guid.Parse(value);
        await LoadQualifications();
    }

    private async Task ToggleQualification(QualificationDto qualification)
    {
        try
        {
            var token = await AuthService.GetTokenAsync();
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

            // Use the dedicated toggle endpoint
            var response = await Http.PostAsync($"http://localhost:5278/api/qualifications/{qualification.Id}/toggle", null);

            if (response.IsSuccessStatusCode)
            {
                await LoadSectors(); // Refresh industry counts
                await LoadQualifications(); // Refresh from server
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                errorMessage = $"Erreur: {error}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Erreur: {ex.Message}";
            Console.WriteLine($"Erreur: {ex}");
        }
    }

    private void OpenCreateModal()
    {
        if (sectors.Count == 0)
        {
            errorMessage = "Veuillez d'abord activer un secteur";
            return;
        }

        isEditMode = false;
        editingId = null;
        ResetForm();

        // Pre-select industry if filtered
        if (selectedSectorId.HasValue)
        {
            formSectorId = selectedSectorId.Value.ToString();
        }

        showModal = true;
    }

    private void OpenEditModal(QualificationDto qualification)
    {
        isEditMode = true;
        editingId = qualification.Id;
        formSectorId = qualification.SectorId.ToString();
        formName = qualification.Name;
        formCode = qualification.Code;
        formDescription = qualification.Description;
        formRequiresRenewal = qualification.RequiresRenewal;
        formValidityPeriodMonths = qualification.ValidityPeriodMonths;
        showModal = true;
    }

    private void CloseModal()
    {
        showModal = false;
        modalErrorMessage = null;
        ResetForm();
    }

    private void ResetForm()
    {
        formSectorId = "";
        formName = "";
        formCode = null;
        formDescription = null;
        formRequiresRenewal = false;
        formValidityPeriodMonths = null;
    }

    private async Task SaveQualification()
    {
        try
        {
            isSaving = true;
            modalErrorMessage = null;

            // Validation
            if (string.IsNullOrWhiteSpace(formName))
            {
                modalErrorMessage = "Le nom est obligatoire";
                return;
            }

            if (string.IsNullOrWhiteSpace(formSectorId) || !Guid.TryParse(formSectorId, out var industryId))
            {
                modalErrorMessage = "Le m√©tier est obligatoire";
                return;
            }

            if (formRequiresRenewal && (!formValidityPeriodMonths.HasValue || formValidityPeriodMonths.Value <= 0))
            {
                modalErrorMessage = "La p√©riode de validit√© est obligatoire si renouvellement requis";
                return;
            }

            var token = await AuthService.GetTokenAsync();
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

            var request = new
            {
                SectorId = industryId,
                Name = formName,
                Category = "AUTRE", // Valeur par d√©faut
                Code = formCode,
                Description = formDescription,
                Icon = (string?)null, // Pas d'ic√¥ne personnalis√©e
                Color = (string?)null, // Pas de couleur personnalis√©e
                RequiresRenewal = formRequiresRenewal,
                ValidityPeriodMonths = formValidityPeriodMonths,
                CriticalityLevel = 3, // Valeur par d√©faut: Moyenne
                DisplayOrder = 0 // Valeur par d√©faut
            };

            HttpResponseMessage response;

            if (isEditMode && editingId.HasValue)
            {
                response = await Http.PutAsJsonAsync($"http://localhost:5278/api/qualifications/{editingId.Value}", request);
            }
            else
            {
                response = await Http.PostAsJsonAsync("http://localhost:5278/api/qualifications", request);
            }

            if (response.IsSuccessStatusCode)
            {
                CloseModal();
                await LoadSectors(); // Refresh industry counts
                await LoadQualifications();
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                modalErrorMessage = $"Erreur: {error}";
            }
        }
        catch (Exception ex)
        {
            modalErrorMessage = $"Erreur: {ex.Message}";
            Console.WriteLine($"Erreur: {ex}");
        }
        finally
        {
            isSaving = false;
        }
    }

    private void NavigateToDashboard()
    {
        Navigation.NavigateTo("/dashboard");
    }

    private string GetCriticalityLabel(int level)
    {
        return level switch
        {
            1 => "Information",
            2 => "Faible",
            3 => "Moyenne",
            4 => "√âlev√©e",
            5 => "Critique",
            _ => "Inconnue"
        };
    }

    public class QualificationDto
    {
        public Guid Id { get; set; }
        public Guid SectorId { get; set; }
        public string SectorName { get; set; } = string.Empty;
        public string? SectorColor { get; set; }
        public string? SectorIcon { get; set; }
        public string Name { get; set; } = string.Empty;
        public string Category { get; set; } = string.Empty;
        public string? Code { get; set; }
        public string? Description { get; set; }
        public string? Color { get; set; }
        public string? Icon { get; set; }
        public bool RequiresRenewal { get; set; }
        public int? ValidityPeriodMonths { get; set; }
        public int CriticalityLevel { get; set; }
        public int DisplayOrder { get; set; }
        public bool IsPredefined { get; set; }
        public bool IsActive { get; set; }
        public DateTime CreatedAt { get; set; }
    }

    public class SectorDto
    {
        public Guid Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public string? Code { get; set; }
        public string? Icon { get; set; }
        public string? Color { get; set; }
        public bool IsActive { get; set; }
        public int QualificationsCount { get; set; }
    }
}
