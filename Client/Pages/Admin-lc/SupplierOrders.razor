@page "/admin-lc/supplier-orders"
@using VitrineFr.Services
@using System.Net.Http.Headers
@inject HttpClient Http
@inject AuthService AuthService
@inject IJSRuntime JS
@inject NavigationManager Navigation

@code {
    public class SupplierOrderResponse
    {
        public Guid Id { get; set; }
        public Guid SupplierId { get; set; }
        public string OrderNumber { get; set; } = string.Empty;
        public DateTime OrderDate { get; set; }
        public DateTime? SentDate { get; set; }
        public DateTime? ExpectedDeliveryDate { get; set; }
        public DateTime? ReceivedDate { get; set; }
        public decimal TotalAmount { get; set; }
        public string Status { get; set; } = string.Empty;
        public string? Notes { get; set; }
        public List<SupplierOrderLineResponse> Lines { get; set; } = new();
        public DateTime CreatedAt { get; set; }
        public DateTime UpdatedAt { get; set; }
    }

    public class SupplierOrderLineResponse
    {
        public Guid Id { get; set; }
        public string ProductType { get; set; } = string.Empty;
        public int Quantity { get; set; }
        public int ReceivedQuantity { get; set; }
        public decimal UnitPrice { get; set; }
        public decimal TotalPrice { get; set; }
    }

    public class SupplierResponse
    {
        public Guid Id { get; set; }
        public string Name { get; set; } = string.Empty;
    }

    public class OrderLineItem
    {
        public string ProductType { get; set; } = "NFC_TAG213";
        public int Quantity { get; set; } = 1;
        public decimal UnitPrice { get; set; } = 0;
    }

    private List<SupplierOrderResponse> allOrders = new();
    private List<SupplierOrderResponse> filteredOrders = new();
    private List<SupplierResponse> suppliers = new();
    private bool isLoading = true;

    // Filtres
    private string selectedStatus = "";
    private string searchTerm = "";
    private string selectedSupplierId = "";

    // Modal détail
    private bool showDetailModal = false;
    private SupplierOrderResponse? selectedOrder = null;

    // Modal création
    private bool showCreateModal = false;
    private string createSupplierId = "";
    private List<OrderLineItem> createLines = new();
    private string createNotes = "";
    private DateTime? createExpectedDeliveryDate = null;

    // Modal erreur
    private bool showErrorModal = false;
    private string errorTitle = "";
    private string errorMessage = "";
    private string errorDetails = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        isLoading = true;
        try
        {
            var token = await AuthService.GetTokenAsync();
            Http.DefaultRequestHeaders.Authorization =
                new AuthenticationHeaderValue("Bearer", token);

            // Charger commandes
            var ordersResponse = await Http.GetAsync("api/supplier-orders");
            if (ordersResponse.IsSuccessStatusCode)
            {
                allOrders = await ordersResponse.Content.ReadFromJsonAsync<List<SupplierOrderResponse>>() ?? new();
                filteredOrders = new List<SupplierOrderResponse>(allOrders);
            }

            // Charger fournisseurs
            var suppliersResponse = await Http.GetAsync("api/suppliers");
            if (suppliersResponse.IsSuccessStatusCode)
            {
                suppliers = await suppliersResponse.Content.ReadFromJsonAsync<List<SupplierResponse>>() ?? new();
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Erreur: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private void FilterOrders()
    {
        filteredOrders = allOrders.Where(o =>
        {
            if (!string.IsNullOrEmpty(selectedStatus) && o.Status != selectedStatus)
                return false;

            if (!string.IsNullOrEmpty(searchTerm) && !o.OrderNumber.ToLower().Contains(searchTerm.ToLower()))
                return false;

            if (!string.IsNullOrEmpty(selectedSupplierId) && o.SupplierId.ToString() != selectedSupplierId)
                return false;

            return true;
        }).ToList();
    }

    private void ClearFilters()
    {
        selectedStatus = "";
        searchTerm = "";
        selectedSupplierId = "";
        FilterOrders();
    }

    private void NavigateToDashboard()
    {
        Navigation.NavigateTo("/admin-lc/dashboard");
    }

    private void OpenCreateModal()
    {
        ResetCreateForm();
        showCreateModal = true;
    }

    private void CloseCreateModal()
    {
        showCreateModal = false;
        ResetCreateForm();
    }

    private void ResetCreateForm()
    {
        createSupplierId = "";
        createLines = new List<OrderLineItem> { new OrderLineItem() };
        createNotes = "";
        createExpectedDeliveryDate = null;
    }

    private void AddOrderLine()
    {
        createLines.Add(new OrderLineItem());
    }

    private void RemoveOrderLine(int index)
    {
        if (createLines.Count > 1)
        {
            createLines.RemoveAt(index);
        }
    }

    private decimal GetLineTotal(OrderLineItem line)
    {
        return line.Quantity * line.UnitPrice;
    }

    private decimal GetOrderTotal()
    {
        return createLines.Sum(l => GetLineTotal(l));
    }

    private async Task CreateOrder()
    {
        if (string.IsNullOrEmpty(createSupplierId))
        {
            ShowErrorModal("Validation", "Veuillez sélectionner un fournisseur");
            return;
        }

        if (createLines.Count == 0 || createLines.All(l => l.Quantity == 0))
        {
            ShowErrorModal("Validation", "Veuillez ajouter au moins une ligne de commande");
            return;
        }

        try
        {
            var token = await AuthService.GetTokenAsync();
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

            // Générer numéro de commande automatique
            var orderNumber = $"ORD-{DateTime.Now:yyyyMMdd}-{new Random().Next(1000, 9999)}";

            var request = new
            {
                supplierId = createSupplierId,
                orderNumber = orderNumber,
                totalAmount = GetOrderTotal(),
                lines = createLines.Select(l => new
                {
                    productType = l.ProductType,
                    quantity = l.Quantity,
                    unitPrice = l.UnitPrice
                }).ToList(),
                notes = createNotes,
                expectedDeliveryDate = createExpectedDeliveryDate
            };

            var response = await Http.PostAsJsonAsync("api/supplier-orders", request);

            if (response.IsSuccessStatusCode)
            {
                await JS.InvokeVoidAsync("showNotification", "Commande créée avec succès");
                CloseCreateModal();
                await LoadData();
            }
            else
            {
                try
                {
                    var errorResponse = await response.Content.ReadFromJsonAsync<ErrorResponse>();
                    ShowErrorModal("Erreur de création", errorResponse?.message ?? "Erreur inconnue", errorResponse?.details);
                }
                catch
                {
                    var errorText = await response.Content.ReadAsStringAsync();
                    ShowErrorModal("Erreur de création", "Une erreur est survenue lors de la création de la commande", errorText);
                }
            }
        }
        catch (Exception ex)
        {
            ShowErrorModal("Erreur", "Une erreur est survenue", ex.Message);
        }
    }

    private void ShowErrorModal(string title, string message, string? details = null)
    {
        errorTitle = title;
        errorMessage = message;
        errorDetails = details ?? "";
        showErrorModal = true;
    }

    private void CloseErrorModal()
    {
        showErrorModal = false;
        errorTitle = "";
        errorMessage = "";
        errorDetails = "";
    }

    private class ErrorResponse
    {
        public string message { get; set; } = "";
        public string? details { get; set; }
    }

    private void ViewOrderDetails(Guid orderId)
    {
        selectedOrder = allOrders.FirstOrDefault(o => o.Id == orderId);
        if (selectedOrder != null)
        {
            showDetailModal = true;
        }
    }

    private void CloseDetailModal()
    {
        showDetailModal = false;
        selectedOrder = null;
    }

    private async Task SendOrder()
    {
        if (selectedOrder == null) return;

        try
        {
            var token = await AuthService.GetTokenAsync();
            Http.DefaultRequestHeaders.Authorization =
                new AuthenticationHeaderValue("Bearer", token);

            var response = await Http.PostAsJsonAsync($"api/supplier-orders/{selectedOrder.Id}/send", new { });

            if (response.IsSuccessStatusCode)
            {
                await JS.InvokeVoidAsync("showNotification", "Commande envoyée");
                CloseDetailModal();
                await LoadData();
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Erreur: {ex.Message}");
        }
    }

    private async Task ReceiveOrder()
    {
        if (selectedOrder == null) return;

        try
        {
            var token = await AuthService.GetTokenAsync();
            Http.DefaultRequestHeaders.Authorization =
                new AuthenticationHeaderValue("Bearer", token);

            var lines = selectedOrder.Lines.Select(l => new { lineId = l.Id, receivedQuantity = l.Quantity }).ToList();
            var request = new { lines };

            var response = await Http.PostAsJsonAsync($"api/supplier-orders/{selectedOrder.Id}/receive", request);

            if (response.IsSuccessStatusCode)
            {
                await JS.InvokeVoidAsync("showNotification", "Commande réceptionnée");
                CloseDetailModal();
                await LoadData();
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Erreur: {ex.Message}");
        }
    }

    private async Task DeleteOrder()
    {
        if (selectedOrder == null) return;

        try
        {
            var token = await AuthService.GetTokenAsync();
            Http.DefaultRequestHeaders.Authorization =
                new AuthenticationHeaderValue("Bearer", token);

            var response = await Http.DeleteAsync($"api/supplier-orders/{selectedOrder.Id}");

            if (response.IsSuccessStatusCode)
            {
                await JS.InvokeVoidAsync("showNotification", "Commande annulée");
                CloseDetailModal();
                await LoadData();
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Erreur: {ex.Message}");
        }
    }
}

<div class="min-h-screen bg-gray-50 py-8 px-4">
    <div class="max-w-7xl mx-auto">
        <!-- Header -->
        <div class="mb-8">
            <button @onclick="NavigateToDashboard"
                    class="lc-btn lc-btn-secondary inline-flex items-center mb-4">
                <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
                </svg>
                Retour
            </button>

            <div class="flex justify-between items-center flex-wrap gap-4">
                <div>
                    <h1 class="lc-heading-1">Commandes Fournisseurs</h1>
                    <p class="lc-text-muted mt-1">Gérez vos commandes de puces RFID</p>
                </div>
                <button @onclick="OpenCreateModal"
                        class="lc-btn lc-btn-primary inline-flex items-center">
                    <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
                    </svg>
                    Nouvelle Commande
                </button>
            </div>
        </div>

        <!-- Filtres -->
        <div class="bg-white rounded-xl shadow-sm p-6 mb-6">
            <div class="grid md:grid-cols-4 gap-4">
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">Statut</label>
                    <select @bind="selectedStatus" @bind:after="FilterOrders"
                            class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                        <option value="">Tous</option>
                        <option value="DRAFT">Brouillon</option>
                        <option value="SENT">Envoyé</option>
                        <option value="EN_TRANSIT">En transit</option>
                        <option value="RECEIVED">Reçu</option>
                        <option value="CANCELLED">Annulé</option>
                    </select>
                </div>

                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">Recherche</label>
                    <input type="text" @bind="searchTerm" @bind:after="FilterOrders"
                           placeholder="N° commande..."
                           class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500" />
                </div>

                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">Fournisseur</label>
                    <select @bind="selectedSupplierId" @bind:after="FilterOrders"
                            class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                        <option value="">Tous</option>
                        @foreach (var supplier in suppliers)
                        {
                            <option value="@supplier.Id">@supplier.Name</option>
                        }
                    </select>
                </div>

                <div class="flex items-end">
                    <button @onclick="ClearFilters"
                            class="w-full px-4 py-2 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300 transition">
                        Réinitialiser
                    </button>
                </div>
            </div>
        </div>

        <!-- Liste Commandes -->
        @if (isLoading)
        {
            <div class="flex justify-center items-center py-20">
                <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
            </div>
        }
        else if (filteredOrders.Count == 0)
        {
            <div class="bg-white rounded-xl shadow-sm p-12 text-center">
                <div class="text-gray-400 text-5xl mb-4">📦</div>
                <p class="text-gray-600">Aucune commande trouvée</p>
            </div>
        }
        else
        {
            <div class="bg-white rounded-xl shadow-sm overflow-hidden">
                <div class="px-6 py-4 border-b border-gray-200">
                    <h2 class="text-lg font-bold text-gray-900">
                        Commandes (@filteredOrders.Count)
                    </h2>
                </div>

                <div class="overflow-x-auto">
                    <table class="min-w-full divide-y divide-gray-200">
                        <thead class="bg-gray-50">
                            <tr>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                    N° Commande
                                </th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                    Date
                                </th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                    Montant
                                </th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                    Statut
                                </th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                    Livraison
                                </th>
                            </tr>
                        </thead>
                        <tbody class="bg-white divide-y divide-gray-200">
                            @foreach (var order in filteredOrders)
                            {
                                <tr class="hover:bg-gray-50 cursor-pointer" @onclick="() => ViewOrderDetails(order.Id)">
                                    <td class="px-6 py-4 whitespace-nowrap">
                                        <span class="text-sm font-medium text-gray-900">@order.OrderNumber</span>
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap">
                                        <span class="text-sm text-gray-600">@order.OrderDate.ToString("dd/MM/yyyy")</span>
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap">
                                        <span class="text-sm text-gray-600">@order.TotalAmount.ToString("C")</span>
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap">
                                        @{
                                            var statusColor = order.Status switch
                                            {
                                                "DRAFT" => "bg-yellow-100 text-yellow-800",
                                                "SENT" => "bg-blue-100 text-blue-800",
                                                "EN_TRANSIT" => "bg-purple-100 text-purple-800",
                                                "RECEIVED" => "bg-green-100 text-green-800",
                                                "CANCELLED" => "bg-red-100 text-red-800",
                                                _ => "bg-gray-100 text-gray-800"
                                            };
                                        }
                                        <span class="px-3 py-1 inline-flex text-xs leading-5 font-semibold rounded-full @statusColor">
                                            @order.Status
                                        </span>
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap">
                                        <span class="text-sm text-gray-600">
                                            @if (order.ExpectedDeliveryDate.HasValue)
                                            {
                                                @order.ExpectedDeliveryDate.Value.ToString("dd/MM/yyyy")
                                            }
                                            else
                                            {
                                                <span>-</span>
                                            }
                                        </span>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        }
    </div>
</div>

<!-- Modal Détail -->
@if (showDetailModal && selectedOrder != null)
{
    <div class="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50 p-4"
         @onclick="CloseDetailModal">
        <div class="bg-white rounded-xl shadow-2xl max-w-3xl w-full max-h-[90vh] overflow-y-auto"
             @onclick:stopPropagation>

            <!-- Header -->
            <div class="bg-blue-50 border-b border-blue-200 p-6">
                <div class="flex items-start justify-between">
                    <div>
                        <h3 class="text-2xl font-bold text-gray-900">Commande @selectedOrder.OrderNumber</h3>
                        <p class="text-sm text-gray-600 mt-1">Statut: @selectedOrder.Status</p>
                    </div>
                    <button @onclick="CloseDetailModal"
                            class="text-gray-400 hover:text-gray-600 transition">
                        <svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                        </svg>
                    </button>
                </div>
            </div>

            <!-- Body -->
            <div class="p-6">
                <div class="grid md:grid-cols-2 gap-6 mb-6">
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Date Commande</label>
                        <p class="text-lg text-gray-900">@selectedOrder.OrderDate.ToString("dd/MM/yyyy HH:mm")</p>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Montant Total</label>
                        <p class="text-lg text-gray-900">@selectedOrder.TotalAmount.ToString("C")</p>
                    </div>
                </div>

                <div class="grid md:grid-cols-2 gap-6 mb-6">
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Date Envoi</label>
                        <p class="text-lg text-gray-900">
                            @if (selectedOrder.SentDate.HasValue)
                            {
                                @selectedOrder.SentDate.Value.ToString("dd/MM/yyyy HH:mm")
                            }
                            else
                            {
                                <span class="text-gray-500">-</span>
                            }
                        </p>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Date Livraison Prévue</label>
                        <p class="text-lg text-gray-900">
                            @if (selectedOrder.ExpectedDeliveryDate.HasValue)
                            {
                                @selectedOrder.ExpectedDeliveryDate.Value.ToString("dd/MM/yyyy")
                            }
                            else
                            {
                                <span class="text-gray-500">-</span>
                            }
                        </p>
                    </div>
                </div>

                <div class="grid md:grid-cols-2 gap-6 mb-6">
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Date Réception</label>
                        <p class="text-lg text-gray-900">
                            @if (selectedOrder.ReceivedDate.HasValue)
                            {
                                @selectedOrder.ReceivedDate.Value.ToString("dd/MM/yyyy HH:mm")
                            }
                            else
                            {
                                <span class="text-gray-500">-</span>
                            }
                        </p>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Notes</label>
                        <p class="text-lg text-gray-900">@(selectedOrder.Notes ?? "-")</p>
                    </div>
                </div>

                <!-- Lignes de commande -->
                <div class="mb-6">
                    <h4 class="text-lg font-bold text-gray-900 mb-4">Lignes de Commande</h4>
                    <div class="overflow-x-auto">
                        <table class="min-w-full divide-y divide-gray-200 border border-gray-300">
                            <thead class="bg-gray-50">
                                <tr>
                                    <th class="px-4 py-2 text-left text-xs font-medium text-gray-500">Type Produit</th>
                                    <th class="px-4 py-2 text-left text-xs font-medium text-gray-500">Quantité</th>
                                    <th class="px-4 py-2 text-left text-xs font-medium text-gray-500">Reçue</th>
                                    <th class="px-4 py-2 text-left text-xs font-medium text-gray-500">Prix Unitaire</th>
                                    <th class="px-4 py-2 text-left text-xs font-medium text-gray-500">Total</th>
                                </tr>
                            </thead>
                            <tbody class="divide-y divide-gray-200">
                                @foreach (var line in selectedOrder.Lines)
                                {
                                    <tr>
                                        <td class="px-4 py-2 text-sm">@line.ProductType</td>
                                        <td class="px-4 py-2 text-sm">@line.Quantity</td>
                                        <td class="px-4 py-2 text-sm">@line.ReceivedQuantity</td>
                                        <td class="px-4 py-2 text-sm">@line.UnitPrice.ToString("C")</td>
                                        <td class="px-4 py-2 text-sm">@line.TotalPrice.ToString("C")</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>

            <!-- Footer -->
            <div class="bg-gray-50 border-t border-gray-200 p-6 flex justify-between">
                <div class="flex space-x-3">
                    @if (selectedOrder.Status == "DRAFT")
                    {
                        <button @onclick="DeleteOrder"
                                class="px-6 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition">
                            Annuler
                        </button>
                    }
                </div>
                <div class="flex space-x-3">
                    <button @onclick="CloseDetailModal"
                            class="px-6 py-2 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300 transition">
                        Fermer
                    </button>
                    @if (selectedOrder.Status == "DRAFT")
                    {
                        <button @onclick="SendOrder"
                                class="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition">
                            Envoyer
                        </button>
                    }
                    @if (selectedOrder.Status == "SENT" || selectedOrder.Status == "EN_TRANSIT")
                    {
                        <button @onclick="ReceiveOrder"
                                class="px-6 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition">
                            Réceptionner
                        </button>
                    }
                </div>
            </div>
        </div>
    </div>
}

<!-- Modal Erreur -->
@if (showErrorModal)
{
    <div class="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50 p-4" @onclick="CloseErrorModal">
        <div class="bg-white rounded-xl shadow-2xl max-w-md w-full" @onclick:stopPropagation>
            <div class="bg-red-50 border-b border-red-200 p-6">
                <div class="flex items-start justify-between">
                    <div class="flex items-start gap-3">
                        <svg class="w-6 h-6 text-red-600 flex-shrink-0 mt-0.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4v.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                        </svg>
                        <div>
                            <h3 class="text-lg font-bold text-red-900">@errorTitle</h3>
                        </div>
                    </div>
                    <button @onclick="CloseErrorModal" class="text-red-400 hover:text-red-600">
                        <svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                        </svg>
                    </button>
                </div>
            </div>
            <div class="p-6">
                <p class="text-gray-900 font-medium mb-2">@errorMessage</p>
                @if (!string.IsNullOrEmpty(errorDetails))
                {
                    <div class="mt-4 p-3 bg-gray-50 rounded-lg border border-gray-200">
                        <p class="text-sm text-gray-600 font-mono break-words">@errorDetails</p>
                    </div>
                }
            </div>
            <div class="bg-gray-50 border-t border-gray-200 p-6 flex justify-end">
                <button @onclick="CloseErrorModal" class="px-6 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition">
                    Fermer
                </button>
            </div>
        </div>
    </div>
}

<!-- Modal Création Commande -->
@if (showCreateModal)
{
    <div class="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50 p-4" @onclick="CloseCreateModal">
        <div class="bg-white rounded-xl shadow-2xl max-w-4xl w-full max-h-[90vh] overflow-y-auto" @onclick:stopPropagation>
            <div class="bg-green-50 border-b border-green-200 p-6">
                <div class="flex items-start justify-between">
                    <div>
                        <h3 class="text-2xl font-bold text-gray-900">Nouvelle Commande</h3>
                        <p class="text-sm text-gray-600 mt-1">Créez une nouvelle commande fournisseur</p>
                    </div>
                    <button @onclick="CloseCreateModal" class="text-gray-400 hover:text-gray-600">
                        <svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                        </svg>
                    </button>
                </div>
            </div>
            <div class="p-6">
                <div class="space-y-4">
                    <div class="grid md:grid-cols-2 gap-4">
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Fournisseur *</label>
                            <select @bind="createSupplierId" class="w-full px-4 py-2 border border-gray-300 rounded-lg">
                                <option value="">-- Sélectionner un fournisseur --</option>
                                @foreach (var supplier in suppliers)
                                {
                                    <option value="@supplier.Id">@supplier.Name</option>
                                }
                            </select>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Date Livraison Prévue</label>
                            <input type="date" @bind="createExpectedDeliveryDate" class="w-full px-4 py-2 border border-gray-300 rounded-lg" />
                        </div>
                    </div>

                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Notes</label>
                        <textarea @bind="createNotes" placeholder="Notes supplémentaires..." class="w-full px-4 py-2 border border-gray-300 rounded-lg" rows="3"></textarea>
                    </div>

                    <!-- Lignes de commande -->
                    <div>
                        <div class="flex justify-between items-center mb-4">
                            <h4 class="text-lg font-bold text-gray-900">Lignes de Commande</h4>
                            <button @onclick="AddOrderLine" class="px-3 py-1 bg-blue-600 text-white rounded text-sm hover:bg-blue-700">
                                + Ajouter une ligne
                            </button>
                        </div>

                        <div class="overflow-x-auto">
                            <table class="min-w-full divide-y divide-gray-200 border border-gray-300">
                                <thead class="bg-gray-50">
                                    <tr>
                                        <th class="px-4 py-2 text-left text-xs font-medium text-gray-500">Type Produit</th>
                                        <th class="px-4 py-2 text-left text-xs font-medium text-gray-500">Quantité</th>
                                        <th class="px-4 py-2 text-left text-xs font-medium text-gray-500">Prix Unitaire</th>
                                        <th class="px-4 py-2 text-left text-xs font-medium text-gray-500">Total</th>
                                        <th class="px-4 py-2 text-left text-xs font-medium text-gray-500">Action</th>
                                    </tr>
                                </thead>
                                <tbody class="divide-y divide-gray-200">
                                    @for (int i = 0; i < createLines.Count; i++)
                                    {
                                        var line = createLines[i];
                                        <tr>
                                            <td class="px-4 py-2">
                                                <input type="text" @bind="line.ProductType" class="w-full px-2 py-1 border border-gray-300 rounded text-sm" />
                                            </td>
                                            <td class="px-4 py-2">
                                                <input type="number" @bind="line.Quantity" min="1" class="w-full px-2 py-1 border border-gray-300 rounded text-sm" />
                                            </td>
                                            <td class="px-4 py-2">
                                                <input type="number" @bind="line.UnitPrice" step="0.01" min="0" class="w-full px-2 py-1 border border-gray-300 rounded text-sm" />
                                            </td>
                                            <td class="px-4 py-2 text-sm font-medium">
                                                @GetLineTotal(line).ToString("C")
                                            </td>
                                            <td class="px-4 py-2">
                                                @if (createLines.Count > 1)
                                                {
                                                    <button @onclick="() => RemoveOrderLine(i)" class="px-2 py-1 bg-red-600 text-white rounded text-xs hover:bg-red-700">
                                                        Supprimer
                                                    </button>
                                                }
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>

                    <!-- Total -->
                    <div class="bg-gray-50 p-4 rounded-lg">
                        <div class="flex justify-between items-center">
                            <span class="text-lg font-bold text-gray-900">Total Commande :</span>
                            <span class="text-2xl font-bold text-blue-600">@GetOrderTotal().ToString("C")</span>
                        </div>
                    </div>
                </div>
            </div>
            <div class="bg-gray-50 border-t border-gray-200 p-6 flex justify-end gap-3">
                <button @onclick="CloseCreateModal" class="px-6 py-2 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300">Annuler</button>
                <button @onclick="CreateOrder" class="px-6 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700">Créer Commande</button>
            </div>
        </div>
    </div>
}
