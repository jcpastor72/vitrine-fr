@page "/catalog"
@using VitrineFr.Services
@inject HttpClient Http
@inject AuthService AuthService
@inject NavigationManager Navigation

<link href="css/professional.css" rel="stylesheet" />

<!-- Navigation Client -->
<nav class="lc-nav fixed w-full z-50">
    <div class="max-w-7xl mx-auto px-6 py-4">
        <div class="flex justify-between items-center">
            <div class="flex items-center space-x-3">
                <div>
                    <img src="logo-lc.png" alt="Logo LC" class="h-10 w-10" />
                </div>
                <span class="font-bold text-2xl">
                    <span class="text-cyan-400">LABOR</span>
                    <span class="text-blue-800"> CONTROL</span>
                </span>
            </div>
            <div class="flex items-center space-x-6">
                <button @onclick="GoToDashboard" class="text-sm text-gray-600 hover:text-red-600 transition font-medium">
                    ‚Üê Retour √† l'espace client
                </button>
            </div>
        </div>
    </div>
</nav>

<div class="min-h-screen bg-gray-50 pt-24 pb-12">
    <div class="max-w-7xl mx-auto px-6">
        <!-- Header -->
        <div class="text-center mb-12">
            <h1 class="text-4xl font-bold text-gray-900 mb-4">
                Catalogue Labor Control
            </h1>
            <p class="text-xl text-gray-600">
                Choisissez les produits et services adapt√©s √† vos besoins
            </p>
        </div>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="mb-6 bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded text-center" role="alert">
                <p class="font-semibold">Erreur</p>
                <p class="mt-1">@errorMessage</p>
            </div>
        }

        @if (!string.IsNullOrEmpty(successMessage))
        {
            <div class="mb-6 bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded text-center" role="alert">
                <p class="font-semibold">@successMessage</p>
            </div>
        }

        @if (isLoading)
        {
            <div class="text-center py-12">
                <p class="text-gray-600 text-lg">Chargement du catalogue...</p>
            </div>
        }
        else if (products.Count == 0)
        {
            <div class="text-center py-12">
                <p class="text-gray-600 text-lg">Aucun produit disponible pour le moment.</p>
            </div>
        }
        else
        {
            <!-- Grille de produits -->
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
                @foreach (var product in products)
                {
                    <div class="bg-white rounded-xl shadow-lg overflow-hidden hover:shadow-2xl transition-shadow duration-300 @(product.AlreadyPurchased ? "opacity-60" : "")">
                        <!-- Badge si d√©j√† achet√© -->
                        @if (product.AlreadyPurchased)
                        {
                            <div class="bg-gray-600 text-white text-center py-2 text-sm font-semibold">
                                ‚úì D√©j√† command√©
                            </div>
                        }
                        else if (product.ProductType == "pack_discovery")
                        {
                            <div class="bg-gradient-to-r from-green-500 to-green-600 text-white text-center py-2 text-sm font-semibold">
                                üéÅ OFFRE DE LANCEMENT
                            </div>
                        }

                        <!-- Contenu du produit -->
                        <div class="p-6">
                            <h3 class="text-2xl font-bold text-gray-900 mb-3">@product.Name</h3>
                            <p class="text-gray-600 mb-4 min-h-[60px]">@((MarkupString)(System.Net.WebUtility.HtmlDecode(product.Description ?? "")))</p>

                            <!-- Prix -->
                            <div class="mb-6">
                                @if (product.Price == 0 && product.ProductType != "subscription")
                                {
                                    <div class="text-3xl font-bold text-green-600">GRATUIT</div>
                                    @if (product.ShippingCost > 0)
                                    {
                                        <div class="text-sm text-gray-600 mt-1">+ @string.Format("{0:F2}", product.ShippingCost) ‚Ç¨ de livraison</div>
                                    }
                                }
                                else if (product.ProductType == "subscription")
                                {
                                    <!-- Pas de prix affich√© pour l'abonnement -->
                                }
                                else
                                {
                                    <div class="text-3xl font-bold text-indigo-600">@string.Format("{0:F2}", product.Price) ‚Ç¨ HT</div>
                                    @if (product.ShippingCost > 0)
                                    {
                                        <div class="text-sm text-gray-600 mt-1">+ @string.Format("{0:F2}", product.ShippingCost) ‚Ç¨ de livraison</div>
                                    }
                                }
                            </div>

                            <!-- Type de produit -->
                            @if (product.ProductType == "pack_discovery")
                            {
                                <div class="mb-4 space-y-2">
                                    <div class="flex items-center text-sm text-gray-700">
                                        <span class="mr-2">‚úì</span>
                                        <span>Abonnement 10 points de contr√¥le</span>
                                    </div>
                                    <div class="flex items-center text-sm text-gray-700">
                                        <span class="mr-2">‚úì</span>
                                        <span>Pack 10 puces NFC incluses</span>
                                    </div>
                                    <div class="flex items-center text-sm text-gray-700">
                                        <span class="mr-2">‚úì</span>
                                        <span>Livraison sous 48h</span>
                                    </div>
                                </div>
                            }
                            else if (product.ProductType == "nfc_chip")
                            {
                                <div class="mb-4">
                                    <div class="flex items-center text-sm text-gray-700 mb-3">
                                        <span class="mr-2">üì°</span>
                                        <span>Puces NFC NTAG213 professionnelles</span>
                                    </div>

                                    <!-- Champ de quantit√© pour les puces NFC -->
                                    @if (!product.AlreadyPurchased && product.IsAvailable)
                                    {
                                        <div class="mt-4">
                                            <label class="block text-sm font-medium text-gray-700 mb-2">Quantit√© :</label>
                                            <input type="number"
                                                   min="1"
                                                   max="100"
                                                   @bind="nfcChipQuantity"
                                                   class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
                                                   placeholder="Nombre de puces" />
                                        </div>
                                    }
                                </div>
                            }
                            else if (product.ProductType == "subscription")
                            {
                                <div class="mb-4 space-y-2">
                                    <!-- Affichage du plan actuel -->
                                    <div class="bg-blue-50 border-2 border-blue-200 rounded-lg p-3 mb-3">
                                        <div class="text-sm font-semibold text-blue-900 mb-1">üìä Votre forfait actuel :</div>
                                        <div class="text-lg font-bold text-blue-600">@currentSubscriptionTier</div>
                                        <div class="text-sm text-gray-700 mt-1">
                                            @totalChipsOrdered puces command√©es
                                        </div>
                                    </div>

                                    <div class="text-sm font-semibold text-gray-900 mb-2">Forfaits disponibles :</div>
                                    <div class="text-sm text-gray-700 @(currentSubscriptionTier == "Gratuit" ? "font-bold text-green-600" : "")">
                                        ‚Ä¢ Gratuit : jusqu'√† 10 points
                                    </div>
                                    <div class="text-sm text-gray-700 @(currentSubscriptionTier == "Starter" ? "font-bold text-green-600" : "")">
                                        ‚Ä¢ Starter : 11-25 points (49‚Ç¨/mois)
                                    </div>
                                    <div class="text-sm text-gray-700 @(currentSubscriptionTier.StartsWith("Medium") ? "font-bold text-green-600" : "")">
                                        ‚Ä¢ Medium : 26-50 points (99‚Ç¨/mois)
                                    </div>
                                    <div class="text-sm text-gray-700 @(currentSubscriptionTier.StartsWith("Corporate") ? "font-bold text-green-600" : "")">
                                        ‚Ä¢ Corporate : 50+ points (sur devis)
                                    </div>
                                </div>
                            }

                            <!-- Bouton d'action -->
                            @if (product.AlreadyPurchased)
                            {
                                <button disabled
                                        class="w-full py-3 px-4 bg-gray-400 text-white rounded-lg font-semibold cursor-not-allowed">
                                    D√©j√† command√©
                                </button>
                            }
                            else if (!product.IsAvailable)
                            {
                                <button disabled
                                        class="w-full py-3 px-4 bg-gray-400 text-white rounded-lg font-semibold cursor-not-allowed">
                                    Indisponible
                                </button>
                            }
                            else
                            {
                                @if (product.ProductType == "pack_discovery")
                                {
                                    <button @onclick="() => GoToOrderPackDiscovery()"
                                            class="w-full py-3 px-4 bg-gradient-to-r from-indigo-600 to-indigo-700 text-white rounded-lg font-semibold hover:from-indigo-700 hover:to-indigo-800 transition-all duration-300 shadow-lg hover:shadow-xl">
                                        üéØ Commander le pack d√©couverte
                                    </button>
                                }
                                else if (product.ProductType == "subscription")
                                {
                                    @if (totalChipsOrdered <= 10)
                                    {
                                        <button disabled
                                                class="w-full py-3 px-4 bg-gray-400 text-white rounded-lg font-semibold cursor-not-allowed">
                                            Forfait actif (10 points max)
                                        </button>
                                    }
                                    else if (totalChipsOrdered <= 25 || totalChipsOrdered <= 50)
                                    {
                                        <button @onclick="() => ActivateSubscription()"
                                                class="w-full py-3 px-4 bg-gradient-to-r from-purple-600 to-purple-700 text-white rounded-lg font-semibold hover:from-purple-700 hover:to-purple-800 transition-all duration-300">
                                            üöÄ Activer mon abonnement @currentSubscriptionTier
                                        </button>
                                    }
                                    else
                                    {
                                        <button @onclick="() => ContactForCorporate()"
                                                class="w-full py-3 px-4 bg-gradient-to-r from-purple-600 to-purple-700 text-white rounded-lg font-semibold hover:from-purple-700 hover:to-purple-800 transition-all duration-300">
                                            üìû Contactez-nous (Corporate)
                                        </button>
                                    }
                                }
                                else
                                {
                                    <button @onclick="() => AddToCartWithQuantity(product.Id)"
                                            disabled="@isAddingToCart"
                                            class="w-full py-3 px-4 bg-gradient-to-r from-green-600 to-green-700 text-white rounded-lg font-semibold hover:from-green-700 hover:to-green-800 transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed">
                                        @if (isAddingToCart)
                                        {
                                            <span>Ajout en cours...</span>
                                        }
                                        else
                                        {
                                            <span>üõí Ajouter au panier (@nfcChipQuantity puce@(nfcChipQuantity > 1 ? "s" : ""))</span>
                                        }
                                    </button>
                                }
                            }
                        </div>
                    </div>
                }
            </div>

            <!-- Bouton Voir mon panier (si panier non vide) -->
            @if (cartItemCount > 0)
            {
                <div class="mt-8 text-center">
                    <button @onclick="GoToCart"
                            class="inline-flex items-center px-8 py-4 bg-indigo-600 text-white rounded-xl font-bold text-lg hover:bg-indigo-700 transition-all duration-300 shadow-lg hover:shadow-xl">
                        üõí Voir mon panier (@cartItemCount article@(cartItemCount > 1 ? "s" : ""))
                    </button>
                </div>
            }
        }
    </div>
</div>

@code {
    private List<ProductListItem> products = new();
    private string errorMessage = "";
    private string successMessage = "";
    private bool isLoading = true;
    private bool isAddingToCart = false;
    private int cartItemCount = 0;
    private int nfcChipQuantity = 1;
    private int totalChipsOrdered = 0;
    private string currentSubscriptionTier = "Gratuit";

    protected override async Task OnInitializedAsync()
    {
        var isAuthenticated = await AuthService.IsAuthenticatedAsync();
        if (!isAuthenticated)
        {
            Navigation.NavigateTo("/login");
            return;
        }

        await LoadProducts();
        await LoadCartItemCount();
        await LoadTotalChipsOrdered();
    }

    private async Task LoadProducts()
    {
        try
        {
            var token = await AuthService.GetTokenAsync();
            if (string.IsNullOrEmpty(token))
            {
                Navigation.NavigateTo("/login");
                return;
            }

            Http.DefaultRequestHeaders.Authorization =
                new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            var response = await Http.GetAsync("api/products");

            if (response.IsSuccessStatusCode)
            {
                var productList = await response.Content.ReadFromJsonAsync<List<ProductListItem>>();
                products = productList ?? new List<ProductListItem>();
            }
            else
            {
                errorMessage = "Erreur lors du chargement du catalogue";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Erreur : {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadCartItemCount()
    {
        try
        {
            var token = await AuthService.GetTokenAsync();
            if (string.IsNullOrEmpty(token)) return;

            Http.DefaultRequestHeaders.Authorization =
                new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            var response = await Http.GetAsync("api/cart");

            if (response.IsSuccessStatusCode)
            {
                var cart = await response.Content.ReadFromJsonAsync<CartResponse>();
                cartItemCount = cart?.ItemCount ?? 0;
            }
        }
        catch
        {
            // Ignorer les erreurs
        }
    }

    private async Task LoadTotalChipsOrdered()
    {
        try
        {
            var token = await AuthService.GetTokenAsync();
            if (string.IsNullOrEmpty(token)) return;

            Http.DefaultRequestHeaders.Authorization =
                new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            // R√©cup√©rer toutes les commandes du client
            var response = await Http.GetAsync("api/orders");
            if (response.IsSuccessStatusCode)
            {
                var orders = await response.Content.ReadFromJsonAsync<List<OrderSummary>>();
                if (orders != null)
                {
                    // Calculer le total de puces command√©es (pack d√©couverte + puces suppl√©mentaires)
                    totalChipsOrdered = orders
                        .Where(o => o.Status != "CANCELLED")
                        .Sum(o => o.ChipsQuantity);

                    // D√©terminer le tier d'abonnement bas√© sur le nombre de puces
                    if (totalChipsOrdered <= 10)
                        currentSubscriptionTier = "Gratuit";
                    else if (totalChipsOrdered <= 25)
                        currentSubscriptionTier = "Starter (49‚Ç¨/mois)";
                    else if (totalChipsOrdered <= 50)
                        currentSubscriptionTier = "Medium (99‚Ç¨/mois)";
                    else
                        currentSubscriptionTier = "Corporate (sur devis)";
                }
            }
        }
        catch
        {
            // Ignorer les erreurs
        }
    }

    private async Task AddToCartWithQuantity(Guid productId)
    {
        if (nfcChipQuantity < 1)
        {
            errorMessage = "La quantit√© doit √™tre au moins 1";
            return;
        }

        errorMessage = "";
        successMessage = "";
        isAddingToCart = true;

        try
        {
            var token = await AuthService.GetTokenAsync();
            if (string.IsNullOrEmpty(token))
            {
                Navigation.NavigateTo("/login");
                return;
            }

            Http.DefaultRequestHeaders.Authorization =
                new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            var request = new { ProductId = productId, Quantity = nfcChipQuantity };
            var response = await Http.PostAsJsonAsync("api/cart/items", request);

            if (response.IsSuccessStatusCode)
            {
                successMessage = $"{nfcChipQuantity} puce{(nfcChipQuantity > 1 ? "s" : "")} ajout√©e{(nfcChipQuantity > 1 ? "s" : "")} au panier !";
                await LoadCartItemCount();

                // Effacer le message apr√®s 3 secondes
                await Task.Delay(3000);
                successMessage = "";
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                try
                {
                    var errorResponse = await response.Content.ReadFromJsonAsync<ErrorResponse>();
                    errorMessage = errorResponse?.Message ?? errorContent;
                }
                catch
                {
                    errorMessage = errorContent;
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Erreur : {ex.Message}";
        }
        finally
        {
            isAddingToCart = false;
        }
    }

    private void GoToOrderPackDiscovery()
    {
        Navigation.NavigateTo("/order-chips");
    }

    private void GoToCart()
    {
        Navigation.NavigateTo("/cart");
    }

    private void GoToDashboard()
    {
        Navigation.NavigateTo("/dashboard");
    }

    private void ActivateSubscription()
    {
        Navigation.NavigateTo("/subscription-plans");
    }

    private void ContactForCorporate()
    {
        Navigation.NavigateTo("mailto:contact@laborcontrol.fr");
    }

    private class ProductListItem
    {
        public Guid Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public string? Description { get; set; }
        public decimal Price { get; set; }
        public string ProductType { get; set; } = string.Empty;
        public decimal? ShippingCost { get; set; }
        public string? ImageUrl { get; set; }
        public bool IsAvailable { get; set; }
        public bool AlreadyPurchased { get; set; }
    }

    private class CartResponse
    {
        public int ItemCount { get; set; }
    }

    private class OrderSummary
    {
        public Guid Id { get; set; }
        public string Status { get; set; } = string.Empty;
        public int ChipsQuantity { get; set; }
    }

    private class ErrorResponse
    {
        public string? Message { get; set; }
    }
}
