@page "/personnel/{id:guid}"
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JS

<PageTitle>Profil utilisateur - Labor Control</PageTitle>

<div class="min-h-screen bg-gray-50 py-8">
    <div class="max-w-5xl mx-auto px-4">
        <!-- Header -->
        <div class="mb-6">
            <button @onclick="GoBack"
                    class="inline-flex items-center px-4 py-2 bg-white text-gray-700 rounded-lg font-semibold hover:bg-gray-100 transition-all duration-300 shadow-md mb-4">
                ← Retour à la gestion du personnel
            </button>
        </div>

        @if (loading)
        {
            <div class="text-center py-12">
                <div class="inline-block animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
                <p class="mt-4 text-gray-600">Chargement du profil...</p>
            </div>
        }
        else if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="bg-red-50 border-l-4 border-red-500 p-4 rounded-lg">
                <p class="text-red-700">@errorMessage</p>
            </div>
        }
        else if (user != null)
        {
            <!-- Profil Header -->
            <div class="bg-white rounded-xl shadow-lg p-8 mb-6">
                <div class="flex items-start justify-between">
                    <div class="flex items-center">
                        <div class="w-24 h-24 bg-blue-100 rounded-full flex items-center justify-center mr-6">
                            <span class="text-3xl font-bold text-blue-600">@GetInitials(user.Prenom, user.Nom)</span>
                        </div>
                        <div>
                            <h1 class="text-3xl font-bold text-gray-900">@user.Prenom @user.Nom</h1>
                            <p class="text-gray-600 mt-1">@user.Email</p>
                            <div class="flex gap-2 mt-3">
                                <span class="@GetRoleBadgeClass(user.Role)">
                                    @GetRoleLabel(user.Role)
                                </span>
                                @if (user.IsActive)
                                {
                                    <span class="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800">
                                        ✓ Actif
                                    </span>
                                }
                                else
                                {
                                    <span class="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-red-100 text-red-800">
                                        ✕ Inactif
                                    </span>
                                }
                            </div>
                        </div>
                    </div>
                    <div class="flex gap-2">
                        <button @onclick="EditUser"
                                class="px-4 py-2 bg-blue-600 text-white rounded-lg font-semibold hover:bg-blue-700 transition">
                            ✎ Modifier
                        </button>
                        <button @onclick="ToggleStatus"
                                class="px-4 py-2 @(user.IsActive ? "bg-orange-600 hover:bg-orange-700" : "bg-green-600 hover:bg-green-700") text-white rounded-lg font-semibold transition">
                            @(user.IsActive ? "Désactiver" : "Activer")
                        </button>
                    </div>
                </div>
            </div>

            <!-- Informations détaillées -->
            <div class="grid md:grid-cols-2 gap-6 mb-6">
                <!-- Informations personnelles -->
                <div class="bg-white rounded-xl shadow-lg p-6">
                    <h2 class="text-xl font-bold text-gray-900 mb-4 pb-2 border-b">Informations personnelles</h2>
                    <div class="space-y-3">
                        <div>
                            <span class="text-sm font-semibold text-gray-500">Email</span>
                            <p class="text-gray-900">@user.Email</p>
                        </div>
                        @if (!string.IsNullOrEmpty(user.Phone))
                        {
                            <div>
                                <span class="text-sm font-semibold text-gray-500">Téléphone</span>
                                <p class="text-gray-900">@user.Phone</p>
                            </div>
                        }
                        <div>
                            <span class="text-sm font-semibold text-gray-500">Rôle</span>
                            <p class="text-gray-900">@GetRoleLabel(user.Role)</p>
                        </div>
                        @if (!string.IsNullOrEmpty(user.JobTitle))
                        {
                            <div>
                                <span class="text-sm font-semibold text-gray-500">Poste</span>
                                <p class="text-gray-900">@user.JobTitle</p>
                            </div>
                        }
                    </div>
                </div>

                <!-- Affectation -->
                <div class="bg-white rounded-xl shadow-lg p-6">
                    <h2 class="text-xl font-bold text-gray-900 mb-4 pb-2 border-b">Affectation</h2>
                    @if (user.TeamId.HasValue && !string.IsNullOrEmpty(user.TeamName))
                    {
                        <div class="space-y-3">
                            <div>
                                <span class="text-sm font-semibold text-gray-500">Équipe</span>
                                <p class="text-gray-900">@user.TeamName</p>
                            </div>
                            <button @onclick="ViewTeam"
                                    class="mt-4 px-4 py-2 bg-blue-50 text-blue-600 rounded-lg font-semibold hover:bg-blue-100 transition">
                                Voir l'équipe →
                            </button>
                        </div>
                    }
                    else
                    {
                        <div class="text-center py-6">
                            <p class="text-gray-500 mb-4">Cet utilisateur n'est affecté à aucune équipe</p>
                            <button @onclick="AssignToTeam"
                                    class="px-4 py-2 bg-blue-600 text-white rounded-lg font-semibold hover:bg-blue-700 transition">
                                Affecter à une équipe
                            </button>
                        </div>
                    }
                </div>
            </div>

            <!-- Dates -->
            <div class="bg-white rounded-xl shadow-lg p-6">
                <h2 class="text-xl font-bold text-gray-900 mb-4 pb-2 border-b">Informations système</h2>
                <div class="grid md:grid-cols-3 gap-4 text-sm">
                    <div>
                        <span class="text-gray-500 font-semibold">Créé le</span>
                        <p class="text-gray-900">@user.CreatedAt.ToString("dd/MM/yyyy à HH:mm")</p>
                    </div>
                    @if (user.UpdatedAt.HasValue)
                    {
                        <div>
                            <span class="text-gray-500 font-semibold">Modifié le</span>
                            <p class="text-gray-900">@user.UpdatedAt.Value.ToString("dd/MM/yyyy à HH:mm")</p>
                        </div>
                    }
                    <div>
                        <span class="text-gray-500 font-semibold">ID</span>
                        <p class="text-gray-900 text-xs font-mono">@user.Id</p>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@code {
    [Parameter]
    public Guid Id { get; set; }

    private UserDetailDto? user;
    private bool loading = true;
    private string errorMessage = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadUser();
    }

    private async Task LoadUser()
    {
        loading = true;
        errorMessage = "";

        try
        {
            var token = await JS.InvokeAsync<string>("localStorage.getItem", "authToken");

            // Enlever les guillemets si présents (bug localStorage)
            if (!string.IsNullOrEmpty(token))
            {
                token = token.Trim('"');
            }

            if (string.IsNullOrEmpty(token))
            {
                Navigation.NavigateTo("/login");
                return;
            }

            Http.DefaultRequestHeaders.Clear();
            Http.DefaultRequestHeaders.Add("Authorization", $"Bearer {token}");

            var response = await Http.GetAsync($"api/users/{Id}");

            if (response.IsSuccessStatusCode)
            {
                user = await response.Content.ReadFromJsonAsync<UserDetailDto>();
            }
            else
            {
                errorMessage = $"Erreur {(int)response.StatusCode}: Utilisateur introuvable";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Erreur: {ex.Message}";
        }
        finally
        {
            loading = false;
        }
    }

    private async Task GoBack()
    {
        await JS.InvokeVoidAsync("history.back");
    }

    private void EditUser()
    {
        Navigation.NavigateTo($"/personnel/edit/{Id}");
    }

    private void ViewTeam()
    {
        if (user?.TeamId != null)
        {
            Navigation.NavigateTo($"/teams/{user.TeamId}");
        }
    }

    private void AssignToTeam()
    {
        // TODO: Naviguer vers une page d'affectation
        Navigation.NavigateTo("/teams");
    }

    private async Task ToggleStatus()
    {
        if (user == null) return;

        var action = user.IsActive ? "désactiver" : "activer";
        bool confirmed = await JS.InvokeAsync<bool>("confirm", $"Voulez-vous {action} {user.Prenom} {user.Nom} ?");

        if (confirmed)
        {
            try
            {
                var token = await JS.InvokeAsync<string>("localStorage.getItem", "authToken");
                if (!string.IsNullOrEmpty(token))
                {
                    token = token.Trim('"');
                }

                Http.DefaultRequestHeaders.Clear();
                Http.DefaultRequestHeaders.Add("Authorization", $"Bearer {token}");

                var response = await Http.PatchAsync($"api/users/{Id}/toggle-status", null);

                if (response.IsSuccessStatusCode)
                {
                    await LoadUser(); // Recharger le profil
                }
                else
                {
                    errorMessage = "Erreur lors de la modification du statut";
                }
            }
            catch (Exception ex)
            {
                errorMessage = $"Erreur: {ex.Message}";
            }
        }
    }

    private string GetInitials(string prenom, string nom)
    {
        var prenomInitial = string.IsNullOrEmpty(prenom) ? "" : prenom.Substring(0, 1).ToUpper();
        var nomInitial = string.IsNullOrEmpty(nom) ? "" : nom.Substring(0, 1).ToUpper();
        return prenomInitial + nomInitial;
    }

    private string GetRoleLabel(string role)
    {
        return role switch
        {
            "Admin" => "Administrateur",
            "Manager" => "Manager",
            "Supervisor" => "Superviseur",
            "Technician" => "Technicien",
            _ => role
        };
    }

    private string GetRoleBadgeClass(string role)
    {
        var baseClass = "inline-flex items-center px-3 py-1 rounded-full text-xs font-medium";
        return role switch
        {
            "Admin" => $"{baseClass} bg-red-100 text-red-800",
            "Manager" => $"{baseClass} bg-purple-100 text-purple-800",
            "Supervisor" => $"{baseClass} bg-orange-100 text-orange-800",
            "Technician" => $"{baseClass} bg-blue-100 text-blue-800",
            _ => $"{baseClass} bg-gray-100 text-gray-800"
        };
    }

    private class UserDetailDto
    {
        public Guid Id { get; set; }
        public string Email { get; set; } = "";
        public string Prenom { get; set; } = "";
        public string Nom { get; set; } = "";
        public string? Phone { get; set; }
        public string Role { get; set; } = "";
        public string? JobTitle { get; set; }
        public bool IsActive { get; set; }
        public Guid? TeamId { get; set; }
        public string? TeamName { get; set; }
        public DateTime CreatedAt { get; set; }
        public DateTime? UpdatedAt { get; set; }
    }
}
