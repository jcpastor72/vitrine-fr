@page "/admin-lc/clients/{ClientId:guid}/edit"
@page "/admin-lc/clients/new"
@layout AdminLayout
@using LaborControl.Web.Models
@using LaborControl.Web.Services
@inject NavigationManager Navigation
@inject ApiService ApiService

<div class="space-y-6">
    <!-- Header with Back Button -->
    <div class="flex items-center justify-between">
        <button @onclick="GoBack" class="px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700 transition font-medium">
            ‚Üê Retour
        </button>
        <h1 class="text-3xl font-bold text-gray-900">@(IsNewClient ? "Cr√©er un client" : "Modifier le client")</h1>
        <div></div>
    </div>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="bg-red-50 rounded-lg shadow p-4 border-l-4 border-red-600">
            <p class="text-red-800 font-medium">‚ö†Ô∏è Erreur</p>
            <p class="text-red-700 text-sm mt-1">@errorMessage</p>
        </div>
    }

    @if (!IsNewClient && client == null)
    {
        if (isLoading)
        {
            <div class="bg-white rounded-lg shadow p-8 text-center">
                <div class="inline-block">
                    <div class="w-12 h-12 border-4 border-blue-200 border-t-blue-600 rounded-full animate-spin"></div>
                </div>
                <p class="text-gray-600 mt-4 font-medium">Chargement du client...</p>
            </div>
        }
        else
        {
            <div class="bg-white rounded-lg shadow p-8 text-center">
                <p class="text-gray-600 font-medium">Client non trouv√©</p>
            </div>
        }
    }
    else
    {
        <!-- Form -->
        <div class="bg-white rounded-lg shadow p-6">
            <div class="space-y-6">
                <!-- Nom -->
                <div>
                    <label class="block text-sm font-semibold text-gray-700 mb-2">
                        Nom du client <span class="text-red-600">*</span>
                    </label>
                    <input type="text"
                        @bind="clientForm.Name"
                        class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                        placeholder="Exemple: Entreprise ABC" />
                </div>

                <!-- Plan d'abonnement -->
                <div>
                    <label class="block text-sm font-semibold text-gray-700 mb-2">
                        Plan d'abonnement <span class="text-red-600">*</span>
                    </label>
                    <select @bind="clientForm.SubscriptionPlan"
                        class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500">
                        <option value="">-- S√©lectionnez un plan --</option>
                        <option value="Starter">Starter</option>
                        <option value="Professional">Professional</option>
                        <option value="Enterprise">Enterprise</option>
                    </select>
                </div>

                <!-- Statut (lecture seule pour √©dition) -->
                @if (!IsNewClient && client != null)
                {
                    <div>
                        <label class="block text-sm font-semibold text-gray-700 mb-2">Statut</label>
                        <div class="p-3 bg-gray-50 rounded-lg">
                            @if (client.IsArchived)
                            {
                                <span class="inline-flex px-3 py-1 rounded-full text-sm font-semibold bg-gray-100 text-gray-800">
                                    üì¶ Archiv√©
                                </span>
                            }
                            else
                            {
                                <span class="inline-flex px-3 py-1 rounded-full text-sm font-semibold bg-green-100 text-green-800">
                                    ‚úì Actif
                                </span>
                            }
                        </div>
                    </div>

                    <div>
                        <label class="block text-sm font-semibold text-gray-700 mb-2">Date de cr√©ation</label>
                        <div class="p-3 bg-gray-50 rounded-lg text-gray-600">
                            @client.CreatedAt.ToString("dd/MM/yyyy √† HH:mm")
                        </div>
                    </div>
                }
            </div>

            <!-- Buttons -->
            <div class="flex justify-end gap-3 mt-8 pt-6 border-t border-gray-200">
                <button @onclick="GoBack" class="px-6 py-2 bg-gray-300 text-gray-800 rounded-lg hover:bg-gray-400 transition font-medium">
                    Annuler
                </button>
                <button @onclick="SaveClient"
                    disabled="@(!IsFormValid || isSubmitting)"
                    class="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition font-medium disabled:opacity-50 disabled:cursor-not-allowed">
                    @if (isSubmitting)
                    {
                        <span>Enregistrement...</span>
                    }
                    else
                    {
                        <span>@(IsNewClient ? "Cr√©er le client" : "Enregistrer les modifications")</span>
                    }
                </button>
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public Guid? ClientId { get; set; }

    private Client? client;
    private ClientFormModel clientForm = new();
    private bool isLoading = true;
    private bool isSubmitting = false;
    private string errorMessage = string.Empty;
    private bool IsNewClient => ClientId == null || ClientId == Guid.Empty;

    private bool IsFormValid =>
        !string.IsNullOrWhiteSpace(clientForm.Name) &&
        !string.IsNullOrWhiteSpace(clientForm.SubscriptionPlan);

    protected override async Task OnInitializedAsync()
    {
        if (IsNewClient)
        {
            // Nouvelle cr√©ation - initialiser le formulaire
            clientForm = new ClientFormModel { Name = "", SubscriptionPlan = "" };
            isLoading = false;
        }
        else
        {
            // √âdition - charger le client
            await LoadClient();
        }
    }

    private async Task LoadClient()
    {
        try
        {
            isLoading = true;
            errorMessage = string.Empty;

            if (ClientId.HasValue)
            {
                client = await ApiService.GetClientAsync(ClientId.Value);

                if (client == null)
                {
                    errorMessage = "Client non trouv√©";
                }
                else
                {
                    // Remplir le formulaire avec les donn√©es du client
                    clientForm = new ClientFormModel
                    {
                        Name = client.Name,
                        SubscriptionPlan = client.SubscriptionPlan
                    };
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Erreur de chargement: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private void GoBack()
    {
        if (IsNewClient)
        {
            Navigation.NavigateTo("/admin-lc/clients");
        }
        else
        {
            Navigation.NavigateTo($"/admin-lc/clients/{ClientId}");
        }
    }

    private async Task SaveClient()
    {
        if (!IsFormValid)
        {
            return;
        }

        try
        {
            isSubmitting = true;
            errorMessage = string.Empty;

            if (IsNewClient)
            {
                // Cr√©er un nouveau client
                var newClient = new Client
                {
                    Id = Guid.NewGuid(),
                    Name = clientForm.Name,
                    SubscriptionPlan = clientForm.SubscriptionPlan,
                    CreatedAt = DateTime.Now,
                    IsArchived = false
                };

                var success = await ApiService.CreateClientAsync(newClient);

                if (success)
                {
                    Navigation.NavigateTo("/admin-lc/clients");
                }
                else
                {
                    errorMessage = "Erreur lors de la cr√©ation du client";
                }
            }
            else
            {
                // Mettre √† jour le client existant
                if (client != null)
                {
                    client.Name = clientForm.Name;
                    client.SubscriptionPlan = clientForm.SubscriptionPlan;

                    var success = await ApiService.UpdateClientAsync(ClientId!.Value, client);

                    if (success)
                    {
                        Navigation.NavigateTo($"/admin-lc/clients/{ClientId}");
                    }
                    else
                    {
                        errorMessage = "Erreur lors de la mise √† jour du client";
                    }
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Erreur: {ex.Message}";
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private class ClientFormModel
    {
        public string Name { get; set; } = string.Empty;
        public string SubscriptionPlan { get; set; } = string.Empty;
    }
}
