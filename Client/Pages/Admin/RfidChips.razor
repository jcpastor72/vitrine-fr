@page "/admin/rfid-chips"
@using VitrineFr.Services
@using VitrineFr.Models
@using System.Net.Http.Headers
@inject HttpClient Http
@inject AuthService AuthService
@inject IJSRuntime JS

<div class="min-h-screen bg-gray-50 py-8 px-4">
    <div class="max-w-7xl mx-auto">
        <!-- Header -->
        <div class="mb-8">
            <button @onclick="NavigateToDashboard"
                    class="lc-btn lc-btn-secondary inline-flex items-center mb-4">
                <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
                </svg>
                Retour
            </button>

            <div class="flex justify-between items-center flex-wrap gap-4">
                <div>
                    <h1 class="lc-heading-1">Gestion des Puces RFID</h1>
                    <p class="lc-text-muted mt-1">Gérez vos puces NTAG 213</p>
                </div>
                <div class="flex gap-3 flex-wrap">
                    <a href="/admin/import-chips" class="lc-btn lc-btn-primary inline-flex items-center">
                        <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
                        </svg>
                        Importer Excel
                    </a>
                    <button @onclick="RefreshData" class="lc-btn lc-btn-secondary inline-flex items-center">
                        <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
                        </svg>
                        Actualiser
                    </button>
                </div>
            </div>
        </div>

        <!-- Filtres -->
        <div class="bg-white rounded-xl shadow-sm p-6 mb-6">
            <div class="grid md:grid-cols-4 gap-4">
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">Statut</label>
                    <select @bind="selectedStatus" @bind:after="FilterData"
                            class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                        <option value="">Tous</option>
                        <option value="IN_STOCK">En stock</option>
                        <option value="IN_TRANSIT">En transit</option>
                        <option value="ACTIVE">Actif</option>
                        <option value="INACTIVE">Inactif</option>
                    </select>
                </div>

                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">Recherche UID</label>
                    <input type="text" @bind="searchUid" @bind:after="FilterData"
                           placeholder="Rechercher par UID..."
                           class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500" />
                </div>

                <div class="flex items-end">
                    <button @onclick="ClearFilters"
                            class="w-full px-4 py-2 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300 transition">
                        Réinitialiser filtres
                    </button>
                </div>
            </div>
        </div>

        <!-- Tableau -->
        @if (isLoading)
        {
            <div class="flex justify-center items-center py-20">
                <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
            </div>
        }
        else if (filteredChips.Count == 0)
        {
            <div class="bg-white rounded-xl shadow-sm p-12 text-center">
                <div class="text-gray-400 text-5xl mb-4">📋</div>
                <p class="text-gray-600">Aucune puce trouvée</p>
            </div>
        }
        else
        {
            <div class="bg-white rounded-xl shadow-sm overflow-hidden">
                <div class="px-6 py-4 border-b border-gray-200">
                    <h2 class="text-lg font-bold text-gray-900">
                        Puces RFID (@filteredChips.Count)
                    </h2>
                </div>

                <div class="overflow-x-auto">
                    <table class="min-w-full divide-y divide-gray-200">
                        <thead class="bg-gray-50">
                            <tr>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                    ChipId
                                </th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                    UID
                                </th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                    Statut
                                </th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                    Créée le
                                </th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                    Actions
                                </th>
                            </tr>
                        </thead>
                        <tbody class="bg-white divide-y divide-gray-200">
                            @foreach (var chip in filteredChips)
                            {
                                <tr class="hover:bg-gray-50 cursor-pointer" @onclick="() => ViewChipDetails(chip.Id)">
                                    <td class="px-6 py-4 whitespace-nowrap">
                                        <span class="text-sm font-mono font-semibold text-gray-900">@chip.ChipId</span>
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap">
                                        <span class="text-sm font-mono text-gray-600">@chip.Uid</span>
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap">
                                        <span class="@GetStatusBadgeClass(chip.Status)">
                                            @GetStatusLabel(chip.Status)
                                        </span>
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap">
                                        <span class="text-sm text-gray-600">@chip.CreatedAt.ToString("dd/MM/yyyy HH:mm")</span>
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap text-sm">
                                        <button @onclick:stopPropagation @onclick="() => ViewChipDetails(chip.Id)"
                                                class="text-blue-600 hover:text-blue-900 font-medium">
                                            Détails
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        }
    </div>
</div>

<!-- Modal Détail -->
@if (showDetailModal && selectedChip != null)
{
    <div class="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50 p-4"
         @onclick="CloseDetailModal">
        <div class="bg-white rounded-xl shadow-2xl max-w-2xl w-full max-h-[90vh] overflow-y-auto"
             @onclick:stopPropagation>

            <!-- Header -->
            <div class="bg-blue-50 border-b border-blue-200 p-6">
                <div class="flex items-start justify-between">
                    <div>
                        <h3 class="text-2xl font-bold text-gray-900">Détail Puce</h3>
                        <p class="text-sm text-gray-600 mt-1">@selectedChip.ChipId</p>
                    </div>
                    <button @onclick="CloseDetailModal"
                            class="text-gray-400 hover:text-gray-600 transition">
                        <svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                        </svg>
                    </button>
                </div>
            </div>

            <!-- Body -->
            <div class="p-6">
                <div class="grid md:grid-cols-2 gap-6">
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">ChipId</label>
                        <p class="text-lg font-mono text-gray-900">@selectedChip.ChipId</p>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">UID</label>
                        <p class="text-lg font-mono text-gray-900">@selectedChip.Uid</p>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Statut</label>
                        <p class="text-lg">
                            <span class="@GetStatusBadgeClass(selectedChip.Status)">
                                @GetStatusLabel(selectedChip.Status)
                            </span>
                        </p>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Créée le</label>
                        <p class="text-lg text-gray-900">@selectedChip.CreatedAt.ToString("dd/MM/yyyy HH:mm:ss")</p>
                    </div>
                    @if (!string.IsNullOrEmpty(selectedChip.PackagingCode))
                    {
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Code Packaging</label>
                            <p class="text-lg font-mono text-gray-900">@selectedChip.PackagingCode</p>
                        </div>
                    }
                </div>
            </div>

            <!-- Footer -->
            <div class="bg-gray-50 border-t border-gray-200 p-6 flex justify-between">
                <div class="flex space-x-3">
                    @if (selectedChip.Status == "ACTIVE")
                    {
                        <button @onclick="() => DeactivateChip(selectedChip.Id)"
                                class="px-6 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition">
                            Désactiver
                        </button>
                    }
                </div>
                <div class="flex space-x-3">
                    <button @onclick="CloseDetailModal"
                            class="px-6 py-2 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300 transition">
                        Fermer
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<RfidChipResponse> allChips = new();
    private List<RfidChipResponse> filteredChips = new();
    private bool isLoading = true;
    private string selectedStatus = "";
    private string searchUid = "";

    private bool showDetailModal = false;
    private RfidChipResponse? selectedChip = null;

    protected override async Task OnInitializedAsync()
    {
        await LoadChips();
    }

    private async Task LoadChips()
    {
        isLoading = true;
        try
        {
            var token = await AuthService.GetTokenAsync();
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

            var response = await Http.GetAsync("api/rfidchips");
            if (response.IsSuccessStatusCode)
            {
                allChips = await response.Content.ReadFromJsonAsync<List<RfidChipResponse>>() ?? new();
                filteredChips = new List<RfidChipResponse>(allChips);
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Erreur: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private void FilterData()
    {
        filteredChips = allChips.Where(c =>
        {
            if (!string.IsNullOrEmpty(selectedStatus) && c.Status != selectedStatus)
                return false;
            if (!string.IsNullOrEmpty(searchUid) && !c.Uid.Contains(searchUid, StringComparison.OrdinalIgnoreCase))
                return false;
            return true;
        }).ToList();
    }

    private void ClearFilters()
    {
        selectedStatus = "";
        searchUid = "";
        FilterData();
    }

    private void ViewChipDetails(Guid chipId)
    {
        selectedChip = allChips.FirstOrDefault(c => c.Id == chipId);
        if (selectedChip != null)
        {
            showDetailModal = true;
        }
    }

    private void CloseDetailModal()
    {
        showDetailModal = false;
        selectedChip = null;
    }

    private async Task DeactivateChip(Guid chipId)
    {
        if (!await JS.InvokeAsync<bool>("confirm", "Êtes-vous sûr de vouloir désactiver cette puce?"))
            return;

        try
        {
            var token = await AuthService.GetTokenAsync();
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

            var response = await Http.DeleteAsync($"api/rfidchips/{chipId}");
            if (response.IsSuccessStatusCode)
            {
                await JS.InvokeVoidAsync("showNotification", "✅ Puce désactivée");
                CloseDetailModal();
                await LoadChips();
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Erreur: {ex.Message}");
        }
    }

    private async Task RefreshData()
    {
        await LoadChips();
        await JS.InvokeVoidAsync("showNotification", "✅ Données actualisées");
    }

    private void NavigateToDashboard()
    {
        // Navigation via JS
    }

    private string GetStatusBadgeClass(string status) => status switch
    {
        "IN_STOCK" => "inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-yellow-50 text-yellow-800 border border-yellow-200",
        "IN_TRANSIT" => "inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-blue-50 text-blue-800 border border-blue-200",
        "ACTIVE" => "inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-green-50 text-green-800 border border-green-200",
        "INACTIVE" => "inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-gray-50 text-gray-800 border border-gray-200",
        _ => "inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-gray-50 text-gray-800 border border-gray-200"
    };

    private string GetStatusLabel(string status) => status switch
    {
        "IN_STOCK" => "📦 En stock",
        "IN_TRANSIT" => "🚚 En transit",
        "ACTIVE" => "✅ Actif",
        "INACTIVE" => "❌ Inactif",
        _ => status
    };

}
