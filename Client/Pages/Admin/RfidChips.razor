@page "/admin-lc/rfid-chips"
@using VitrineFr.Services
@using VitrineFr.Models
@using System.Net.Http.Headers
@using System.Security.Cryptography
@using System.Text
@inject HttpClient Http
@inject AuthService AuthService
@inject NavigationManager Navigation
@inject IJSRuntime JS

<div class="min-h-screen bg-gray-50 py-8 px-4">
    <div class="max-w-7xl mx-auto">
        <!-- Header -->
        <div class="mb-8">
            <button @onclick="NavigateToDashboard"
                    class="lc-btn lc-btn-secondary inline-flex items-center mb-4">
                <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
                </svg>
                Retour
            </button>

            <div class="flex justify-between items-center flex-wrap gap-4">
                <div>
                    <h1 class="lc-heading-1">Gestion RFID</h1>
                </div>
                <div class="flex gap-3 flex-wrap">
                    <button @onclick="OpenAddManualModal" class="lc-btn lc-btn-primary inline-flex items-center">
                        <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
                        </svg>
                        Ajouter puce manuellement
                    </button>
                    <a href="/admin-lc/import-chips" class="lc-btn lc-btn-primary inline-flex items-center">
                        <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
                        </svg>
                        Importer Excel
                    </a>
                    <button @onclick="RefreshData" class="lc-btn lc-btn-secondary inline-flex items-center">
                        <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
                        </svg>
                        Actualiser
                    </button>
                </div>
            </div>
        </div>

        <!-- Section Puces √† configurer (sans statut) -->
        @if (!isLoading && unconfiguredChips.Count > 0)
        {
            <div class="bg-white rounded-xl shadow-sm p-6 mb-6 border-l-4 border-red-500">
                <div class="flex items-center justify-between mb-4">
                    <h2 class="text-xl font-bold text-gray-900">
                        ‚ö†Ô∏è Puces √† configurer
                        <span class="ml-2 inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-red-100 text-red-800">
                            @unconfiguredChips.Count
                        </span>
                    </h2>
                    <p class="text-sm text-gray-600">Ces puces n'ont pas de statut d√©fini - Configuration temporaire</p>
                </div>

                <div class="space-y-3">
                    @foreach (var chip in unconfiguredChips)
                    {
                        <div class="flex items-center justify-between p-4 bg-red-50 rounded-lg border border-red-200">
                            <div class="flex-1">
                                <div class="font-mono text-sm font-semibold text-gray-900">@chip.Uid</div>
                                <div class="text-xs text-gray-600 mt-1">
                                    ChipId: @chip.ChipId
                                </div>
                            </div>
                            <button @onclick="() => MoveToWorkshop(chip.Id)"
                                    class="ml-4 px-4 py-2 bg-amber-600 text-white rounded-lg hover:bg-amber-700 transition font-medium inline-flex items-center">
                                <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path>
                                </svg>
                                Mettre en atelier
                            </button>
                        </div>
                    }
                </div>
            </div>
        }

        <!-- Section Puces en atelier -->
        @if (!isLoading && workshopChips.Count > 0)
        {
            <div class="bg-white rounded-xl shadow-sm p-6 mb-6 border-l-4 border-amber-500">
                <div class="flex items-center justify-between mb-4">
                    <h2 class="text-xl font-bold text-gray-900">
                        üîß Puces en atelier
                        <span class="ml-2 inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-amber-100 text-amber-800">
                            @workshopChips.Count
                        </span>
                    </h2>
                </div>

                <div class="space-y-3">
                    @foreach (var chip in workshopChips)
                    {
                        <div class="flex items-center justify-between p-4 bg-amber-50 rounded-lg border border-amber-200">
                            <div class="flex-1">
                                <div class="font-mono text-sm font-semibold text-gray-900">@chip.Uid</div>
                                <div class="text-xs text-gray-600 mt-1">
                                    Ajout√©e le @chip.CreatedAt.ToString("dd/MM/yyyy HH:mm")
                                </div>
                            </div>
                            <button @onclick="() => OpenCreateKeyModal(chip.Id)"
                                    class="ml-4 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition font-medium inline-flex items-center">
                                <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z"></path>
                                </svg>
                                üîê Cr√©er la clef
                            </button>
                        </div>
                    }
                </div>
            </div>
        }

        <!-- Filtres -->
        <div class="bg-white rounded-xl shadow-sm p-6 mb-6">
            <div class="grid md:grid-cols-4 gap-4">
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">Statut</label>
                    <select @bind="selectedStatus" @bind:after="FilterData"
                            class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                        <option value="">Tous</option>
                        <option value="IN_TRANSIT_SUPPLIER">üìÆ En transit (fournisseur)</option>
                        <option value="IN_WORKSHOP">üîß En atelier</option>
                        <option value="IN_STOCK">üì¶ En stock</option>
                        <option value="IN_DELIVERY">üöö En livraison</option>
                        <option value="DELIVERED_PENDING">üì¨ Livr√©e (en attente)</option>
                        <option value="DELIVERED">‚úÖ R√©ceptionn√©e</option>
                        <option value="ASSIGNED">üìç Affect√©e</option>
                        <option value="ACTIVE">üü¢ Active</option>
                        <option value="INACTIVE">‚ö´ Inactive</option>
                        <option value="SAV_RETURN">üîÑ Retour SAV</option>
                        <option value="SAV_REPAIR">üî® En r√©paration</option>
                        <option value="SAV_REPLACEMENT">üÜï Remplac√©e</option>
                    </select>
                </div>

                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">Recherche UID</label>
                    <input type="text" @bind="searchUid" @bind:after="FilterData"
                           placeholder="Rechercher par UID..."
                           class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500" />
                </div>

                <div class="flex items-end">
                    <button @onclick="ClearFilters"
                            class="w-full px-4 py-2 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300 transition">
                        R√©initialiser filtres
                    </button>
                </div>
            </div>
        </div>

        <!-- Tableau -->
        @if (isLoading)
        {
            <div class="flex justify-center items-center py-20">
                <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
            </div>
        }
        else if (filteredChips.Count == 0)
        {
            <div class="bg-white rounded-xl shadow-sm p-12 text-center">
                <div class="text-gray-400 text-5xl mb-4">üìã</div>
                <p class="text-gray-600">Aucune puce trouv√©e</p>
            </div>
        }
        else
        {
            <div class="bg-white rounded-xl shadow-sm overflow-hidden">
                <div class="px-6 py-4 border-b border-gray-200">
                    <h2 class="text-lg font-bold text-gray-900">
                        Puces RFID (@filteredChips.Count)
                    </h2>
                </div>

                <div class="overflow-x-auto">
                    <table class="min-w-full divide-y divide-gray-200">
                        <thead class="bg-gray-50">
                            <tr>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">ChipId</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">UID</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Statut</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Clef</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Cr√©√©e le</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                            </tr>
                        </thead>
                        <tbody class="bg-white divide-y divide-gray-200">
                            @foreach (var chip in filteredChips)
                            {
                                <tr class="hover:bg-gray-50 cursor-pointer" @onclick="() => ViewChipDetails(chip.Id)">
                                    <td class="px-6 py-4 whitespace-nowrap">
                                        <span class="text-sm font-mono font-semibold text-gray-900">@chip.ChipId</span>
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap">
                                        <span class="text-sm font-mono text-gray-600">@chip.Uid</span>
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap">
                                        <span class="@GetStatusBadgeClass(chip.Status)">
                                            @GetStatusLabel(chip.Status)
                                        </span>
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap">
                                        @if (chip.IsKeyProgrammed)
                                        {
                                            <span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-green-50 text-green-800 border border-green-200">
                                                ‚úÖ Programm√©e
                                            </span>
                                        }
                                        else if (!string.IsNullOrEmpty(chip.EncryptionKey))
                                        {
                                            <span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-yellow-50 text-yellow-800 border border-yellow-200">
                                                ‚è≥ En attente
                                            </span>
                                        }
                                        else
                                        {
                                            <span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-gray-50 text-gray-800 border border-gray-200">
                                                ‚ùå Aucune
                                            </span>
                                        }
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap">
                                        <span class="text-sm text-gray-600">@chip.CreatedAt.ToString("dd/MM/yyyy HH:mm")</span>
                                    </td>
                                    <td class="px-6 py-4 whitespace-nowrap text-sm">
                                        <button @onclick:stopPropagation @onclick="() => ViewChipDetails(chip.Id)"
                                                class="text-blue-600 hover:text-blue-900 font-medium">
                                            D√©tails
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        }
    </div>
</div>

<!-- Modal Ajout manuel -->
@if (showAddManualModal)
{
    <div class="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50 p-4" @onclick="CloseAddManualModal">
        <div class="bg-white rounded-xl shadow-2xl max-w-md w-full" @onclick:stopPropagation>
            <div class="bg-blue-50 border-b border-blue-200 p-6">
                <h3 class="text-2xl font-bold text-gray-900">Ajouter une puce manuellement</h3>
            </div>
            <div class="p-6">
                @if (!string.IsNullOrEmpty(addManualError))
                {
                    <div class="mb-4 p-3 bg-red-50 border border-red-200 rounded-lg text-red-700 text-sm">
                        @addManualError
                    </div>
                }
                <div class="mb-4">
                    <label class="block text-sm font-medium text-gray-700 mb-2">UID de la puce (depuis NFCTools)</label>
                    <input type="text" @bind="manualUid" placeholder="Ex: 04:AB:CD:12:34:56:78"
                           class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 font-mono"
                           @onkeyup="HandleManualUidKeyUp" />
                    <p class="text-xs text-gray-500 mt-1">Format: 14 ou 20 caract√®res hexad√©cimaux (7 ou 10 bytes)</p>
                </div>
            </div>
            <div class="bg-gray-50 border-t border-gray-200 p-6 flex justify-between">
                <button @onclick="CloseAddManualModal" class="px-6 py-2 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300 transition">
                    Annuler
                </button>
                <button @onclick="AddManualChip" disabled="@isAddingManual" class="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition disabled:opacity-50">
                    @if (isAddingManual) { <span>Ajout en cours...</span> } else { <span>Ajouter</span> }
                </button>
            </div>
        </div>
    </div>
}

<!-- Modal Cr√©er la clef -->
@if (showCreateKeyModal && selectedChipForKey != null)
{
    <div class="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50 p-4" @onclick="CloseCreateKeyModal">
        <div class="bg-white rounded-xl shadow-2xl max-w-2xl w-full max-h-[90vh] overflow-y-auto" @onclick:stopPropagation>
            <div class="bg-blue-50 border-b border-blue-200 p-6">
                <h3 class="text-2xl font-bold text-gray-900">üîê Cr√©ation de la clef de codage</h3>
                <p class="text-sm text-gray-600 mt-1">√âtape @keyCreationStep/3</p>
            </div>
            <div class="p-6">
                @if (keyCreationStep == 1)
                {
                    <div class="space-y-4">
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">UID de la puce</label>
                            <div class="p-3 bg-gray-50 rounded-lg font-mono text-sm text-gray-900">@selectedChipForKey.Uid</div>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">ChipId g√©n√©r√©</label>
                            <div class="p-3 bg-gray-50 rounded-lg font-mono text-sm text-gray-900">@generatedChipId</div>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Clef de codage (32 bytes)</label>
                            <div class="p-3 bg-gray-50 rounded-lg font-mono text-xs text-gray-900 break-all">@generatedEncryptionKey</div>
                            <button @onclick="CopyToClipboard" class="mt-2 px-4 py-2 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300 transition text-sm">
                                üìã Copier la clef
                            </button>
                        </div>
                    </div>
                }
                else if (keyCreationStep == 2)
                {
                    <div class="space-y-4">
                        <div class="bg-blue-50 border border-blue-200 rounded-lg p-4">
                            <h4 class="font-bold text-blue-900 mb-3">üìñ Instructions de programmation NFC</h4>
                            <ol class="space-y-2 text-sm text-blue-900">
                                <li><strong>1.</strong> Ouvrir NFCTools Pro sur votre t√©l√©phone</li>
                                <li><strong>2.</strong> Approcher la puce NFC du t√©l√©phone</li>
                                <li><strong>3.</strong> S√©lectionner "Write" ‚Üí "Hex"</li>
                                <li><strong>4.</strong> √âcrire la clef dans la page 44 (adresse 0xB0)</li>
                                <li><strong>5.</strong> Activer le mot de passe PWD (page 43)</li>
                                <li><strong>6.</strong> Verrouiller les pages 4-39 (PACK)</li>
                                <li><strong>7.</strong> Sauvegarder et fermer</li>
                            </ol>
                        </div>
                        <div class="bg-amber-50 border border-amber-200 rounded-lg p-4">
                            <p class="text-sm text-amber-900">
                                ‚ö†Ô∏è <strong>Important :</strong> Une fois programm√©e, la puce ne pourra pas √™tre dupliqu√©e. Assurez-vous que la programmation est correcte avant de valider.
                            </p>
                        </div>
                    </div>
                }
                else if (keyCreationStep == 3)
                {
                    <div class="space-y-4">
                        <div class="bg-green-50 border border-green-200 rounded-lg p-4">
                            <h4 class="font-bold text-green-900 mb-3">‚úÖ Validation de la programmation</h4>
                            <p class="text-sm text-green-900 mb-4">La puce a-t-elle √©t√© programm√©e avec succ√®s ?</p>
                            <label class="flex items-center p-3 border-2 border-green-200 rounded-lg cursor-pointer hover:bg-green-100 transition">
                                <input type="checkbox" @bind="isProgrammationConfirmed" class="w-5 h-5 text-green-600" />
                                <span class="ml-3 text-sm font-medium text-green-900">
                                    Oui, la clef a √©t√© √©crite avec succ√®s sur la puce
                                </span>
                            </label>
                        </div>
                        @if (isProgrammationConfirmed)
                        {
                            <div class="bg-blue-50 border border-blue-200 rounded-lg p-4">
                                <p class="text-sm text-blue-900">
                                    ‚ú® La puce sera automatiquement mise en stock apr√®s validation.
                                </p>
                            </div>
                        }
                    </div>
                }
            </div>
            <div class="bg-gray-50 border-t border-gray-200 p-6 flex justify-between">
                <button @onclick="PreviousKeyStep" disabled="@(keyCreationStep == 1)" class="px-6 py-2 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300 transition disabled:opacity-50">
                    ‚Üê Pr√©c√©dent
                </button>
                <div class="flex gap-3">
                    <button @onclick="CloseCreateKeyModal" class="px-6 py-2 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300 transition">
                        Annuler
                    </button>
                    @if (keyCreationStep < 3)
                    {
                        <button @onclick="NextKeyStep" class="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition">
                            Suivant ‚Üí
                        </button>
                    }
                    else
                    {
                        <button @onclick="ValidateKeyCreation" disabled="@(!isProgrammationConfirmed || isValidatingKey)" class="px-6 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition disabled:opacity-50">
                            @if (isValidatingKey) { <span>Validation en cours...</span> } else { <span>‚úÖ Valider et mettre en stock</span> }
                        </button>
                    }
                </div>
            </div>
        </div>
    </div>
}

<!-- Modal D√©tail -->
@if (showDetailModal && selectedChip != null)
{
    <div class="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50 p-4" @onclick="CloseDetailModal">
        <div class="bg-white rounded-xl shadow-2xl max-w-2xl w-full max-h-[90vh] overflow-y-auto" @onclick:stopPropagation>
            <div class="bg-blue-50 border-b border-blue-200 p-6">
                <div class="flex items-start justify-between">
                    <div>
                        <h3 class="text-2xl font-bold text-gray-900">D√©tail Puce</h3>
                        <p class="text-sm text-gray-600 mt-1">@selectedChip.ChipId</p>
                    </div>
                    <button @onclick="CloseDetailModal" class="text-gray-400 hover:text-gray-600 transition">
                        <svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                        </svg>
                    </button>
                </div>
            </div>
            <div class="p-6">
                <div class="grid md:grid-cols-2 gap-6">
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">ChipId</label>
                        <p class="text-lg font-mono text-gray-900">@selectedChip.ChipId</p>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">UID</label>
                        <p class="text-lg font-mono text-gray-900">@selectedChip.Uid</p>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Statut</label>
                        <p class="text-lg">
                            <span class="@GetStatusBadgeClass(selectedChip.Status)">
                                @GetStatusLabel(selectedChip.Status)
                            </span>
                        </p>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Cr√©√©e le</label>
                        <p class="text-lg text-gray-900">@selectedChip.CreatedAt.ToString("dd/MM/yyyy HH:mm:ss")</p>
                    </div>
                    @if (!string.IsNullOrEmpty(selectedChip.EncryptionKey))
                    {
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Clef cr√©√©e le</label>
                            <p class="text-lg text-gray-900">@selectedChip.KeyCreatedAt?.ToString("dd/MM/yyyy HH:mm:ss")</p>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">√âtat programmation</label>
                            <p class="text-lg">
                                @if (selectedChip.IsKeyProgrammed)
                                {
                                    <span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-green-50 text-green-800 border border-green-200">
                                        ‚úÖ Programm√©e
                                    </span>
                                }
                                else
                                {
                                    <span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-yellow-50 text-yellow-800 border border-yellow-200">
                                        ‚è≥ En attente
                                    </span>
                                }
                            </p>
                        </div>
                    }
                </div>
            </div>
            <div class="bg-gray-50 border-t border-gray-200 p-6 flex justify-between">
                <div class="flex space-x-3">
                    @if (selectedChip.Status == "ACTIVE")
                    {
                        <button @onclick="() => DeactivateChip(selectedChip.Id)" class="px-6 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition">
                            D√©sactiver
                        </button>
                    }
                </div>
                <div class="flex space-x-3">
                    <button @onclick="CloseDetailModal" class="px-6 py-2 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300 transition">
                        Fermer
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<RfidChipResponse> allChips = new();
    private List<RfidChipResponse> filteredChips = new();
    private List<RfidChipResponse> workshopChips = new();
    private List<RfidChipResponse> unconfiguredChips = new();
    private bool isLoading = true;
    private string selectedStatus = "";
    private string searchUid = "";

    private bool showDetailModal = false;
    private RfidChipResponse? selectedChip = null;

    private bool showAddManualModal = false;
    private string manualUid = "";
    private string addManualError = "";
    private bool isAddingManual = false;

    private bool showCreateKeyModal = false;
    private RfidChipResponse? selectedChipForKey = null;
    private int keyCreationStep = 1;
    private string generatedChipId = "";
    private string generatedEncryptionKey = "";
    private bool isProgrammationConfirmed = false;
    private bool isValidatingKey = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadChips();
    }

    private async Task LoadChips()
    {
        isLoading = true;
        try
        {
            var token = await AuthService.GetTokenAsync();
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

            var response = await Http.GetAsync("api/rfidchips");
            if (response.IsSuccessStatusCode)
            {
                allChips = await response.Content.ReadFromJsonAsync<List<RfidChipResponse>>() ?? new();
                FilterData();
                UpdateWorkshopChips();
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Erreur: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private void UpdateWorkshopChips()
    {
        workshopChips = allChips.Where(c => c.Status == "IN_WORKSHOP").ToList();
        unconfiguredChips = allChips.Where(c =>
            string.IsNullOrWhiteSpace(c.Status) ||
            c.Status == "UNDEFINED" ||
            c.Status == "NULL"
        ).ToList();
    }

    private void FilterData()
    {
        filteredChips = allChips.Where(c =>
        {
            if (!string.IsNullOrEmpty(selectedStatus) && c.Status != selectedStatus)
                return false;
            if (!string.IsNullOrEmpty(searchUid) && !c.Uid.Contains(searchUid, StringComparison.OrdinalIgnoreCase))
                return false;
            return true;
        }).ToList();
    }

    private async Task MoveToWorkshop(Guid chipId)
    {
        try
        {
            var token = await AuthService.GetTokenAsync();
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

            var request = new { status = "IN_WORKSHOP" };
            var response = await Http.PutAsJsonAsync($"api/rfidchips/{chipId}/status", request);

            if (response.IsSuccessStatusCode)
            {
                await JS.InvokeVoidAsync("showNotification", "‚úÖ Puce mise en atelier");
                await LoadChips();
            }
            else
            {
                await JS.InvokeVoidAsync("alert", "Erreur lors de la mise √† jour du statut");
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Erreur: {ex.Message}");
        }
    }

    private void ClearFilters()
    {
        selectedStatus = "";
        searchUid = "";
        FilterData();
    }

    private void ViewChipDetails(Guid chipId)
    {
        selectedChip = allChips.FirstOrDefault(c => c.Id == chipId);
        if (selectedChip != null)
        {
            showDetailModal = true;
        }
    }

    private void CloseDetailModal()
    {
        showDetailModal = false;
        selectedChip = null;
    }

    private void OpenAddManualModal()
    {
        showAddManualModal = true;
        manualUid = "";
        addManualError = "";
    }

    private void CloseAddManualModal()
    {
        showAddManualModal = false;
        manualUid = "";
        addManualError = "";
    }

    private async Task AddManualChip()
    {
        addManualError = "";
        if (string.IsNullOrWhiteSpace(manualUid))
        {
            addManualError = "Veuillez entrer un UID";
            return;
        }

        // Valider format UID (14 ou 20 caract√®res hex)
        var cleanUid = manualUid.Replace(":", "").Replace(" ", "");
        if ((cleanUid.Length != 14 && cleanUid.Length != 20) || !cleanUid.All(c => "0123456789ABCDEFabcdef".Contains(c)))
        {
            addManualError = "Format UID invalide. Utilisez 14 ou 20 caract√®res hexad√©cimaux (ex: 04ABCD1234567 ou 04ABCD123456789ABC)";
            return;
        }

        isAddingManual = true;
        try
        {
            var token = await AuthService.GetTokenAsync();
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

            var request = new { uid = manualUid };
            var response = await Http.PostAsJsonAsync("api/rfidchips/manual", request);

            if (response.IsSuccessStatusCode)
            {
                await JS.InvokeVoidAsync("showNotification", "‚úÖ Puce ajout√©e en atelier");
                CloseAddManualModal();
                await LoadChips();
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                addManualError = errorContent.Contains("existe") ? "Cette puce existe d√©j√†" : "Erreur lors de l'ajout";
            }
        }
        catch (Exception ex)
        {
            addManualError = $"Erreur: {ex.Message}";
        }
        finally
        {
            isAddingManual = false;
        }
    }

    private void OpenCreateKeyModal(Guid chipId)
    {
        selectedChipForKey = allChips.FirstOrDefault(c => c.Id == chipId);
        if (selectedChipForKey != null)
        {
            showCreateKeyModal = true;
            keyCreationStep = 1;
            GenerateKey();
        }
    }

    private void CloseCreateKeyModal()
    {
        showCreateKeyModal = false;
        selectedChipForKey = null;
        keyCreationStep = 1;
        isProgrammationConfirmed = false;
        generatedChipId = "";
        generatedEncryptionKey = "";
    }

    private void GenerateKey()
    {
        // G√©n√©rer ChipId
        generatedChipId = $"LC-{Guid.NewGuid().ToString().Substring(0, 6).ToUpper()}";

        // G√©n√©rer clef 32 bytes (64 caract√®res hex)
        using (var rng = new RNGCryptoServiceProvider())
        {
            byte[] keyBytes = new byte[32];
            rng.GetBytes(keyBytes);
            generatedEncryptionKey = BitConverter.ToString(keyBytes).Replace("-", "");
        }
    }

    private async Task CopyToClipboard()
    {
        await JS.InvokeVoidAsync("navigator.clipboard.writeText", generatedEncryptionKey);
        await JS.InvokeVoidAsync("showNotification", "‚úÖ Clef copi√©e");
    }

    private void NextKeyStep()
    {
        if (keyCreationStep < 3)
            keyCreationStep++;
    }

    private void PreviousKeyStep()
    {
        if (keyCreationStep > 1)
            keyCreationStep--;
    }

    private async Task ValidateKeyCreation()
    {
        if (!isProgrammationConfirmed)
            return;

        isValidatingKey = true;
        try
        {
            var token = await AuthService.GetTokenAsync();
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

            var request = new
            {
                chipId = generatedChipId,
                encryptionKey = generatedEncryptionKey,
                keyHash = ComputeSHA256(generatedEncryptionKey)
            };

            var response = await Http.PostAsJsonAsync($"api/rfidchips/{selectedChipForKey.Id}/key", request);

            if (response.IsSuccessStatusCode)
            {
                await JS.InvokeVoidAsync("showNotification", "‚úÖ Clef cr√©√©e et puce mise en stock");
                CloseCreateKeyModal();
                await LoadChips();
            }
            else
            {
                await JS.InvokeVoidAsync("alert", "Erreur lors de la cr√©ation de la clef");
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Erreur: {ex.Message}");
        }
        finally
        {
            isValidatingKey = false;
        }
    }

    private string ComputeSHA256(string input)
    {
        using (var sha256 = SHA256.Create())
        {
            var hashedBytes = sha256.ComputeHash(Encoding.UTF8.GetBytes(input));
            return BitConverter.ToString(hashedBytes).Replace("-", "");
        }
    }

    private async Task DeactivateChip(Guid chipId)
    {
        if (!await JS.InvokeAsync<bool>("confirm", "√ätes-vous s√ªr de vouloir d√©sactiver cette puce?"))
            return;

        try
        {
            var token = await AuthService.GetTokenAsync();
            Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);

            var response = await Http.DeleteAsync($"api/rfidchips/{chipId}");
            if (response.IsSuccessStatusCode)
            {
                await JS.InvokeVoidAsync("showNotification", "‚úÖ Puce d√©sactiv√©e");
                CloseDetailModal();
                await LoadChips();
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Erreur: {ex.Message}");
        }
    }

    private async Task RefreshData()
    {
        await LoadChips();
        await JS.InvokeVoidAsync("showNotification", "‚úÖ Donn√©es actualis√©es");
    }

    private void NavigateToDashboard()
    {
        Navigation.NavigateTo("/admin-lc/dashboard");
    }

    private async Task HandleManualUidKeyUp(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await AddManualChip();
        }
    }

    private string GetStatusBadgeClass(string status)
    {
        if (string.IsNullOrWhiteSpace(status) || status == "UNDEFINED" || status == "NULL")
            return "inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-red-50 text-red-800 border border-red-200";

        return status switch
        {
            "IN_TRANSIT_SUPPLIER" => "inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-orange-50 text-orange-800 border border-orange-200",
            "IN_WORKSHOP" => "inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-amber-50 text-amber-800 border border-amber-200",
            "IN_STOCK" => "inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-yellow-50 text-yellow-800 border border-yellow-200",
            "IN_DELIVERY" => "inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-blue-50 text-blue-800 border border-blue-200",
            "DELIVERED_PENDING" => "inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-purple-50 text-purple-800 border border-purple-200",
            "DELIVERED" => "inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-indigo-50 text-indigo-800 border border-indigo-200",
            "ASSIGNED" => "inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-cyan-50 text-cyan-800 border border-cyan-200",
            "ACTIVE" => "inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-green-50 text-green-800 border border-green-200",
            "INACTIVE" => "inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-gray-50 text-gray-800 border border-gray-200",
            "SAV_RETURN" => "inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-red-50 text-red-800 border border-red-200",
            "SAV_REPAIR" => "inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-red-100 text-red-900 border border-red-300",
            "SAV_REPLACEMENT" => "inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-pink-50 text-pink-800 border border-pink-200",
            _ => "inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-gray-50 text-gray-800 border border-gray-200"
        };
    }

    private string GetStatusLabel(string status)
    {
        if (string.IsNullOrWhiteSpace(status) || status == "UNDEFINED" || status == "NULL")
            return "‚ö†Ô∏è Non d√©fini";

        return status switch
        {
            "IN_TRANSIT_SUPPLIER" => "üìÆ En transit (fournisseur)",
            "IN_WORKSHOP" => "üîß En atelier",
            "IN_STOCK" => "üì¶ En stock",
            "IN_DELIVERY" => "üöö En livraison",
            "DELIVERED_PENDING" => "üì¨ Livr√©e (en attente)",
            "DELIVERED" => "‚úÖ R√©ceptionn√©e",
            "ASSIGNED" => "üìç Affect√©e",
            "ACTIVE" => "üü¢ Active",
            "INACTIVE" => "‚ö´ Inactive",
            "SAV_RETURN" => "üîÑ Retour SAV",
            "SAV_REPAIR" => "üî® En r√©paration",
            "SAV_REPLACEMENT" => "üÜï Remplac√©e",
            _ => status
        };
    }
}
