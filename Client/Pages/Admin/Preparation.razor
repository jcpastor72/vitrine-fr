@page "/admin-lc/preparation"
@layout AdminLayout
@using VitrineFr.Models
@using VitrineFr.Services
@inject NavigationManager Navigation
@inject HttpClient Http
@inject AuthService AuthService

<div class="space-y-6">
    <!-- Header -->
    <div class="flex justify-between items-center">
        <div>
            <h1 class="text-3xl font-bold text-gray-900">Pr√©paration de Commandes</h1>
            <p class="text-gray-600 mt-2">Pr√©parez et organisez les commandes pour l'exp√©dition</p>
        </div>
    </div>

    <!-- Statistics -->
    <div class="grid md:grid-cols-4 gap-4">
        <div class="bg-yellow-50 rounded-lg shadow p-4">
            <div class="text-2xl font-bold text-yellow-700">@toBePrepped</div>
            <div class="text-sm text-yellow-600">√Ä pr√©parer</div>
        </div>
        <div class="bg-blue-50 rounded-lg shadow p-4">
            <div class="text-2xl font-bold text-blue-700">@inPreparation</div>
            <div class="text-sm text-blue-600">En pr√©paration</div>
        </div>
        <div class="bg-purple-50 rounded-lg shadow p-4">
            <div class="text-2xl font-bold text-purple-700">@readyToShip</div>
            <div class="text-sm text-purple-600">Pr√™tes √† exp√©dier</div>
        </div>
        <div class="bg-gray-50 rounded-lg shadow p-4">
            <div class="text-2xl font-bold text-gray-700">@todayPrepared</div>
            <div class="text-sm text-gray-600">Pr√©par√©es aujourd'hui</div>
        </div>
    </div>

    <!-- Preparation Queue -->
    <div class="grid md:grid-cols-2 gap-6">
        <!-- To Be Prepared -->
        <div class="bg-white rounded-lg shadow p-6">
            <h3 class="text-lg font-bold text-gray-900 mb-4">‚è±Ô∏è √Ä pr√©parer</h3>
            @if (isLoading)
            {
                <div class="text-center text-gray-500">Chargement...</div>
            }
            else if (toBePreppedOrders.Count == 0)
            {
                <div class="text-center text-gray-500">Aucune commande √† pr√©parer</div>
            }
            else
            {
                <div class="space-y-3">
                    @foreach (var order in toBePreppedOrders)
                    {
                        <div class="bg-yellow-50 border-l-4 border-yellow-400 p-4 rounded">
                            <div class="flex justify-between items-start">
                                <div>
                                    <p class="font-bold text-gray-900">@order.OrderNumber</p>
                                    <p class="text-sm text-gray-600">@order.CustomerName</p>
                                    <p class="text-xs text-gray-500 mt-1">üì¶ Quantit√©: @order.ChipsQuantity unit√©s</p>
                                </div>
                                <button @onclick="() => StartPreparation(order)" class="px-3 py-1 bg-blue-600 text-white rounded text-sm hover:bg-blue-700 font-medium">
                                    Commencer
                                </button>
                            </div>
                        </div>
                    }
                </div>
            }
        </div>

        <!-- In Preparation -->
        <div class="bg-white rounded-lg shadow p-6">
            <h3 class="text-lg font-bold text-gray-900 mb-4">üèóÔ∏è En pr√©paration</h3>
            @if (inPreparationOrders.Count == 0)
            {
                <div class="text-center text-gray-500">Aucune commande en pr√©paration</div>
            }
            else
            {
                <div class="space-y-3">
                    @foreach (var order in inPreparationOrders)
                    {
                        <div class="bg-blue-50 border-l-4 border-blue-400 p-4 rounded">
                            <div class="flex justify-between items-start mb-2">
                                <div>
                                    <p class="font-bold text-gray-900">@order.OrderNumber</p>
                                    <p class="text-sm text-gray-600">@order.CustomerName</p>
                                </div>
                                <span class="text-xs bg-blue-100 text-blue-800 px-2 py-1 rounded">En cours</span>
                            </div>
                            <div class="flex justify-between items-center mt-3">
                                <p class="text-xs text-gray-600">üì¶ @order.ChipsQuantity unit√©s</p>
                                <button @onclick="() => CompletePreparation(order)" class="px-3 py-1 bg-green-600 text-white rounded text-sm hover:bg-green-700 font-medium">
                                    Terminer
                                </button>
                            </div>
                        </div>
                    }
                </div>
            }
        </div>
    </div>

    <!-- Ready to Ship -->
    <div class="bg-white rounded-lg shadow p-6">
        <h3 class="text-lg font-bold text-gray-900 mb-4">‚úì Pr√™tes √† exp√©dier (@readyToShip)</h3>
        @if (readyToShipOrders.Count == 0)
        {
            <div class="text-center text-gray-500 py-8">Aucune commande pr√™te √† exp√©dier</div>
        }
        else
        {
            <div class="overflow-x-auto">
                <table class="w-full">
                    <thead class="bg-gray-50">
                        <tr>
                            <th class="px-6 py-3 text-left text-xs font-semibold text-gray-700">Commande</th>
                            <th class="px-6 py-3 text-left text-xs font-semibold text-gray-700">Client</th>
                            <th class="px-6 py-3 text-left text-xs font-semibold text-gray-700">Quantit√©</th>
                            <th class="px-6 py-3 text-left text-xs font-semibold text-gray-700">Date de pr√©paration</th>
                        </tr>
                    </thead>
                    <tbody class="divide-y divide-gray-200">
                        @foreach (var order in readyToShipOrders)
                        {
                            <tr class="hover:bg-gray-50 transition cursor-pointer" @onclick="() => ViewPreparationDetails(order.Id)">
                                <td class="px-6 py-4 font-mono font-semibold text-blue-600">@order.OrderNumber</td>
                                <td class="px-6 py-4 font-medium text-gray-900">@order.CustomerName</td>
                                <td class="px-6 py-4 text-sm text-gray-600">@order.ChipsQuantity unit√©s</td>
                                <td class="px-6 py-4 text-sm text-gray-600">@order.CreatedAt.ToString("dd/MM/yyyy")</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
    </div>

    <!-- Quality Check -->
    <div class="bg-green-50 rounded-lg shadow p-6 border-l-4 border-green-600">
        <h3 class="text-lg font-bold text-green-900 mb-3">‚úì Contr√¥le qualit√©</h3>
        <p class="text-sm text-green-800">Toutes les commandes pr√™tes √† exp√©dier ont √©t√© v√©rifi√©es et sont conformes aux normes de qualit√©.</p>
    </div>
</div>

@code {
    private int toBePrepped = 0;
    private int inPreparation = 0;
    private int readyToShip = 0;
    private int todayPrepared = 0;
    private List<OrderData> toBePreppedOrders = new();
    private List<OrderData> inPreparationOrders = new();
    private List<OrderData> readyToShipOrders = new();
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadOrdersByStatus();
    }

    private async Task LoadOrdersByStatus()
    {
        try
        {
            var token = await AuthService.GetTokenAsync();
            Http.DefaultRequestHeaders.Authorization =
                new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            // R√©cup√©rer les commandes pay√©es (√† pr√©parer)
            var paidResponse = await Http.GetAsync("api/orders?status=PAID");
            if (paidResponse.IsSuccessStatusCode)
            {
                var paidOrders = await paidResponse.Content.ReadFromJsonAsync<List<dynamic>>() ?? new();
                toBePreppedOrders = paidOrders.Select(o => new OrderData
                {
                    OrderNumber = o["orderNumber"],
                    CustomerName = o["customerName"],
                    ChipsQuantity = o["chipsQuantity"],
                    CreatedAt = o["createdAt"]
                }).ToList();
                toBePrepped = toBePreppedOrders.Count;
            }

            // R√©cup√©rer les commandes en pr√©paration
            var preparingResponse = await Http.GetAsync("api/orders?status=PREPARING");
            if (preparingResponse.IsSuccessStatusCode)
            {
                var preparingOrders = await preparingResponse.Content.ReadFromJsonAsync<List<dynamic>>() ?? new();
                inPreparationOrders = preparingOrders.Select(o => new OrderData
                {
                    OrderNumber = o["orderNumber"],
                    CustomerName = o["customerName"],
                    ChipsQuantity = o["chipsQuantity"],
                    CreatedAt = o["createdAt"]
                }).ToList();
                inPreparation = inPreparationOrders.Count;
            }

            // R√©cup√©rer les commandes pr√™tes √† exp√©dier
            var readyResponse = await Http.GetAsync("api/orders?status=READY_TO_SHIP");
            if (readyResponse.IsSuccessStatusCode)
            {
                var readyOrders = await readyResponse.Content.ReadFromJsonAsync<List<dynamic>>() ?? new();
                readyToShipOrders = readyOrders.Select(o => new OrderData
                {
                    OrderNumber = o["orderNumber"],
                    CustomerName = o["customerName"],
                    ChipsQuantity = o["chipsQuantity"],
                    CreatedAt = o["createdAt"]
                }).ToList();
                readyToShip = readyToShipOrders.Count;
            }

            // Calculer le nombre de commandes pr√©par√©es aujourd'hui
            var today = DateTime.Now.Date;
            todayPrepared = readyToShipOrders.Count(o => o.CreatedAt.Date == today);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur de chargement : {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task StartPreparation(OrderData order)
    {
        try
        {
            var token = await AuthService.GetTokenAsync();
            Http.DefaultRequestHeaders.Authorization =
                new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            var response = await Http.PostAsync($"api/orders/{order.Id}/start-preparation", null);
            if (response.IsSuccessStatusCode)
            {
                await LoadOrdersByStatus();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur : {ex.Message}");
        }
    }

    private async Task CompletePreparation(OrderData order)
    {
        try
        {
            var token = await AuthService.GetTokenAsync();
            Http.DefaultRequestHeaders.Authorization =
                new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            var response = await Http.PostAsync($"api/orders/{order.Id}/ready-to-ship", null);
            if (response.IsSuccessStatusCode)
            {
                await LoadOrdersByStatus();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur : {ex.Message}");
        }
    }

    private void ViewPreparationDetails(Guid id)
    {
        Navigation.NavigateTo($"/admin-lc/preparation/{id}");
    }

    private class OrderData
    {
        public Guid Id { get; set; }
        public string OrderNumber { get; set; } = "";
        public string CustomerName { get; set; } = "";
        public int ChipsQuantity { get; set; }
        public DateTime CreatedAt { get; set; }
    }
}
