@page "/admin-lc"
@page "/admin-lc/dashboard"
@layout AdminLayout
@using VitrineFr.Models
@using VitrineFr.Services
@inject NavigationManager Navigation
@inject ApiService ApiService
@inject HttpClient Http
@inject AuthService AuthService

<div class="space-y-6">
    <!-- Quick Stats -->
    <div class="grid md:grid-cols-4 gap-4">
        <div class="bg-white rounded-lg shadow p-6">
            <div class="flex justify-between items-start">
                <div>
                    <p class="text-sm text-gray-600 font-semibold">Clients totaux</p>
                    <p class="text-4xl font-bold text-gray-900 mt-2">@clientsCount</p>
                </div>
                <span class="text-3xl">üë•</span>
            </div>
            <p class="text-xs text-green-600 mt-4">+12% ce mois</p>
        </div>

        <div class="bg-white rounded-lg shadow p-6">
            <div class="flex justify-between items-start">
                <div>
                    <p class="text-sm text-gray-600 font-semibold">Puces RFID actives</p>
                    <p class="text-4xl font-bold text-gray-900 mt-2">@rfidChipsActiveCount</p>
                </div>
                <span class="text-3xl">üì°</span>
            </div>
            <p class="text-xs text-blue-600 mt-4">En service</p>
        </div>

        <div class="bg-white rounded-lg shadow p-6">
            <div class="flex justify-between items-start">
                <div>
                    <p class="text-sm text-gray-600 font-semibold">T√¢ches planifi√©es</p>
                    <p class="text-4xl font-bold text-gray-900 mt-2">@tasksCount</p>
                </div>
                <span class="text-3xl">üìã</span>
            </div>
            <p class="text-xs text-yellow-600 mt-4">Tous clients, toutes p√©riodes</p>
        </div>

        <div class="bg-white rounded-lg shadow p-6">
            <div class="flex justify-between items-start">
                <div>
                    <p class="text-sm text-gray-600 font-semibold">Sites g√©r√©s</p>
                    <p class="text-4xl font-bold text-gray-900 mt-2">@sitesCount</p>
                </div>
                <span class="text-3xl">üè¢</span>
            </div>
            <p class="text-xs text-green-600 mt-4">Actifs</p>
        </div>
    </div>

    <div class="grid md:grid-cols-3 gap-6">
        <!-- Recent Clients -->
        <div class="bg-white rounded-lg shadow p-6">
            <h3 class="text-lg font-bold text-gray-900 mb-4">üë• Clients r√©cents</h3>
            <div class="max-h-80 overflow-y-auto space-y-3">
                @if (recentClients == null)
                {
                    <div class="text-center text-gray-500">Chargement...</div>
                }
                else if (recentClients.Count == 0)
                {
                    <div class="text-center text-gray-500">Aucun client r√©cent</div>
                }
                else
                {
                    @foreach (var client in recentClients)
                    {
                        <div class="flex justify-between items-center p-3 bg-gray-50 rounded-lg cursor-pointer hover:bg-gray-100 transition"
                            @onclick="() => ShowClientDetails(client)">
                            <div>
                                <p class="font-medium text-gray-900">@client.Name</p>
                                <p class="text-xs text-gray-600">@GetClientType(client)</p>
                            </div>
                            <span
                                class="text-xs @(client.IsActive ? "bg-green-100 text-green-800" : "bg-gray-100 text-gray-800") px-2 py-1 rounded">
                                @(client.IsActive ? "Actif" : "Inactif")
                            </span>
                        </div>
                    }
                }
            </div>
            <button @onclick="GoToClients"
                class="w-full mt-4 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition font-medium text-sm">
                Voir tous ‚Üí
            </button>
        </div>

        <!-- Client Details Modal -->
        @if (selectedClient != null)
        {
            <div class="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50 p-4"
                @onclick="CloseClientDetails">
                <div class="bg-white rounded-xl shadow-2xl max-w-md w-full" @onclick:stopPropagation>
                    <div class="bg-blue-50 border-b border-blue-200 p-6">
                        <div class="flex items-start justify-between">
                            <div>
                                <h3 class="text-2xl font-bold text-gray-900">D√©tails du client</h3>
                                <p class="text-sm text-gray-600 mt-1">@selectedClient.Name</p>
                            </div>
                            <button @onclick="CloseClientDetails" class="text-gray-400 hover:text-gray-600 transition">
                                <svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                        d="M6 18L18 6M6 6l12 12"></path>
                                </svg>
                            </button>
                        </div>
                    </div>
                    <div class="p-6">
                        <div class="grid grid-cols-2 gap-4 mb-4">
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-2">Type de client</label>
                                <p class="text-lg text-gray-900">@GetClientType(selectedClient)</p>
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-2">Statut</label>
                                <span
                                    class="text-sm @(selectedClient.IsActive ? "bg-green-100 text-green-800" : "bg-gray-100 text-gray-800") px-2 py-1 rounded">
                                    @(selectedClient.IsActive ? "Actif" : "Inactif")
                                </span>
                            </div>
                        </div>
                    <div class="mb-4">
                        <label class="block text-sm font-medium text-gray-700 mb-2">Email</label>
                        <p class="text-lg text-gray-900">@selectedClient.ContactEmail</p>
                    </div>
                        <div class="mb-4">
                            <label class="block text-sm font-medium text-gray-700 mb-2">Date d'inscription</label>
                            <p class="text-lg text-gray-900">@selectedClient.CreatedAt.ToString("dd/MM/yyyy")</p>
                        </div>
                    </div>
                    <div class="bg-gray-50 border-t border-gray-200 p-6 flex justify-end">
                        <button @onclick="GoToClientDetail"
                            class="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition">
                            Voir le profil complet
                        </button>
                    </div>
                </div>
            </div>
        }

        <!-- Recent Orders -->
        <div class="bg-white rounded-lg shadow p-6">
            <h3 class="text-lg font-bold text-gray-900 mb-4">üì¶ 10 derni√®res commandes</h3>
            <div class="max-h-80 overflow-y-auto space-y-3">
                @if (recentOrders == null)
                {
                    <div class="text-center text-gray-500">Chargement...</div>
                }
                else if (recentOrders.Count == 0)
                {
                    <div class="text-center text-gray-500">Aucune commande</div>
                }
                else
                {
                    @foreach (var order in recentOrders)
                    {
                        <div class="p-3 bg-gray-50 rounded-lg border-l-4 border-blue-600">
                            <div class="flex justify-between items-start">
                                <div>
                                    <p class="font-medium text-gray-900">@order.OrderNumber</p>
                                    <p class="text-xs text-gray-600">@order.CustomerName</p>
                                    <p class="text-xs text-gray-500 mt-1">@order.ChipsQuantity puces - @order.CreatedAt.ToString("dd/MM/yyyy HH:mm")</p>
                                </div>
                                <span class="text-xs @GetOrderStatusColor(order.Status) px-2 py-1 rounded">
                                    @order.Status
                                </span>
                            </div>
                        </div>
                    }
                }
            </div>
            <button @onclick="GoToOrders"
                class="w-full mt-4 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition font-medium text-sm">
                Voir toutes ‚Üí
            </button>
        </div>

        <!-- Recent Subscriptions -->
        <div class="bg-white rounded-lg shadow p-6">
            <h3 class="text-lg font-bold text-gray-900 mb-4">üìÖ 10 derniers abonnements</h3>
            <div class="max-h-80 overflow-y-auto space-y-3">
                @if (recentSubscriptions == null)
                {
                    <div class="text-center text-gray-500">Chargement...</div>
                }
                else if (recentSubscriptions.Count == 0)
                {
                    <div class="text-center text-gray-500">Aucun abonnement actif</div>
                }
                else
                {
                    @foreach (var subscription in recentSubscriptions)
                    {
                        <div class="p-3 bg-gray-50 rounded-lg border-l-4 border-green-600">
                            <div class="flex justify-between items-start">
                                <div>
                                    <p class="font-medium text-gray-900">@subscription.CustomerName</p>
                                    <p class="text-xs text-gray-600">@GetSubscriptionPlanLabel(subscription.SubscriptionPlan)</p>
                                    <p class="text-xs text-gray-500 mt-1">@subscription.ActivatedAt?.ToString("dd/MM/yyyy")</p>
                                </div>
                                <span class="text-xs bg-green-100 text-green-800 px-2 py-1 rounded">
                                    @subscription.Status
                                </span>
                            </div>
                        </div>
                    }
                }
            </div>
            <p class="text-xs text-gray-500 mt-4 text-center">Fonctionnalit√© en d√©veloppement</p>
        </div>
    </div>

    <!-- Section supprim√©e -->
</div>

@code {
    private int? clientsCount;
    private int? rfidChipsActiveCount;
    private int? tasksCount;
    private int? sitesCount;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var httpClient = await GetAuthenticatedClientAsync();

            // R√©cup√©rer le nombre total de clients
            var clientsResponse = await httpClient.GetAsync("api/customers/count/total");
            if (clientsResponse.IsSuccessStatusCode)
            {
                clientsCount = await clientsResponse.Content.ReadFromJsonAsync<int>();
            }

            var rfidChips = await ApiService.GetRfidChipsAsync();
            rfidChipsActiveCount = rfidChips?.Count(c => c.Status == "ACTIVE") ?? 0;

            // R√©cup√©rer le nombre total de t√¢ches planifi√©es (tous les clients)
            var tasksResponse = await httpClient.GetAsync("api/scheduledtasks/count/all");
            if (tasksResponse.IsSuccessStatusCode)
            {
                tasksCount = await tasksResponse.Content.ReadFromJsonAsync<int>();
            }

            // R√©cup√©rer le nombre total de sites (tous les clients)
            var sitesResponse = await httpClient.GetAsync("api/sites/count/all");
            if (sitesResponse.IsSuccessStatusCode)
            {
                sitesCount = await sitesResponse.Content.ReadFromJsonAsync<int>();
            }

            // Charger les clients r√©cents
            await LoadRecentClients();

            // Charger les derni√®res commandes
            await LoadRecentOrders();

            // Charger les derniers abonnements
            await LoadRecentSubscriptions();
        }
        catch (Exception ex)
        {
            // G√©rer les erreurs de chargement
            Console.WriteLine($"Erreur de chargement : {ex.Message}");
        }
    }

    private async Task<HttpClient> GetAuthenticatedClientAsync()
    {
        var token = await AuthService.GetTokenAsync();
        if (!string.IsNullOrEmpty(token))
        {
            Http.DefaultRequestHeaders.Authorization =
            new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
        }
        return Http;
    }

    private List<Client>? recentClients;
    private Client? selectedClient;

    private void GoToClients() => Navigation.NavigateTo("/admin-lc/clients");
    private void GoToCollaborators() => Navigation.NavigateTo("/admin-lc/collaborators");
    private void GoToOrders() => Navigation.NavigateTo("/admin-lc/orders");
    private void GoToRFIDChips() => Navigation.NavigateTo("/admin-lc/rfid-chips");
    private void GoToAudit() => Navigation.NavigateTo("/admin-lc/activity-log");

    private async Task LoadRecentClients()
    {
        try
        {
            var httpClient = await GetAuthenticatedClientAsync();
            var response = await httpClient.GetAsync("api/Customers/recent?limit=10");
            if (response.IsSuccessStatusCode)
            {
                recentClients = await response.Content.ReadFromJsonAsync<List<Client>>();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur de chargement des clients r√©cents : {ex.Message}");
            recentClients = new List<Client>();
        }
    }

    private void ShowClientDetails(Client client)
    {
        selectedClient = client;
    }

    private void CloseClientDetails()
    {
        selectedClient = null;
    }

    private void GoToClientDetail()
    {
        if (selectedClient != null)
        {
            Navigation.NavigateTo($"/admin-lc/clients/{selectedClient.Id}");
        }
    }

    private string GetClientType(Client client)
    {
        return client.SubscriptionPlan switch
        {
            "PROFESSIONAL" => "Professionnel",
            "ENTERPRISE" => "Entreprise",
            "STARTER" => "Starter",
            _ => "Non d√©fini"
        };
    }

    private List<OrderInfo>? recentOrders;

    private async Task LoadRecentOrders()
    {
        try
        {
            var httpClient = await GetAuthenticatedClientAsync();
            var response = await httpClient.GetAsync("api/orders/recent?limit=10");
            if (response.IsSuccessStatusCode)
            {
                recentOrders = await response.Content.ReadFromJsonAsync<List<OrderInfo>>();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur de chargement des commandes r√©centes : {ex.Message}");
            recentOrders = new List<OrderInfo>();
        }
    }

    private string GetOrderStatusColor(string status)
    {
        return status switch
        {
            "PENDING" => "bg-yellow-100 text-yellow-800",
            "PAID" => "bg-blue-100 text-blue-800",
            "SHIPPED" => "bg-purple-100 text-purple-800",
            "DELIVERED" => "bg-green-100 text-green-800",
            _ => "bg-gray-100 text-gray-800"
        };
    }

    private List<SubscriptionInfo>? recentSubscriptions;

    private async Task LoadRecentSubscriptions()
    {
        try
        {
            var httpClient = await GetAuthenticatedClientAsync();
            var response = await httpClient.GetAsync("api/customers/recent-subscriptions?limit=10");
            if (response.IsSuccessStatusCode)
            {
                recentSubscriptions = await response.Content.ReadFromJsonAsync<List<SubscriptionInfo>>();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur de chargement des abonnements r√©cents : {ex.Message}");
            recentSubscriptions = new List<SubscriptionInfo>();
        }
    }

    private string GetSubscriptionPlanLabel(string plan)
    {
        return plan switch
        {
            "PROFESSIONAL" => "Plan Professionnel",
            "ENTERPRISE" => "Plan Entreprise",
            "STARTER" => "Plan Starter",
            "free" => "Plan Gratuit",
            _ => plan
        };
    }

    private class OrderInfo
    {
        public string OrderNumber { get; set; } = "";
        public string CustomerName { get; set; } = "";
        public int ChipsQuantity { get; set; }
        public string Status { get; set; } = "";
        public DateTime CreatedAt { get; set; }
    }

    private class SubscriptionInfo
    {
        public string CustomerName { get; set; } = "";
        public string SubscriptionPlan { get; set; } = "";
        public string Status { get; set; } = "";
        public DateTime? ActivatedAt { get; set; }
    }

}
