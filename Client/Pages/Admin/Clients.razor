@page "/admin-lc/clients"
@layout AdminLayout
@using VitrineFr.Models
@using VitrineFr.Services
@inject NavigationManager Navigation
@inject ApiService ApiService

<div class="space-y-6">
    <!-- Header -->
    <div>
        <h1 class="text-3xl font-bold text-gray-900">Gestion des Clients</h1>
        <p class="text-gray-600 mt-2">Consultez et g√©rez toutes les fiches clients</p>
    </div>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="bg-red-50 rounded-lg shadow p-4 border-l-4 border-red-600">
            <p class="text-red-800 font-medium">‚ö†Ô∏è Erreur</p>
            <p class="text-red-700 text-sm mt-1">@errorMessage</p>
        </div>
    }

    <!-- Statistics -->
    <div class="grid md:grid-cols-4 gap-4">
        <div class="bg-white rounded-lg shadow p-4">
            <div class="text-2xl font-bold text-gray-900">@(filteredClients?.Count ?? 0)</div>
            <div class="text-sm text-gray-600">Clients totaux</div>
        </div>
        <div class="bg-blue-50 rounded-lg shadow p-4">
            <div class="text-2xl font-bold text-blue-700">@GetPlanCount("Starter")</div>
            <div class="text-sm text-blue-600">Plan Starter</div>
        </div>
        <div class="bg-purple-50 rounded-lg shadow p-4">
            <div class="text-2xl font-bold text-purple-700">@GetPlanCount("Professional")</div>
            <div class="text-sm text-purple-600">Plan Pro</div>
        </div>
        <div class="bg-green-50 rounded-lg shadow p-4">
            <div class="text-2xl font-bold text-green-700">@GetPlanCount("Enterprise")</div>
            <div class="text-sm text-green-600">Plan Enterprise</div>
        </div>
    </div>

    <!-- Filtres -->
    <div class="bg-white rounded-lg shadow p-6">
        <div class="grid md:grid-cols-4 gap-4">
            <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">Plan d'abonnement</label>
                <select @bind="filterPlan" @bind:after="ApplyFilters"
                        class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                    <option value="">Tous les plans</option>
                    <option value="Starter">Starter</option>
                    <option value="Professional">Professional</option>
                    <option value="Enterprise">Enterprise</option>
                </select>
            </div>
            <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">Statut Abonnement</label>
                <select @bind="filterStatus" @bind:after="ApplyFilters"
                        class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                    <option value="">Tous les statuts</option>
                    <option value="active">Actif</option>
                    <option value="archived">Archiv√©</option>
                </select>
            </div>
            <div>
                <label class="block text-sm font-medium text-gray-700 mb-2">Tri</label>
                <select @bind="sortBy" @bind:after="ApplyFilters"
                        class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                    <option value="name">Nom (A-Z)</option>
                    <option value="name-desc">Nom (Z-A)</option>
                    <option value="date">Date cr√©ation (r√©cent)</option>
                    <option value="date-old">Date cr√©ation (ancien)</option>
                </select>
            </div>
            <div class="flex items-end">
                <button @onclick="ResetFilters"
                        class="w-full px-4 py-2 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300 transition">
                    R√©initialiser
                </button>
            </div>
        </div>
    </div>

    <!-- Loading State -->
    @if (isLoading)
    {
        <div class="bg-white rounded-lg shadow p-8 text-center">
            <div class="inline-block">
                <div class="w-12 h-12 border-4 border-blue-200 border-t-blue-600 rounded-full animate-spin"></div>
            </div>
            <p class="text-gray-600 mt-4 font-medium">Chargement des clients...</p>
        </div>
    }
    else if (clients == null || !clients.Any())
    {
        <div class="bg-white rounded-lg shadow p-8 text-center">
            <p class="text-2xl mb-2">üë•</p>
            <p class="text-gray-600 font-medium">Aucun client trouv√©</p>
            <p class="text-gray-500 text-sm mt-2">Les clients enregistr√©s appara√Ætront ici.</p>
        </div>
    }
    else
    {
        <!-- Clients Table -->
        <div class="bg-white rounded-lg shadow overflow-hidden">
            <div class="overflow-x-auto">
                <table class="w-full">
                    <thead class="bg-gray-50 border-b-2 border-gray-200">
                        <tr>
                            <th class="px-6 py-3 text-left text-xs font-semibold text-gray-700">Nom</th>
                            <th class="px-6 py-3 text-left text-xs font-semibold text-gray-700">Ville</th>
                            <th class="px-6 py-3 text-left text-xs font-semibold text-gray-700">Activit√©</th>
                            <th class="px-6 py-3 text-left text-xs font-semibold text-gray-700">Plan</th>
                            <th class="px-6 py-3 text-left text-xs font-semibold text-gray-700">Statut</th>
                            <th class="px-6 py-3 text-left text-xs font-semibold text-gray-700">Date cr√©ation</th>
                        </tr>
                    </thead>
                    <tbody class="divide-y divide-gray-200">
                        @foreach (var client in filteredClients ?? new())
                        {
                            <tr class="hover:bg-gray-50 transition cursor-pointer" @onclick="() => ViewClientDetails(client.Id)">
                                <td class="px-6 py-4 font-bold text-gray-900">@client.Name</td>
                                <td class="px-6 py-4 text-sm text-gray-600">@(string.IsNullOrEmpty(client.City) ? "‚Äî" : client.City)</td>
                                <td class="px-6 py-4 text-sm text-gray-600">@(string.IsNullOrEmpty(client.BusinessSector) ? "‚Äî" : client.BusinessSector)</td>
                                <td class="px-6 py-4">
                                    @{
                                        var planColor = client.SubscriptionPlan switch
                                        {
                                            "Starter" => "bg-blue-100 text-blue-800",
                                            "Professional" => "bg-purple-100 text-purple-800",
                                            "Enterprise" => "bg-green-100 text-green-800",
                                            _ => "bg-gray-100 text-gray-800"
                                        };
                                    }
                                    <span class="inline-flex px-3 py-1 rounded-full text-xs font-semibold @planColor">
                                        @client.SubscriptionPlan
                                    </span>
                                </td>
                                <td class="px-6 py-4">
                                    @if (client.IsArchived)
                                    {
                                        <span class="inline-flex px-3 py-1 rounded-full text-xs font-semibold bg-gray-100 text-gray-800">
                                            üì¶ Archiv√©
                                        </span>
                                    }
                                    else
                                    {
                                        <span class="inline-flex px-3 py-1 rounded-full text-xs font-semibold bg-green-100 text-green-800">
                                            ‚úì Actif
                                        </span>
                                    }
                                </td>
                                <td class="px-6 py-4 text-sm text-gray-600">@client.CreatedAt.ToString("dd/MM/yyyy")</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    }
</div>

@code {
    private List<Client>? clients;
    private List<Client>? filteredClients;
    private bool isLoading = true;
    private string errorMessage = string.Empty;

    // Filtres
    private string filterPlan = "";
    private string filterStatus = "";
    private string sortBy = "name";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var allClients = await ApiService.GetClientsAsync();
            clients = allClients ?? new();
            ApplyFilters();
        }
        catch (Exception ex)
        {
            errorMessage = $"Erreur de chargement: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private void ApplyFilters()
    {
        if (clients == null) return;

        filteredClients = clients.Where(c =>
        {
            // Filtre plan
            if (!string.IsNullOrEmpty(filterPlan) && c.SubscriptionPlan != filterPlan)
                return false;

            // Filtre statut
            if (!string.IsNullOrEmpty(filterStatus))
            {
                if (filterStatus == "active" && c.IsArchived)
                    return false;
                if (filterStatus == "archived" && !c.IsArchived)
                    return false;
            }

            return true;
        }).ToList();

        // Appliquer le tri
        filteredClients = sortBy switch
        {
            "name" => filteredClients.OrderBy(c => c.Name).ToList(),
            "name-desc" => filteredClients.OrderByDescending(c => c.Name).ToList(),
            "date" => filteredClients.OrderByDescending(c => c.CreatedAt).ToList(),
            "date-old" => filteredClients.OrderBy(c => c.CreatedAt).ToList(),
            _ => filteredClients
        };
    }

    private void ResetFilters()
    {
        filterPlan = "";
        filterStatus = "";
        sortBy = "name";
        ApplyFilters();
    }

    private int GetPlanCount(string planName)
    {
        if (clients == null) return 0;
        return clients.Count(c => c.SubscriptionPlan == planName);
    }

    private void ViewClientDetails(Guid clientId)
    {
        Navigation.NavigateTo($"/admin-lc/clients/{clientId}");
    }
}
