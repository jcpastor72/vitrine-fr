@page "/admin-lc/clients/{ClientId:guid}"
@layout AdminLayout
@using LaborControl.Web.Models
@using LaborControl.Web.Services
@inject NavigationManager Navigation
@inject ApiService ApiService

<div class="space-y-6">
    <!-- Header with Back Button -->
    <div class="flex items-center justify-between">
        <button @onclick="GoBack" class="px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700 transition font-medium">
            ‚Üê Retour
        </button>
        <h1 class="text-3xl font-bold text-gray-900">D√©tail du Client</h1>
        <div></div>
    </div>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="bg-red-50 rounded-lg shadow p-4 border-l-4 border-red-600">
            <p class="text-red-800 font-medium">‚ö†Ô∏è Erreur</p>
            <p class="text-red-700 text-sm mt-1">@errorMessage</p>
        </div>
    }

    @if (client == null)
    {
        if (isLoading)
        {
            <div class="bg-white rounded-lg shadow p-8 text-center">
                <div class="inline-block">
                    <div class="w-12 h-12 border-4 border-blue-200 border-t-blue-600 rounded-full animate-spin"></div>
                </div>
                <p class="text-gray-600 mt-4 font-medium">Chargement du client...</p>
            </div>
        }
        else
        {
            <div class="bg-white rounded-lg shadow p-8 text-center">
                <p class="text-gray-600 font-medium">Client non trouv√©</p>
            </div>
        }
    }
    else
    {
        <!-- Client Information -->
        <div class="bg-white rounded-lg shadow p-6">
            <h2 class="text-2xl font-bold text-gray-900 mb-6">Informations G√©n√©rales</h2>

            <div class="grid md:grid-cols-2 gap-6">
                <div>
                    <label class="text-sm text-gray-600 font-semibold">Nom du client</label>
                    <p class="text-lg font-medium text-gray-900 mt-1">@client.Name</p>
                </div>
                <div>
                    <label class="text-sm text-gray-600 font-semibold">Plan d'abonnement</label>
                    <div class="mt-1">
                        @{
                            var planColor = client.SubscriptionPlan switch
                            {
                                "Starter" => "bg-blue-100 text-blue-800",
                                "Professional" => "bg-purple-100 text-purple-800",
                                "Enterprise" => "bg-green-100 text-green-800",
                                _ => "bg-gray-100 text-gray-800"
                            };
                        }
                        <span class="inline-flex px-3 py-1 rounded-full text-sm font-semibold @planColor">
                            @client.SubscriptionPlan
                        </span>
                    </div>
                </div>
                <div>
                    <label class="text-sm text-gray-600 font-semibold">Date de cr√©ation</label>
                    <p class="text-lg font-medium text-gray-900 mt-1">@client.CreatedAt.ToString("dd/MM/yyyy √† HH:mm")</p>
                </div>
                <div>
                    <label class="text-sm text-gray-600 font-semibold">Ville</label>
                    <p class="text-lg font-medium text-gray-900 mt-1">@(string.IsNullOrEmpty(client.City) ? "‚Äî" : client.City)</p>
                </div>
                <div>
                    <label class="text-sm text-gray-600 font-semibold">Activit√© (secteur)</label>
                    <p class="text-lg font-medium text-gray-900 mt-1">@(string.IsNullOrEmpty(client.BusinessSector) ? "‚Äî" : client.BusinessSector)</p>
                </div>
                <div>
                    <label class="text-sm text-gray-600 font-semibold">Statut</label>
                    <div class="mt-1">
                        @if (client.IsArchived)
                        {
                            <span class="inline-flex px-3 py-1 rounded-full text-sm font-semibold bg-gray-100 text-gray-800">
                                üì¶ Archiv√©
                            </span>
                        }
                        else
                        {
                            <span class="inline-flex px-3 py-1 rounded-full text-sm font-semibold bg-green-100 text-green-800">
                                ‚úì Actif
                            </span>
                        }
                    </div>
                </div>

                @if (client.IsArchived && client.ArchivedAt.HasValue)
                {
                    <div>
                        <label class="text-sm text-gray-600 font-semibold">Date d'archivage</label>
                        <p class="text-lg font-medium text-gray-900 mt-1">@client.ArchivedAt.Value.ToString("dd/MM/yyyy √† HH:mm")</p>
                    </div>
                }

                @if (!string.IsNullOrEmpty(client.ArchivalReason))
                {
                    <div>
                        <label class="text-sm text-gray-600 font-semibold">Motif d'archivage</label>
                        <p class="text-lg font-medium text-gray-900 mt-1">@client.ArchivalReason</p>
                    </div>
                }
            </div>
        </div>

        <!-- Actions -->
        <div class="bg-white rounded-lg shadow p-6">
            <h2 class="text-2xl font-bold text-gray-900 mb-6">Actions</h2>
            <div class="flex flex-wrap gap-3">
                <button @onclick="EditClient" class="px-6 py-2 bg-yellow-600 text-white rounded-lg hover:bg-yellow-700 transition font-medium">
                    ‚úèÔ∏è Modifier
                </button>
                @if (!client.IsArchived)
                {
                    <button @onclick="ShowDeleteConfirmation" class="px-6 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition font-medium">
                        üóëÔ∏è Archiver
                    </button>
                }
                else
                {
                    <button @onclick="RestoreClient" class="px-6 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition font-medium">
                        ‚Ü©Ô∏è Restaurer
                    </button>
                }
            </div>
        </div>
    }
</div>

<!-- Modal de confirmation d'archivage -->
@if (showDeleteModal)
{
    <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
        <div class="bg-white rounded-lg shadow-lg p-6 w-96 max-h-96 overflow-y-auto">
            <h2 class="text-2xl font-bold text-gray-900 mb-4">‚ö†Ô∏è Confirmer l'archivage</h2>

            <p class="text-gray-600 mb-6">
                Vous √™tes sur le point d'archiver le client <strong>@client?.Name</strong>.
                Cette action ne le supprimera pas, mais le marquera comme archiv√©.
            </p>

            <div class="mb-6">
                <label class="block text-sm font-semibold text-gray-700 mb-2">
                    Motif d'archivage <span class="text-red-600">*</span>
                </label>
                <textarea @bind="archivalReason"
                    class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                    rows="4"
                    placeholder="Expliquez pourquoi vous archivez ce client..."></textarea>
            </div>

            <div class="flex justify-end gap-3">
                <button @onclick="CloseDeleteModal" class="px-4 py-2 bg-gray-300 text-gray-800 rounded-lg hover:bg-gray-400 transition font-medium">
                    Annuler
                </button>
                <button @onclick="ConfirmArchive"
                    disabled="@string.IsNullOrWhiteSpace(archivalReason)"
                    class="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition font-medium disabled:opacity-50 disabled:cursor-not-allowed">
                    Confirmer l'archivage
                </button>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public Guid ClientId { get; set; }

    private Client? client;
    private bool isLoading = true;
    private string errorMessage = string.Empty;
    private bool showDeleteModal = false;
    private string archivalReason = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadClient();
    }

    private async Task LoadClient()
    {
        try
        {
            isLoading = true;
            errorMessage = string.Empty;
            client = await ApiService.GetClientAsync(ClientId);

            if (client == null)
            {
                errorMessage = "Client non trouv√©";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Erreur de chargement: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/admin-lc/clients");
    }

    private void EditClient()
    {
        Navigation.NavigateTo($"/admin-lc/clients/{ClientId}/edit");
    }

    private void ShowDeleteConfirmation()
    {
        showDeleteModal = true;
        archivalReason = string.Empty;
    }

    private void CloseDeleteModal()
    {
        showDeleteModal = false;
        archivalReason = string.Empty;
    }

    private async Task ConfirmArchive()
    {
        if (client == null || string.IsNullOrWhiteSpace(archivalReason))
        {
            return;
        }

        try
        {
            // Mettre √† jour le client avec les informations d'archivage
            client.IsArchived = true;
            client.ArchivedAt = DateTime.Now;
            client.ArchivalReason = archivalReason;

            // Envoyer la mise √† jour √† l'API
            var success = await ApiService.UpdateClientAsync(ClientId, client);

            if (success)
            {
                closeDeleteModal();
                await Task.Delay(500);
                Navigation.NavigateTo("/admin-lc/clients");
            }
            else
            {
                errorMessage = "Erreur lors de l'archivage du client";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Erreur: {ex.Message}";
        }
    }

    private async Task RestoreClient()
    {
        if (client == null)
        {
            return;
        }

        try
        {
            // Restaurer le client
            client.IsArchived = false;
            client.ArchivedAt = null;
            client.ArchivalReason = null;

            // Envoyer la mise √† jour √† l'API
            var success = await ApiService.UpdateClientAsync(ClientId, client);

            if (success)
            {
                await LoadClient();
            }
            else
            {
                errorMessage = "Erreur lors de la restauration du client";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Erreur: {ex.Message}";
        }
    }

    private void closeDeleteModal()
    {
        showDeleteModal = false;
        archivalReason = string.Empty;
    }
}
