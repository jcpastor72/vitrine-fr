@page "/controlpoints/edit/{Id:guid}"
@inject HttpClient Http
@inject IJSRuntime JS
@inject NavigationManager Navigation

<PageTitle>√âditer Point de Contr√¥le - LABOR CONTROL</PageTitle>

<div class="min-h-screen bg-gradient-to-br from-gray-900 to-blue-900 py-12 px-4 sm:px-6 lg:px-8">
    <div class="max-w-3xl mx-auto">
        <!-- Header -->
        <div class="mb-8 text-white">
            <button @onclick="GoBack" class="text-gray-300 hover:text-white mb-4 flex items-center gap-2">
                ‚Üê Retour
            </button>
            <h1 class="text-4xl font-bold mb-2">
                ‚úèÔ∏è √âditer le Point de Contr√¥le
            </h1>
            <p class="text-gray-300">
                Modifiez les informations du point de contr√¥le
            </p>
        </div>

        @if (isLoading)
        {
            <div class="bg-white rounded-xl shadow-lg p-8 text-center">
                <div class="inline-block animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
                <p class="text-gray-700 mt-4">Chargement...</p>
            </div>
        }
        else
        {
            <div class="bg-white rounded-xl shadow-lg p-8">
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-6">
                        ‚ö†Ô∏è @errorMessage
                    </div>
                }

                <form @onsubmit="HandleSubmit">
                    <!-- Code -->
                    <div class="mb-6">
                        <label class="block text-gray-700 font-semibold mb-2">
                            Code du point de contr√¥le *
                        </label>
                        <input type="text"
                               @bind="code"
                               required
                               placeholder="Ex: PC-001"
                               class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent" />
                    </div>

                    <!-- Nom -->
                    <div class="mb-6">
                        <label class="block text-gray-700 font-semibold mb-2">
                            Nom *
                        </label>
                        <input type="text"
                               @bind="name"
                               required
                               placeholder="Ex: Temp√©rature couloir A"
                               class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent" />
                    </div>

                    <!-- Type de mesure -->
                    <div class="mb-6">
                        <label class="block text-gray-700 font-semibold mb-2">
                            Type de mesure *
                        </label>
                        <select @bind="measurementType"
                                required
                                class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                            <option value="">-- S√©lectionnez un type --</option>
                            <option value="temperature">Temp√©rature</option>
                            <option value="humidity">Humidit√©</option>
                            <option value="pressure">Pression</option>
                            <option value="visual">Contr√¥le visuel</option>
                            <option value="security">S√©curit√©</option>
                            <option value="maintenance">Maintenance</option>
                            <option value="cleaning">Nettoyage</option>
                            <option value="other">Autre</option>
                        </select>
                    </div>

                    <!-- Rattachement (Zone ou Asset) -->
                    <div class="mb-6 p-4 bg-blue-50 rounded-lg">
                        <p class="text-sm font-semibold text-blue-900 mb-3">
                            üìç Rattachement (choisissez au moins un √©l√©ment)
                        </p>

                        <!-- Choix Zone ou Asset -->
                        <div class="mb-4">
                            <label class="flex items-center gap-2 mb-2">
                                <input type="radio"
                                       name="attachmentType"
                                       value="zone"
                                       checked="@(attachmentType == "zone")"
                                       @onchange="@(() => { attachmentType = "zone"; })"
                                       class="w-4 h-4" />
                                <span class="text-gray-700 font-medium">Rattacher √† une Zone</span>
                            </label>
                            <label class="flex items-center gap-2">
                                <input type="radio"
                                       name="attachmentType"
                                       value="asset"
                                       checked="@(attachmentType == "asset")"
                                       @onchange="@(() => { attachmentType = "asset"; })"
                                       class="w-4 h-4" />
                                <span class="text-gray-700 font-medium">Rattacher √† un √âquipement</span>
                            </label>
                        </div>

                        @if (attachmentType == "zone")
                        {
                            <div class="mb-4">
                                <label class="block text-gray-700 font-semibold mb-2">
                                    Zone *
                                </label>
                                <select @bind="selectedZoneId"
                                        required
                                        class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                                    <option value="">-- S√©lectionnez une zone --</option>
                                    @foreach (var zone in zones)
                                    {
                                        <option value="@zone.Id">@zone.Name (@zone.SiteName)</option>
                                    }
                                </select>
                            </div>
                        }

                        @if (attachmentType == "asset")
                        {
                            <div class="mb-4">
                                <label class="block text-gray-700 font-semibold mb-2">
                                    √âquipement *
                                </label>
                                <select @bind="selectedAssetId"
                                        required
                                        class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent">
                                    <option value="">-- S√©lectionnez un √©quipement --</option>
                                    @foreach (var asset in assets)
                                    {
                                        <option value="@asset.Id">@asset.Name (@asset.ZoneName)</option>
                                    }
                                </select>
                                @if (assets.Count == 0)
                                {
                                    <div class="mt-2 p-3 bg-orange-50 border border-orange-200 rounded-lg">
                                        <p class="text-sm text-orange-600 mb-2">Aucun √©quipement disponible.</p>
                                        <a href="/create-asset" class="inline-flex items-center gap-2 text-sm bg-orange-600 hover:bg-orange-700 text-white px-4 py-2 rounded-lg font-semibold transition">
                                            ‚ûï Cr√©er un √©quipement
                                        </a>
                                    </div>
                                }
                            </div>
                        }
                    </div>

                    <!-- Description -->
                    <div class="mb-6">
                        <label class="block text-gray-700 font-semibold mb-2">
                            Description
                        </label>
                        <textarea @bind="description"
                                  rows="3"
                                  placeholder="Description du point de contr√¥le..."
                                  class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"></textarea>
                    </div>

                    <!-- Localisation -->
                    <div class="mb-6">
                        <label class="block text-gray-700 font-semibold mb-2">
                            Localisation pr√©cise
                        </label>
                        <input type="text"
                               @bind="locationDescription"
                               placeholder="Ex: Mur nord, √† 1,5m du sol"
                               class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent" />
                    </div>

                    <!-- Puce RFID affect√©e (lecture seule) -->
                    @if (!string.IsNullOrEmpty(rfidChipCode))
                    {
                        <div class="mb-6 p-4 bg-green-50 rounded-lg">
                            <p class="text-sm font-semibold text-green-900 mb-2">
                                üè∑Ô∏è Puce RFID affect√©e
                            </p>
                            <p class="font-mono font-bold text-green-700">@rfidChipCode</p>
                            <p class="text-xs text-gray-600 mt-1">
                                Utilisez l'application mobile pour modifier l'affectation de la puce
                            </p>
                        </div>
                    }

                    <!-- Boutons -->
                    <div class="flex gap-4">
                        <button type="submit"
                                disabled="@isSaving"
                                class="flex-1 bg-blue-600 hover:bg-blue-700 text-white px-6 py-3 rounded-lg font-semibold transition disabled:bg-gray-300 disabled:cursor-not-allowed">
                            @if (isSaving)
                            {
                                <span>Enregistrement...</span>
                            }
                            else
                            {
                                <span>‚úÖ Enregistrer les modifications</span>
                            }
                        </button>
                        <button type="button"
                                @onclick="GoBack"
                                class="px-6 py-3 border border-gray-300 rounded-lg font-semibold hover:bg-gray-50 transition">
                            Annuler
                        </button>
                    </div>
                </form>
            </div>
        }
    </div>
</div>

@code {
    [Parameter]
    public Guid Id { get; set; }

    private string code = "";
    private string name = "";
    private string description = "";
    private string locationDescription = "";
    private string measurementType = "";
    private string attachmentType = "zone";
    private string selectedZoneId = "";
    private string selectedAssetId = "";
    private string rfidChipCode = "";

    private List<ZoneItem> zones = new();
    private List<AssetItem> assets = new();
    private bool isLoading = true;
    private bool isSaving = false;
    private string errorMessage = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadZones();
        await LoadAssets();
        await LoadControlPoint();
    }

    private async Task LoadControlPoint()
    {
        try
        {
            isLoading = true;
            var token = await JS.InvokeAsync<string>("localStorage.getItem", "authToken");
            if (string.IsNullOrEmpty(token))
            {
                Navigation.NavigateTo("/login");
                return;
            }

            token = token.Trim('"');
            Http.DefaultRequestHeaders.Authorization =
                new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            var cp = await Http.GetFromJsonAsync<ControlPointDetail>($"api/controlpoints/{Id}");

            if (cp != null)
            {
                code = cp.Code;
                name = cp.Name;
                description = cp.Description ?? "";
                locationDescription = cp.LocationDescription ?? "";
                measurementType = cp.MeasurementType;
                rfidChipCode = cp.RfidChipCode ?? "";

                if (cp.ZoneId.HasValue)
                {
                    attachmentType = "zone";
                    selectedZoneId = cp.ZoneId.Value.ToString();
                }
                else if (cp.AssetId.HasValue)
                {
                    attachmentType = "asset";
                    selectedAssetId = cp.AssetId.Value.ToString();
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Erreur lors du chargement: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadZones()
    {
        try
        {
            var token = await JS.InvokeAsync<string>("localStorage.getItem", "authToken");
            if (string.IsNullOrEmpty(token)) return;

            token = token.Trim('"');
            Http.DefaultRequestHeaders.Authorization =
                new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            zones = await Http.GetFromJsonAsync<List<ZoneItem>>("api/zones") ?? new();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur chargement zones: {ex.Message}");
        }
    }

    private async Task LoadAssets()
    {
        try
        {
            var token = await JS.InvokeAsync<string>("localStorage.getItem", "authToken");
            if (string.IsNullOrEmpty(token)) return;

            token = token.Trim('"');
            Http.DefaultRequestHeaders.Authorization =
                new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            assets = await Http.GetFromJsonAsync<List<AssetItem>>("api/assets") ?? new();
            Console.WriteLine($"DEBUG: {assets.Count} √©quipements charg√©s dans EditControlPoint");
            foreach (var asset in assets)
            {
                Console.WriteLine($"  - {asset.Name} (Zone: {asset.ZoneName})");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"ERROR: Erreur chargement assets: {ex.Message}");
        }
    }

    private async Task HandleSubmit()
    {
        try
        {
            isSaving = true;
            errorMessage = "";

            var token = await JS.InvokeAsync<string>("localStorage.getItem", "authToken");
            if (string.IsNullOrEmpty(token))
            {
                Navigation.NavigateTo("/login");
                return;
            }

            token = token.Trim('"');
            Http.DefaultRequestHeaders.Authorization =
                new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            var request = new
            {
                Code = code,
                Name = name,
                Description = description,
                LocationDescription = locationDescription,
                MeasurementType = measurementType,
                ZoneId = attachmentType == "zone" && !string.IsNullOrEmpty(selectedZoneId) ? Guid.Parse(selectedZoneId) : (Guid?)null,
                AssetId = attachmentType == "asset" && !string.IsNullOrEmpty(selectedAssetId) ? Guid.Parse(selectedAssetId) : (Guid?)null
            };

            var response = await Http.PutAsJsonAsync($"api/controlpoints/{Id}", request);

            if (response.IsSuccessStatusCode)
            {
                Navigation.NavigateTo("/controlpoints");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                errorMessage = $"Erreur lors de la modification: {error}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Erreur: {ex.Message}";
        }
        finally
        {
            isSaving = false;
        }
    }

    private async Task GoBack()
    {
        await JS.InvokeVoidAsync("history.back");
    }

    private class ControlPointDetail
    {
        public Guid Id { get; set; }
        public string Code { get; set; } = "";
        public string Name { get; set; } = "";
        public string? Description { get; set; }
        public string? LocationDescription { get; set; }
        public string MeasurementType { get; set; } = "";
        public Guid? RfidChipId { get; set; }
        public string? RfidChipCode { get; set; }
        public Guid? ZoneId { get; set; }
        public Guid? AssetId { get; set; }
    }

    private class ZoneItem
    {
        public Guid Id { get; set; }
        public string Name { get; set; } = "";
        public string SiteName { get; set; } = "";
    }

    private class AssetItem
    {
        public Guid Id { get; set; }
        public string Name { get; set; } = "";
        public string ZoneName { get; set; } = "";
    }
}
