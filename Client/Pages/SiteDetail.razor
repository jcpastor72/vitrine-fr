@page "/sites/{id:guid}"
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JS

<PageTitle>Détail du site - Labor Control</PageTitle>

<link href="css/professional.css" rel="stylesheet" />

<div class="min-h-screen bg-gray-50 py-8">
    <div class="max-w-7xl mx-auto px-4">
        @if (loading)
        {
            <div class="text-center py-12">
                <div class="inline-block animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
                <p class="mt-4 text-gray-600">Chargement...</p>
            </div>
        }
        else if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="bg-red-50 border-l-4 border-red-500 p-4 rounded-lg">
                <p class="text-red-700">@errorMessage</p>
            </div>
        }
        else if (site != null)
        {
            <!-- Header -->
            <div class="mb-6">
                <button @onclick="GoBack"
                        class="lc-btn lc-btn-secondary inline-flex items-center mb-4">
                    <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
                    </svg>
                    Retour
                </button>
                <div>
                    <h1 class="lc-heading-1">@site.Name</h1>
                    @if (!string.IsNullOrEmpty(site.Code))
                    {
                        <p class="lc-text-muted mt-1">Code: @site.Code</p>
                    }
                </div>
            </div>

            <!-- Informations du site -->
            <div class="lc-card mb-6">
                <h2 class="lc-heading-3 mb-4">Informations du site</h2>
                <div class="grid md:grid-cols-2 gap-6">
                    @if (!string.IsNullOrEmpty(site.Address))
                    {
                        <div>
                            <p class="text-sm lc-text-muted mb-1">Adresse</p>
                            <p class="text-gray-900 font-medium">@site.Address</p>
                            @if (!string.IsNullOrEmpty(site.City))
                            {
                                <p class="text-gray-900 font-medium">@site.PostalCode @site.City</p>
                            }
                        </div>
                    }

                    @if (!string.IsNullOrEmpty(site.Siret))
                    {
                        <div>
                            <p class="text-sm lc-text-muted mb-1">SIRET</p>
                            <p class="text-gray-900 font-medium font-mono">@site.Siret</p>
                        </div>
                    }

                    @if (!string.IsNullOrEmpty(site.ContactName))
                    {
                        <div>
                            <p class="text-sm lc-text-muted mb-1">Contact sur site</p>
                            <p class="text-gray-900 font-medium">@site.ContactName</p>
                            @if (!string.IsNullOrEmpty(site.ContactPhone))
                            {
                                <p class="text-gray-700 inline-flex items-center mt-1">
                                    <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z" />
                                    </svg>
                                    @site.ContactPhone
                                </p>
                            }
                            @if (!string.IsNullOrEmpty(site.ContactEmail))
                            {
                                <p class="text-gray-700 inline-flex items-center mt-1">
                                    <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
                                    </svg>
                                    @site.ContactEmail
                                </p>
                            }
                        </div>
                    }
                </div>

                <!-- Bouton Modifier -->
                <div class="mt-6 pt-6 border-t border-gray-200">
                    <button @onclick="EditSite"
                            class="lc-btn lc-btn-secondary inline-flex items-center">
                        <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z" />
                        </svg>
                        Modifier les informations
                    </button>
                </div>
            </div>

            <!-- Zones du site -->
            <div class="lc-card mb-6">
                <div class="flex justify-between items-center mb-4">
                    <h2 class="lc-heading-3">Zones (@site.Zones.Count)</h2>
                    <button @onclick="CreateZone"
                            class="lc-btn lc-btn-primary inline-flex items-center">
                        <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
                        </svg>
                        Ajouter une zone
                    </button>
                </div>

                @if (site.Zones.Count == 0)
                {
                    <div class="text-center py-8 bg-gray-50 rounded-lg">
                        <div class="w-12 h-12 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-3">
                            <svg class="w-6 h-6 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3.75 21h16.5M4.5 3h15M5.25 3v18m13.5-18v18M9 6.75h1.5m-1.5 3h1.5m-1.5 3h1.5m3-6H15m-1.5 3H15m-1.5 3H15M9 21v-3.375c0-.621.504-1.125 1.125-1.125h3.75c.621 0 1.125.504 1.125 1.125V21" />
                            </svg>
                        </div>
                        <p class="lc-text-muted mb-4">Aucune zone créée pour ce site</p>
                        <button @onclick="CreateZone"
                                class="lc-btn lc-btn-primary inline-flex items-center">
                            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
                            </svg>
                            Créer la première zone
                        </button>
                    </div>
                }
                else
                {
                    <div class="overflow-x-auto">
                        <table class="w-full">
                            <thead class="bg-gray-50 border-b border-gray-200">
                                <tr>
                                    <th class="px-6 py-3 text-left text-xs font-semibold text-gray-700 uppercase tracking-wider">Zone</th>
                                    <th class="px-6 py-3 text-left text-xs font-semibold text-gray-700 uppercase tracking-wider">Code</th>
                                    <th class="px-6 py-3 text-left text-xs font-semibold text-gray-700 uppercase tracking-wider">Type</th>
                                    <th class="px-6 py-3 text-left text-xs font-semibold text-gray-700 uppercase tracking-wider">Statut</th>
                                </tr>
                            </thead>
                            <tbody class="bg-white divide-y divide-gray-200">
                                @foreach (var zone in GetHierarchicalZones())
                                {
                                    <tr class="hover:bg-gray-50 transition">
                                        <td class="px-6 py-4">
                                            <div class="font-semibold text-gray-900" style="padding-left: @(zone.Level * 20)px;">
                                                @if (zone.Level > 0)
                                                {
                                                    <span class="text-gray-400 mr-2">└─</span>
                                                }
                                                @zone.Name
                                            </div>
                                        </td>
                                        <td class="px-6 py-4">
                                            <div class="text-gray-700">@(zone.Code ?? "-")</div>
                                        </td>
                                        <td class="px-6 py-4">
                                            @if (!string.IsNullOrEmpty(zone.Type))
                                            {
                                                <span class="px-3 py-1 bg-blue-100 text-blue-800 text-xs rounded-full font-semibold">@zone.Type</span>
                                            }
                                            else
                                            {
                                                <span class="text-gray-400">-</span>
                                            }
                                        </td>
                                        <td class="px-6 py-4">
                                            <span class="px-3 py-1 @(zone.IsActive ? "bg-green-100 text-green-800" : "bg-red-100 text-red-800") text-xs rounded-full font-semibold">
                                                @(zone.IsActive ? "Actif" : "Inactif")
                                            </span>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
            </div>
        }
    </div>
</div>

@code {
    [Parameter]
    public Guid Id { get; set; }

    private SiteDetailDto? site;
    private bool loading = true;
    private string errorMessage = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadSite();
    }

    private async Task LoadSite()
    {
        loading = true;
        errorMessage = "";

        try
        {
            var token = await JS.InvokeAsync<string>("localStorage.getItem", "authToken");

            if (!string.IsNullOrEmpty(token))
            {
                token = token.Trim('"');
            }

            if (string.IsNullOrEmpty(token))
            {
                Navigation.NavigateTo("/login");
                return;
            }

            Http.DefaultRequestHeaders.Clear();
            Http.DefaultRequestHeaders.Add("Authorization", $"Bearer {token}");

            var response = await Http.GetAsync($"api/sites/{Id}");

            if (response.IsSuccessStatusCode)
            {
                site = await response.Content.ReadFromJsonAsync<SiteDetailDto>();
            }
            else
            {
                errorMessage = $"Erreur {(int)response.StatusCode}: Site introuvable";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Erreur: {ex.Message}";
        }
        finally
        {
            loading = false;
        }
    }

    private async Task GoBack()
    {
        await JS.InvokeVoidAsync("history.back");
    }

    private void EditSite()
    {
        Navigation.NavigateTo($"/sites/edit/{Id}");
    }

    private void CreateZone()
    {
        Navigation.NavigateTo($"/zones/create?siteId={Id}");
    }

    private class SiteDetailDto
    {
        public Guid Id { get; set; }
        public string Name { get; set; } = "";
        public string? Code { get; set; }
        public string? Address { get; set; }
        public string? City { get; set; }
        public string? PostalCode { get; set; }
        public string? Siret { get; set; }
        public string? ContactName { get; set; }
        public string? ContactPhone { get; set; }
        public string? ContactEmail { get; set; }
        public bool IsActive { get; set; }
        public List<ZoneInfo> Zones { get; set; } = new();
    }

    private class ZoneInfo
    {
        public Guid Id { get; set; }
        public string Name { get; set; } = "";
        public string? Code { get; set; }
        public string? Type { get; set; }
        public Guid? ParentZoneId { get; set; }
        public int Level { get; set; }
        public bool IsActive { get; set; }
    }

    private List<ZoneInfo> GetHierarchicalZones()
    {
        if (site == null || site.Zones == null || site.Zones.Count == 0)
            return new List<ZoneInfo>();

        var result = new List<ZoneInfo>();
        var zonesDict = site.Zones.ToDictionary(z => z.Id, z => z);

        // Fonction récursive pour ajouter une zone et ses enfants
        void AddZoneAndChildren(ZoneInfo zone)
        {
            result.Add(zone);

            // Trouver et ajouter les zones enfants
            var children = site.Zones
                .Where(z => z.ParentZoneId == zone.Id)
                .OrderBy(z => z.Name)
                .ToList();

            foreach (var child in children)
            {
                AddZoneAndChildren(child);
            }
        }

        // Commencer par les zones racines (sans parent)
        var rootZones = site.Zones
            .Where(z => z.ParentZoneId == null)
            .OrderBy(z => z.Name)
            .ToList();

        foreach (var rootZone in rootZones)
        {
            AddZoneAndChildren(rootZone);
        }

        return result;
    }
}
