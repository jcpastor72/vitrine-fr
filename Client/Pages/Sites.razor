@page "/sites"
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JS

<PageTitle>Sites - Labor Control</PageTitle>

<link href="css/professional.css" rel="stylesheet" />

<div class="min-h-screen bg-gray-50 py-8">
    <div class="max-w-7xl mx-auto px-4">
        <!-- Header -->
        <div class="mb-8">
            <button @onclick="GoToDashboard"
                    class="lc-btn lc-btn-secondary inline-flex items-center mb-4">
                <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
                </svg>
                Retour
            </button>
            <div class="flex justify-between items-start">
                <div>
                    <h1 class="lc-heading-2">Gestion des sites</h1>
                    <p class="lc-text-muted mt-1">Gérez vos différents sites d'intervention</p>
                </div>
                <button @onclick="ShowCreateSite"
                        class="lc-btn lc-btn-primary inline-flex items-center">
                    <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
                    </svg>
                    Créer un site
                </button>
            </div>
        </div>

        @if (loading)
        {
            <div class="text-center py-12">
                <div class="inline-block animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
                <p class="mt-4 text-gray-600">Chargement des sites...</p>
            </div>
        }
        else if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="bg-red-50 border-l-4 border-red-500 p-4 rounded-lg">
                <p class="text-red-700">@errorMessage</p>
            </div>
        }
        else if (sites.Count == 0)
        {
            <div class="bg-white border border-gray-200 rounded-lg p-12 text-center">
                <div class="w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4">
                    <svg class="w-8 h-8 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 10.5a3 3 0 11-6 0 3 3 0 016 0z" />
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19.5 10.5c0 7.142-7.5 11.25-7.5 11.25S4.5 17.642 4.5 10.5a7.5 7.5 0 1115 0z" />
                    </svg>
                </div>
                <h3 class="text-lg font-semibold text-gray-900 mb-2">Pas encore de site créé</h3>
                <p class="lc-text-muted mb-6">Créez votre premier site pour commencer à localiser vos points de contrôle</p>
                <button @onclick="ShowCreateSite"
                        class="lc-btn lc-btn-primary inline-flex items-center">
                    <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
                    </svg>
                    Créer un site
                </button>
            </div>
        }
        else
        {
            <!-- Liste des sites -->
            <div class="grid md:grid-cols-2 lg:grid-cols-3 gap-6">
                @foreach (var site in sites)
                {
                    <div class="bg-white border border-gray-200 rounded-lg overflow-hidden hover:border-blue-300 transition-all flex flex-col @(site.IsActive ? "" : "opacity-60")">
                        <!-- Header -->
                        <div class="border-b border-gray-200 bg-gray-50 p-4">
                            <div class="flex justify-between items-start mb-2">
                                <div class="flex-1">
                                    <h3 class="text-lg font-semibold text-gray-900">@site.Name</h3>
                                </div>
                                @if (!site.IsActive)
                                {
                                    <span class="bg-gray-200 text-gray-600 px-2 py-1 rounded text-xs font-medium">
                                        Inactif
                                    </span>
                                }
                            </div>
                            <div class="flex justify-between items-center text-sm">
                                @if (!string.IsNullOrEmpty(site.Code))
                                {
                                    <p class="lc-text-muted">Code: <span class="font-mono">@site.Code</span></p>
                                }
                                <div class="flex items-center gap-3 lc-text-muted">
                                    <div class="flex items-center">
                                        <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3.75 21h16.5M4.5 3h15M5.25 3v18m13.5-18v18M9 6.75h1.5m-1.5 3h1.5m-1.5 3h1.5m3-6H15m-1.5 3H15m-1.5 3H15M9 21v-3.375c0-.621.504-1.125 1.125-1.125h3.75c.621 0 1.125.504 1.125 1.125V21" />
                                        </svg>
                                        <span><strong>@site.ZonesCount</strong> zone@(site.ZonesCount > 1 ? "s" : "")</span>
                                    </div>
                                    <div class="flex items-center">
                                        <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M18 18.72a9.094 9.094 0 003.741-.479 3 3 0 00-4.682-2.72m.94 3.198l.001.031c0 .225-.012.447-.037.666A11.944 11.944 0 0112 21c-2.17 0-4.207-.576-5.963-1.584A6.062 6.062 0 016 18.719m12 0a5.971 5.971 0 00-.941-3.197m0 0A5.995 5.995 0 0012 12.75a5.995 5.995 0 00-5.058 2.772m0 0a3 3 0 00-4.681 2.72 8.986 8.986 0 003.74.477m.94-3.197a5.971 5.971 0 00-.94 3.197M15 6.75a3 3 0 11-6 0 3 3 0 016 0zm6 3a2.25 2.25 0 11-4.5 0 2.25 2.25 0 014.5 0zm-13.5 0a2.25 2.25 0 11-4.5 0 2.25 2.25 0 014.5 0z" />
                                        </svg>
                                        <span><strong>@site.TeamsCount</strong> équipe@(site.TeamsCount > 1 ? "s" : "")</span>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Contenu -->
                        <div class="p-4 flex-grow flex flex-col">
                            <div class="flex-grow space-y-3">
                                <!-- Adresse -->
                                @if (!string.IsNullOrEmpty(site.City))
                                {
                                    <div class="space-y-1.5">
                                        @if (!string.IsNullOrEmpty(site.Address))
                                        {
                                            <div class="flex items-start text-sm lc-text-muted">
                                                <svg class="w-4 h-4 mr-2 mt-0.5 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 10.5a3 3 0 11-6 0 3 3 0 016 0z" />
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19.5 10.5c0 7.142-7.5 11.25-7.5 11.25S4.5 17.642 4.5 10.5a7.5 7.5 0 1115 0z" />
                                                </svg>
                                                <span>@site.Address</span>
                                            </div>
                                        }
                                        <div class="flex items-center text-sm text-gray-900">
                                            <svg class="w-4 h-4 mr-2 lc-text-muted" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.25 21h19.5m-18-18v18m10.5-18v18m6-13.5V21M6.75 6.75h.75m-.75 3h.75m-.75 3h.75m3-6h.75m-.75 3h.75m-.75 3h.75M6.75 21v-3.375c0-.621.504-1.125 1.125-1.125h2.25c.621 0 1.125.504 1.125 1.125V21M3 3h12m-.75 4.5H21m-3.75 3.75h.008v.008h-.008v-.008zm0 3h.008v.008h-.008v-.008zm0 3h.008v.008h-.008v-.008z" />
                                            </svg>
                                            <span class="font-medium">@site.PostalCode @site.City</span>
                                        </div>
                                    </div>
                                }

                                <!-- SIRET -->
                                @if (!string.IsNullOrEmpty(site.Siret))
                                {
                                    <div class="flex items-center text-sm lc-text-muted">
                                        <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4" />
                                        </svg>
                                        <span>SIRET: <span class="font-mono text-gray-900">@site.Siret</span></span>
                                    </div>
                                }

                                <!-- Contact -->
                                @if (!string.IsNullOrEmpty(site.ContactName))
                                {
                                    <div class="space-y-1.5">
                                        <div class="flex items-center text-sm lc-text-muted">
                                            <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                                            </svg>
                                            <span>Contact: <span class="text-gray-900 font-medium">@site.ContactName</span></span>
                                        </div>
                                        @if (!string.IsNullOrEmpty(site.ContactPhone))
                                        {
                                            <div class="flex items-center text-sm lc-text-muted">
                                                <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z" />
                                                </svg>
                                                <span>@site.ContactPhone</span>
                                            </div>
                                        }
                                    </div>
                                }
                            </div>

                            <!-- Actions -->
                            <div class="mt-4 pt-4 border-t border-gray-100 flex gap-2">
                                <button @onclick="() => ViewSite(site.Id)"
                                        class="flex-1 lc-btn lc-btn-secondary text-sm">
                                    Voir
                                </button>
                                <button @onclick="() => DeleteSite(site.Id, site.Name)"
                                        class="px-3 py-2 border border-red-200 text-red-600 rounded-lg hover:bg-red-50 transition">
                                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                                    </svg>
                                </button>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }

        @if (showSuccessMessage)
        {
            <div class="fixed bottom-4 right-4 bg-white border-l-4 border-green-600 px-4 py-3 rounded-lg shadow-lg flex items-center">
                <svg class="w-5 h-5 text-green-600 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
                <span class="text-gray-900 font-medium">@successMessage</span>
            </div>
        }
    </div>
</div>

@code {
    private List<SiteInfo> sites = new();
    private bool loading = true;
    private string errorMessage = "";
    private bool showSuccessMessage = false;
    private string successMessage = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadSites();
    }

    private async Task LoadSites()
    {
        loading = true;
        errorMessage = "";

        try
        {
            var token = await JS.InvokeAsync<string>("localStorage.getItem", "authToken");

            if (!string.IsNullOrEmpty(token))
            {
                token = token.Trim('"');
            }

            if (string.IsNullOrEmpty(token))
            {
                Navigation.NavigateTo("/login");
                return;
            }

            Http.DefaultRequestHeaders.Clear();
            Http.DefaultRequestHeaders.Add("Authorization", $"Bearer {token}");

            var response = await Http.GetAsync("api/sites");

            if (response.IsSuccessStatusCode)
            {
                sites = await response.Content.ReadFromJsonAsync<List<SiteInfo>>() ?? new();
                Console.WriteLine($"[DEBUG] {sites.Count} sites chargés");
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                errorMessage = $"Erreur {(int)response.StatusCode}: {errorContent}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Erreur: {ex.Message}";
        }
        finally
        {
            loading = false;
        }
    }

    private void GoToDashboard()
    {
        Navigation.NavigateTo("/dashboard");
    }

    private void ShowCreateSite()
    {
        Navigation.NavigateTo("/sites/create");
    }

    private void ViewSite(Guid siteId)
    {
        Navigation.NavigateTo($"/sites/{siteId}");
    }

    private void EditSite(Guid siteId)
    {
        Navigation.NavigateTo($"/sites/edit/{siteId}");
    }

    private async Task DeleteSite(Guid siteId, string siteName)
    {
        bool confirmed = await JS.InvokeAsync<bool>("confirm", $"Êtes-vous sûr de vouloir supprimer le site '{siteName}' ?");

        if (confirmed)
        {
            try
            {
                var token = await JS.InvokeAsync<string>("localStorage.getItem", "authToken");
                if (!string.IsNullOrEmpty(token))
                {
                    token = token.Trim('"');
                }

                Http.DefaultRequestHeaders.Clear();
                Http.DefaultRequestHeaders.Add("Authorization", $"Bearer {token}");

                var response = await Http.DeleteAsync($"api/sites/{siteId}");

                if (response.IsSuccessStatusCode)
                {
                    successMessage = "Site supprimé avec succès";
                    showSuccessMessage = true;
                    await LoadSites();

                    await Task.Delay(3000);
                    showSuccessMessage = false;
                }
                else
                {
                    var errorContent = await response.Content.ReadAsStringAsync();
                    errorMessage = $"Erreur lors de la suppression: {errorContent}";
                }
            }
            catch (Exception ex)
            {
                errorMessage = $"Erreur: {ex.Message}";
            }
        }
    }

    private class SiteInfo
    {
        public Guid Id { get; set; }
        public string Name { get; set; } = "";
        public string? Code { get; set; }
        public string? Address { get; set; }
        public string? City { get; set; }
        public string? PostalCode { get; set; }
        public string? Siret { get; set; }
        public string? ContactName { get; set; }
        public string? ContactPhone { get; set; }
        public bool IsActive { get; set; }
        public int ZonesCount { get; set; }
        public int TeamsCount { get; set; }
    }
}
