@page "/tasks-dashboard"
@using LaborControl.Web.Services
@inject AuthService AuthService
@inject NavigationManager Navigation
@inject HttpClient Http
@inject IJSRuntime JS

<PageTitle>Tableau de bord des t√¢ches - LABOR CONTROL</PageTitle>

<link href="css/professional.css" rel="stylesheet" />

<div class="min-h-screen bg-gray-50 py-8 px-4">
    <div class="max-w-7xl mx-auto">
        <!-- Header -->
        <div class="mb-8">
            <button @onclick="NavigateToDashboard"
                    class="lc-btn lc-btn-secondary inline-flex items-center mb-4">
                <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
                </svg>
                Retour
            </button>

            <div class="flex justify-between items-center flex-wrap gap-4">
                <div>
                    <h1 class="lc-heading-1">Tableau de bord des t√¢ches</h1>
                    <p class="lc-text-muted mt-1">G√©rez et suivez toutes vos t√¢ches planifi√©es</p>
                </div>
                <div class="flex gap-3 flex-wrap">
                    <a href="/calendar" class="lc-btn lc-btn-secondary inline-flex items-center">
                        <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                        </svg>
                        Vue Mois
                    </a>
                    <button @onclick="RefreshData" class="lc-btn lc-btn-secondary inline-flex items-center">
                        <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
                        </svg>
                        Actualiser
                    </button>
                    <a href="/create-task" class="lc-btn lc-btn-primary inline-flex items-center">
                        <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
                        </svg>
                        Nouvelle t√¢che
                    </a>
                </div>
            </div>
        </div>

        @if (isLoading)
        {
            <div class="flex justify-center items-center py-20">
                <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
            </div>
        }
        else
        {
            <!-- Statistiques -->
            <div class="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-4 mb-8">
                <div class="bg-white rounded-xl shadow-sm p-6">
                    <div class="text-sm text-gray-600 mb-1">Total aujourd'hui</div>
                    <div class="text-3xl font-bold text-gray-900">@stats.Total</div>
                </div>
                <div class="bg-yellow-50 rounded-xl shadow-sm p-6 border-2 border-yellow-200">
                    <div class="text-sm text-gray-600 mb-1">Planifi√©es</div>
                    <div class="text-3xl font-bold text-yellow-600">@stats.Pending</div>
                </div>
                <div class="bg-blue-50 rounded-xl shadow-sm p-6 border-2 border-blue-200">
                    <div class="text-sm text-gray-600 mb-1">En cours</div>
                    <div class="text-3xl font-bold text-blue-600">@stats.InProgress</div>
                </div>
                <div class="bg-green-50 rounded-xl shadow-sm p-6 border-2 border-green-200">
                    <div class="text-sm text-gray-600 mb-1">Termin√©es</div>
                    <div class="text-3xl font-bold text-green-600">@stats.Completed</div>
                </div>
                <div class="bg-red-50 rounded-xl shadow-sm p-6 border-2 border-red-200">
                    <div class="text-sm text-gray-600 mb-1">En retard</div>
                    <div class="text-3xl font-bold text-red-600">@stats.Overdue</div>
                </div>
                <div class="bg-gray-50 rounded-xl shadow-sm p-6 border-2 border-gray-200">
                    <div class="text-sm text-gray-600 mb-1">Annul√©es</div>
                    <div class="text-3xl font-bold text-gray-600">@stats.Cancelled</div>
                </div>
            </div>

            <!-- Filtres -->
            <div class="bg-white rounded-xl shadow-sm p-6 mb-6">
                <div class="grid md:grid-cols-5 gap-4">
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Type</label>
                        <select @bind="selectedTaskType" @bind:after="FilterTasks" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                            <option value="">Tous les types</option>
                            <option value="PROTOCOL">Protocoles</option>
                            <option value="MAINTENANCE">Maintenances</option>
                        </select>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Statut</label>
                        <select @bind="selectedStatus" @bind:after="FilterTasks" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                            <option value="">Tous les statuts</option>
                            <option value="PENDING">En attente</option>
                            <option value="IN_PROGRESS">En cours</option>
                            <option value="COMPLETED">Termin√©es</option>
                            <option value="CANCELLED">Annul√©es</option>
                        </select>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Technicien</label>
                        <select @bind="selectedUserId" @bind:after="FilterTasks" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                            <option value="">Tous les techniciens</option>
                            @foreach (var user in users)
                            {
                                <option value="@user.Id">@user.Prenom @user.Nom</option>
                            }
                        </select>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Site</label>
                        <select @bind="selectedSiteId" @bind:after="FilterTasks" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                            <option value="">Tous les sites</option>
                            @foreach (var site in sites)
                            {
                                <option value="@site.Id">@site.Name</option>
                            }
                        </select>
                    </div>
                    <div class="flex items-end">
                        <button @onclick="ClearFilters" class="w-full px-4 py-2 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300 transition">
                            R√©initialiser filtres
                        </button>
                    </div>
                </div>
            </div>

            <!-- Liste des t√¢ches -->
            <div class="bg-white rounded-xl shadow-sm overflow-hidden">
                <div class="px-6 py-4 border-b border-gray-200">
                    <h2 class="text-lg font-bold text-gray-900">
                        T√¢ches du jour (@filteredTasks.Count)
                    </h2>
                </div>

                @if (filteredTasks.Count == 0)
                {
                    <div class="px-6 py-12 text-center">
                        <div class="text-gray-400 text-5xl mb-4">üìã</div>
                        <p class="text-gray-600">Aucune t√¢che trouv√©e pour aujourd'hui</p>
                    </div>
                }
                else
                {
                    <div class="overflow-x-auto">
                        <table class="min-w-full divide-y divide-gray-200">
                            <thead class="bg-gray-50">
                                <tr>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Type</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Statut</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Horaire</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Localisation</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Zone</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Technicien</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Protocole/Gamme</th>
                                </tr>
                            </thead>
                            <tbody class="bg-white divide-y divide-gray-200">
                                @foreach (var task in filteredTasks)
                                {
                                    var isOverdue = IsTaskOverdue(task);
                                    var rowClass = isOverdue ? "bg-red-600 hover:bg-red-700 cursor-pointer" : "hover:bg-gray-50 cursor-pointer";
                                    var textClass = isOverdue ? "text-white font-bold" : "";
                                    <tr class="@rowClass" @onclick="() => ViewTaskDetails(task.Id)">
                                        <td class="px-6 py-4 whitespace-nowrap">
                                            <div class="flex items-center">
                                                <div class="w-3 h-3 rounded-full mr-2 @GetTaskTypeIndicatorClass(task)"></div>
                                                <span class="text-xs font-medium @textClass">
                                                    @(task.TaskType == "MAINTENANCE" ? "Maintenance" : "Protocole")
                                                </span>
                                            </div>
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap">
                                            @if (isOverdue)
                                            {
                                                <span class="px-3 py-1 inline-flex text-xs leading-5 font-bold rounded-full bg-white text-red-600">
                                                    EN RETARD
                                                </span>
                                            }
                                            else
                                            {
                                                @switch (task.Status)
                                            {
                                                case "PENDING":
                                                    <span class="px-3 py-1 inline-flex text-xs leading-5 font-semibold rounded-full bg-yellow-100 text-yellow-800">
                                                        Planifi√©e
                                                    </span>
                                                    break;
                                                case "IN_PROGRESS":
                                                    <span class="px-3 py-1 inline-flex text-xs leading-5 font-semibold rounded-full bg-blue-100 text-blue-800">
                                                        En cours
                                                    </span>
                                                    break;
                                                case "COMPLETED":
                                                    <span class="px-3 py-1 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800">
                                                        Termin√©e
                                                    </span>
                                                    break;
                                                case "OVERDUE":
                                                    <span class="px-3 py-1 inline-flex text-xs leading-5 font-semibold rounded-full bg-red-100 text-red-800">
                                                        En retard
                                                    </span>
                                                    break;
                                                case "CANCELLED":
                                                    <span class="px-3 py-1 inline-flex text-xs leading-5 font-semibold rounded-full bg-gray-100 text-gray-800">
                                                        Annul√©e
                                                    </span>
                                                    break;
                                            }
                                            }
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap text-sm @textClass">
                                            @if (task.ScheduledTimeStart.HasValue && task.ScheduledTimeEnd.HasValue)
                                            {
                                                <div>@task.ScheduledTimeStart.Value.ToString(@"hh\:mm") - @task.ScheduledTimeEnd.Value.ToString(@"hh\:mm")</div>
                                            }
                                            else
                                            {
                                                <span class="text-gray-400">Non planifi√©</span>
                                            }
                                        </td>
                                        <td class="px-6 py-4 text-sm @textClass">
                                            @GetTaskLocationName(task)
                                        </td>
                                        <td class="px-6 py-4 text-sm @textClass">
                                            @GetTaskZoneName(task)
                                        </td>
                                        <td class="px-6 py-4 text-sm @textClass">
                                            @if (task.User != null && !string.IsNullOrEmpty(task.User.Prenom) && !string.IsNullOrEmpty(task.User.Nom))
                                            {
                                                @($"{task.User.Prenom} {task.User.Nom}")
                                            }
                                            else
                                            {
                                                @("Non assign√©")
                                            }
                                        </td>
                                        <td class="px-6 py-4 text-sm @textClass">
                                            @GetTaskTemplateName(task)
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
            </div>

            <!-- Section t√¢ches en retard -->
            @if (overdueTasks.Count > 0)
            {
                <div class="mt-8 bg-red-50 border-2 border-red-200 rounded-xl p-6">
                    <h2 class="text-xl font-bold text-red-800 mb-4">
                        ‚ö†Ô∏è T√¢ches en retard (@overdueTasks.Count)
                    </h2>
                    <div class="space-y-2">
                        @foreach (var task in overdueTasks.Take(5))
                        {
                            <div class="bg-white rounded-lg p-4 flex justify-between items-center">
                                <div class="flex-1">
                                    <div class="flex items-center mb-1">
                                        <div class="w-2 h-2 rounded-full mr-2 @GetTaskTypeIndicatorClass(task)"></div>
                                        <div class="font-medium text-gray-900">@GetTaskLocationName(task)</div>
                                        <span class="ml-2 text-xs text-gray-500">(@(task.TaskType == "MAINTENANCE" ? "Maintenance" : "Protocole"))</span>
                                    </div>
                                    <div class="text-sm text-gray-600">
                                        Pr√©vu le @task.ScheduledDate.ToString("dd/MM/yyyy") - Technicien: @(task.User != null && !string.IsNullOrEmpty(task.User.Prenom) && !string.IsNullOrEmpty(task.User.Nom) ? $"{task.User.Prenom} {task.User.Nom}" : "N/A")
                                    </div>
                                </div>
                                <button @onclick="() => ViewTask(task.Id)" class="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition">
                                    G√©rer
                                </button>
                            </div>
                        }
                    </div>
                </div>
            }
        }
    </div>
</div>

<!-- Modal d'annulation -->
@if (showCancellationModal)
{
    <div class="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50 p-4" @onclick="CloseCancellationModal">
        <div class="bg-white rounded-xl shadow-2xl max-w-lg w-full" @onclick:stopPropagation>
            <!-- Header -->
            <div class="bg-orange-50 border-b border-orange-200 p-6">
                <div class="flex items-start justify-between">
                    <div class="flex items-center space-x-3">
                        <div class="flex-shrink-0">
                            <svg class="h-8 w-8 text-orange-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z"></path>
                            </svg>
                        </div>
                        <div>
                            <h3 class="text-xl font-bold text-gray-900">Annuler cette t√¢che</h3>
                            <p class="text-sm text-gray-600 mt-1">Un motif d'annulation doit √™tre fourni pour la tra√ßabilit√©</p>
                        </div>
                    </div>
                    <button @onclick="CloseCancellationModal" class="text-gray-400 hover:text-gray-600 transition">
                        <svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                        </svg>
                    </button>
                </div>
            </div>

            <!-- Body -->
            <div class="p-6">
                <div class="mb-4">
                    <label class="block text-sm font-medium text-gray-700 mb-2">
                        Motif d'annulation <span class="text-red-500">*</span>
                    </label>
                    <textarea @bind="cancellationReason" @bind:event="oninput"
                              rows="4"
                              placeholder="D√©crivez la raison de l'annulation (minimum 10 caract√®res)..."
                              class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-orange-500 resize-none"
                              maxlength="500"></textarea>
                    <p class="mt-1 text-xs text-gray-500">@cancellationReason.Length / 500 caract√®res</p>
                </div>

                @if (!string.IsNullOrEmpty(cancellationError))
                {
                    <div class="mb-4 p-3 bg-red-50 border border-red-200 rounded-lg">
                        <p class="text-sm text-red-700">@cancellationError</p>
                    </div>
                }

                <div class="bg-yellow-50 border border-yellow-200 rounded-lg p-4 mb-4">
                    <div class="flex">
                        <svg class="h-5 w-5 text-yellow-600 mt-0.5 mr-2" fill="currentColor" viewBox="0 0 20 20">
                            <path fill-rule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clip-rule="evenodd"></path>
                        </svg>
                        <div class="flex-1">
                            <h4 class="text-sm font-medium text-yellow-800">Important</h4>
                            <p class="text-sm text-yellow-700 mt-1">
                                L'annulation sera enregistr√©e dans le journal avec votre nom d'utilisateur et l'horodatage. Cette action est tra√ßable et ne peut pas √™tre annul√©e.
                            </p>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Footer -->
            <div class="bg-gray-50 border-t border-gray-200 p-6 flex justify-end space-x-3">
                <button @onclick="CloseCancellationModal" class="px-6 py-2 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300 transition">
                    Fermer
                </button>
                <button @onclick="CancelTask" class="px-6 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition">
                    Confirmer l'annulation
                </button>
            </div>
        </div>
    </div>
}

<!-- Modal de d√©tail de t√¢che -->
@if (showTaskDetailModal && selectedTask != null)
{
    <div class="fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50 p-4" @onclick="CloseTaskDetailModal">
        <div class="bg-white rounded-xl shadow-2xl max-w-2xl w-full max-h-[90vh] overflow-y-auto" @onclick:stopPropagation>
            <!-- Header -->
            <div class="bg-blue-50 border-b border-blue-200 p-6">
                <div class="flex items-start justify-between">
                    <div>
                        <h3 class="text-2xl font-bold text-gray-900">D√©tail de la t√¢che</h3>
                        <p class="text-sm text-gray-600 mt-1">@(selectedTask.ControlPoint?.Name ?? "N/A")</p>
                    </div>
                    <button @onclick="CloseTaskDetailModal" class="text-gray-400 hover:text-gray-600 transition">
                        <svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                        </svg>
                    </button>
                </div>
            </div>

            <!-- Body -->
            <div class="p-6">
                <!-- Statut -->
                <div class="mb-6">
                    <label class="block text-sm font-medium text-gray-700 mb-2">Statut</label>
                    <div>
                        @switch (selectedTask.Status)
                        {
                            case "PENDING":
                                <span class="px-4 py-2 inline-flex text-sm font-semibold rounded-full bg-yellow-100 text-yellow-800">
                                    Planifi√©e
                                </span>
                                break;
                            case "IN_PROGRESS":
                                <span class="px-4 py-2 inline-flex text-sm font-semibold rounded-full bg-blue-100 text-blue-800">
                                    En cours
                                </span>
                                break;
                            case "COMPLETED":
                                <span class="px-4 py-2 inline-flex text-sm font-semibold rounded-full bg-green-100 text-green-800">
                                    Termin√©e
                                </span>
                                break;
                            case "CANCELLED":
                                <span class="px-4 py-2 inline-flex text-sm font-semibold rounded-full bg-gray-100 text-gray-800">
                                    Annul√©e
                                </span>
                                break;
                        }
                    </div>
                </div>

                <!-- Date et horaires -->
                <div class="grid grid-cols-2 gap-4 mb-6">
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Date pr√©vue</label>
                        @if (isEditMode)
                        {
                            <input type="date" @bind="editScheduledDate" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500" />
                        }
                        else
                        {
                            <p class="text-lg text-gray-900">@selectedTask.ScheduledDate.ToString("dd/MM/yyyy")</p>
                        }
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Horaire</label>
                        @if (isEditMode)
                        {
                            <div class="grid grid-cols-2 gap-2">
                                <input type="time" @bind="editTimeStart" class="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500" />
                                <input type="time" @bind="editTimeEnd" class="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500" />
                            </div>
                        }
                        else if (selectedTask.ScheduledTimeStart.HasValue && selectedTask.ScheduledTimeEnd.HasValue)
                        {
                            <p class="text-lg text-gray-900">
                                @selectedTask.ScheduledTimeStart.Value.ToString(@"hh\:mm") - @selectedTask.ScheduledTimeEnd.Value.ToString(@"hh\:mm")
                            </p>
                        }
                        else
                        {
                            <p class="text-gray-400">Non planifi√©</p>
                        }
                    </div>
                </div>

                <!-- Point de contr√¥le et zone -->
                <div class="grid grid-cols-2 gap-4 mb-6">
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Point de contr√¥le</label>
                        <p class="text-lg text-gray-900">@(selectedTask.ControlPoint?.Name ?? "N/A")</p>
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Zone</label>
                        <p class="text-lg text-gray-900">@(selectedTask.ControlPoint?.Zone?.Name ?? "N/A")</p>
                    </div>
                </div>

                <!-- Technicien -->
                <div class="mb-6">
                    <label class="block text-sm font-medium text-gray-700 mb-2">Technicien assign√©</label>
                    @if (isEditMode)
                    {
                        <select @bind="editUserId" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500">
                            <option value="">S√©lectionnez un technicien</option>
                            @foreach (var user in users)
                            {
                                <option value="@user.Id">@user.Prenom @user.Nom</option>
                            }
                        </select>
                    }
                    else
                    {
                        <p class="text-lg text-gray-900">
                            @if (selectedTask.User != null && !string.IsNullOrEmpty(selectedTask.User.Prenom) && !string.IsNullOrEmpty(selectedTask.User.Nom))
                            {
                                @($"{selectedTask.User.Prenom} {selectedTask.User.Nom}")
                            }
                            else
                            {
                                <span class="text-gray-400">Non assign√©</span>
                            }
                        </p>
                    }
                </div>

                <!-- Gamme de maintenance -->
                @if (!string.IsNullOrEmpty(selectedTask.TaskTemplate?.Name))
                {
                    <div class="mb-6">
                        <label class="block text-sm font-medium text-gray-700 mb-2">Gamme de maintenance</label>
                        <p class="text-lg text-gray-900">@selectedTask.TaskTemplate.Name</p>
                    </div>
                }

                <!-- R√©currence -->
                @if (!string.IsNullOrEmpty(selectedTask.Recurrence) && selectedTask.Recurrence != "ONCE")
                {
                    <div class="mb-6">
                        <label class="block text-sm font-medium text-gray-700 mb-2">R√©currence</label>
                        <p class="text-lg text-gray-900">
                            @switch (selectedTask.Recurrence)
                            {
                                case "DAILY": <span>Quotidienne</span> break;
                                case "WEEKLY": <span>Hebdomadaire</span> break;
                                case "MONTHLY": <span>Mensuelle</span> break;
                                case "QUARTERLY": <span>Trimestrielle</span> break;
                                case "BIANNUAL": <span>Semestrielle</span> break;
                                case "YEARLY": <span>Annuelle</span> break;
                                default: <span>@selectedTask.Recurrence</span> break;
                            }
                        </p>
                    </div>
                }
            </div>

            <!-- Footer avec boutons -->
            <div class="bg-gray-50 border-t border-gray-200 p-6 flex justify-between">
                <div class="flex space-x-3">
                    @if (selectedTask.Status == "PENDING")
                    {
                        <button @onclick="OpenCancellationFromDetail"
                                class="px-6 py-2 bg-orange-600 text-white rounded-lg hover:bg-orange-700 transition">
                            Annuler la t√¢che
                        </button>
                    }
                </div>
                <div class="flex space-x-3">
                    <button @onclick="CloseTaskDetailModal" class="px-6 py-2 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300 transition">
                        Fermer
                    </button>
                    @if (!isEditMode && selectedTask.Status == "PENDING")
                    {
                        <button @onclick="EditTask" class="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition">
                            Modifier
                        </button>
                    }
                    @if (isEditMode)
                    {
                        <button @onclick="CancelEdit" class="px-6 py-2 bg-gray-400 text-white rounded-lg hover:bg-gray-500 transition">
                            Annuler
                        </button>
                        <button @onclick="SaveTaskChanges" class="px-6 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition">
                            Enregistrer
                        </button>
                    }
                </div>
            </div>
        </div>
    </div>
}

@code {
    private bool isLoading = true;
    private List<ScheduledTaskDto> allTasks = new();
    private List<ScheduledTaskDto> filteredTasks = new();
    private List<ScheduledTaskDto> overdueTasks = new();
    private List<UserDto> users = new();
    private List<SiteDto> sites = new();

    private string selectedStatus = "";
    private string selectedUserId = "";
    private string selectedSiteId = "";
    private string selectedTaskType = "";

    private TaskStats stats = new();

    protected override async Task OnInitializedAsync()
    {
        var isAuthenticated = await AuthService.IsAuthenticatedAsync();
        if (!isAuthenticated)
        {
            Navigation.NavigateTo("/login");
            return;
        }

        await LoadData();
    }

    private async Task LoadData()
    {
        isLoading = true;
        try
        {
            var token = await AuthService.GetTokenAsync();
            if (string.IsNullOrEmpty(token)) return;

            Http.DefaultRequestHeaders.Authorization =
                new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            // Charger les stats
            var statsResponse = await Http.GetAsync($"api/tasks/stats?date={DateTime.UtcNow:yyyy-MM-dd}");
            if (statsResponse.IsSuccessStatusCode)
            {
                stats = await statsResponse.Content.ReadFromJsonAsync<TaskStats>() ?? new TaskStats();
            }

            // Charger les t√¢ches du jour
            Console.WriteLine($"DEBUG: Chargement des t√¢ches du jour...");
            var todayResponse = await Http.GetAsync("api/tasks/today");
            Console.WriteLine($"DEBUG: Response status = {todayResponse.StatusCode}");
            if (todayResponse.IsSuccessStatusCode)
            {
                allTasks = await todayResponse.Content.ReadFromJsonAsync<List<ScheduledTaskDto>>() ?? new();
                filteredTasks = new List<ScheduledTaskDto>(allTasks);
                Console.WriteLine($"DEBUG: {allTasks.Count} t√¢ches charg√©es");
                foreach (var task in allTasks)
                {
                    var cpSiteId = task.ControlPoint?.SiteId;
                    var zoneSiteId = task.ControlPoint?.Zone?.SiteId;
                    var finalSiteId = cpSiteId ?? zoneSiteId;
                    Console.WriteLine($"  - T√¢che: {task.ControlPoint?.Name ?? "N/A"}, CP.SiteId: {cpSiteId}, Zone.SiteId: {zoneSiteId}, Final: {finalSiteId}");
                }
            }
            else
            {
                var errorContent = await todayResponse.Content.ReadAsStringAsync();
                Console.WriteLine($"DEBUG: Erreur lors du chargement des t√¢ches: {errorContent}");
            }

            // Charger les t√¢ches en retard
            var overdueResponse = await Http.GetAsync("api/tasks/overdue");
            if (overdueResponse.IsSuccessStatusCode)
            {
                overdueTasks = await overdueResponse.Content.ReadFromJsonAsync<List<ScheduledTaskDto>>() ?? new();
                Console.WriteLine($"DEBUG: {overdueTasks.Count} t√¢ches en retard charg√©es");
            }

            // Recalculer les stats c√¥t√© frontend APR√àS avoir charg√© les t√¢ches en retard
            UpdateStats();

            // Charger les utilisateurs (pour le filtre)
            var usersResponse = await Http.GetAsync("api/users");
            if (usersResponse.IsSuccessStatusCode)
            {
                var allUsers = await usersResponse.Content.ReadFromJsonAsync<List<UserDto>>() ?? new();
                // Filtrer uniquement les techniciens
                users = allUsers.Where(u => u.Role == "Technician").ToList();
                Console.WriteLine($"DEBUG: {users.Count} techniciens charg√©s sur {allUsers.Count} utilisateurs");
            }

            // Charger les sites (pour le filtre)
            var sitesResponse = await Http.GetAsync("api/sites");
            if (sitesResponse.IsSuccessStatusCode)
            {
                sites = await sitesResponse.Content.ReadFromJsonAsync<List<SiteDto>>() ?? new();
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Erreur lors du chargement des donn√©es: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private void FilterTasks()
    {
        Console.WriteLine($"DEBUG FilterTasks: selectedSiteId = '{selectedSiteId}', selectedTaskType = '{selectedTaskType}'");

        filteredTasks = allTasks.Where(t =>
        {
            // Filtre par type de t√¢che
            if (!string.IsNullOrEmpty(selectedTaskType) && t.TaskType != selectedTaskType)
                return false;

            // Filtre par statut
            if (!string.IsNullOrEmpty(selectedStatus) && t.Status != selectedStatus)
                return false;

            // Filtre par technicien
            if (!string.IsNullOrEmpty(selectedUserId) && t.UserId.ToString() != selectedUserId)
                return false;

            // Filtre par site - diff√©rentes logiques selon le type de t√¢che
            if (!string.IsNullOrEmpty(selectedSiteId))
            {
                Guid? taskSiteId = null;
                if (t.TaskType == "MAINTENANCE")
                {
                    // Pour les maintenances : via Asset.Zone.SiteId
                    taskSiteId = t.Asset?.Zone?.SiteId;
                }
                else
                {
                    // Pour les protocoles : via ControlPoint.SiteId ou ControlPoint.Zone.SiteId
                    taskSiteId = t.ControlPoint?.SiteId ?? t.ControlPoint?.Zone?.SiteId;
                }

                Console.WriteLine($"  - T√¢che {(t.TaskType == "MAINTENANCE" ? t.Asset?.Name : t.ControlPoint?.Name)}: taskSiteId = {taskSiteId}, selectedSiteId = {selectedSiteId}, Match = {taskSiteId?.ToString() == selectedSiteId}");
                if (taskSiteId?.ToString() != selectedSiteId)
                    return false;
            }

            return true;
        }).ToList();

        Console.WriteLine($"DEBUG FilterTasks: {filteredTasks.Count} t√¢ches apr√®s filtrage");
    }

    private void ClearFilters()
    {
        selectedStatus = "";
        selectedUserId = "";
        selectedSiteId = "";
        selectedTaskType = "";
        FilterTasks();
    }

    private async Task RefreshData()
    {
        await LoadData();
    }

    private void ViewTask(Guid taskId)
    {
        Navigation.NavigateTo($"/task-detail/{taskId}");
    }

    private void ViewTaskDetails(Guid taskId)
    {
        selectedTask = allTasks.FirstOrDefault(t => t.Id == taskId);
        if (selectedTask != null)
        {
            showTaskDetailModal = true;
        }
    }

    private void CloseTaskDetailModal()
    {
        showTaskDetailModal = false;
        selectedTask = null;
        isEditMode = false;
    }

    private bool isEditMode = false;

    private void OpenCancellationFromDetail()
    {
        if (selectedTask != null)
        {
            var taskId = selectedTask.Id;
            CloseTaskDetailModal();
            ShowCancellationModal(taskId);
        }
    }

    private void EditTask()
    {
        if (selectedTask != null)
        {
            // Initialiser les champs d'√©dition avec les valeurs actuelles
            editUserId = selectedTask.UserId.ToString();
            editScheduledDate = selectedTask.ScheduledDate.Date;
            editTimeStart = selectedTask.ScheduledTimeStart.HasValue
                ? TimeOnly.FromTimeSpan(selectedTask.ScheduledTimeStart.Value)
                : null;
            editTimeEnd = selectedTask.ScheduledTimeEnd.HasValue
                ? TimeOnly.FromTimeSpan(selectedTask.ScheduledTimeEnd.Value)
                : null;

            isEditMode = true;
            StateHasChanged();
        }
    }

    private void CancelEdit()
    {
        isEditMode = false;
        StateHasChanged();
    }

    private async Task SaveTaskChanges()
    {
        if (selectedTask == null) return;

        try
        {
            var token = await AuthService.GetTokenAsync();
            Http.DefaultRequestHeaders.Authorization =
                new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            // Validation
            if (string.IsNullOrEmpty(editUserId))
            {
                await JS.InvokeVoidAsync("alert", "Veuillez s√©lectionner un technicien");
                return;
            }

            if (!editTimeStart.HasValue || !editTimeEnd.HasValue)
            {
                await JS.InvokeVoidAsync("alert", "Veuillez renseigner les horaires");
                return;
            }

            // V√©rifier la disponibilit√© si technicien, date ou horaires ont chang√©
            bool needsAvailabilityCheck =
                editUserId != selectedTask.UserId.ToString() ||
                editScheduledDate != selectedTask.ScheduledDate.Date ||
                editTimeStart.Value.ToTimeSpan() != selectedTask.ScheduledTimeStart ||
                editTimeEnd.Value.ToTimeSpan() != selectedTask.ScheduledTimeEnd;

            if (needsAvailabilityCheck)
            {
                // Appeler l'endpoint de v√©rification de disponibilit√©
                var availabilityRequest = new
                {
                    UserId = Guid.Parse(editUserId),
                    ScheduledDate = DateTime.SpecifyKind(editScheduledDate, DateTimeKind.Utc),
                    ScheduledEndDate = (DateTime?)null,
                    ScheduledTimeStart = editTimeStart.Value.ToTimeSpan(),
                    ScheduledTimeEnd = editTimeEnd.Value.ToTimeSpan(),
                    ExcludeTaskId = selectedTask.Id // Important: exclure la t√¢che en cours d'√©dition
                };

                var availabilityResponse = await Http.PostAsJsonAsync("api/tasks/check-availability", availabilityRequest);

                if (availabilityResponse.IsSuccessStatusCode)
                {
                    var availabilityResult = await availabilityResponse.Content.ReadFromJsonAsync<AvailabilityResponse>();

                    if (availabilityResult != null && !availabilityResult.IsAvailable)
                    {
                        var confirmed = await JS.InvokeAsync<bool>("confirm",
                            $"Attention: Le technicien a {availabilityResult.ConflictCount} conflit(s) d'horaire √† cette date/heure. Voulez-vous continuer quand m√™me ?");

                        if (!confirmed)
                        {
                            return;
                        }
                    }
                }
            }

            // Mettre √† jour la t√¢che
            var updateRequest = new
            {
                UserId = Guid.Parse(editUserId),
                ScheduledDate = DateTime.SpecifyKind(editScheduledDate, DateTimeKind.Utc),
                ScheduledTimeStart = editTimeStart.Value.ToTimeSpan(),
                ScheduledTimeEnd = editTimeEnd.Value.ToTimeSpan()
            };

            var response = await Http.PutAsJsonAsync($"api/tasks/{selectedTask.Id}", updateRequest);

            if (response.IsSuccessStatusCode)
            {
                await JS.InvokeVoidAsync("showNotification", "T√¢che modifi√©e avec succ√®s");
                isEditMode = false;
                CloseTaskDetailModal();
                await LoadData();
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                await JS.InvokeVoidAsync("alert", $"Erreur lors de la modification: {error}");
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Erreur: {ex.Message}");
        }
    }

    private class AvailabilityResponse
    {
        public bool IsAvailable { get; set; }
        public int ConflictCount { get; set; }
    }

    private async Task DeleteTask()
    {
        if (selectedTask != null)
        {
            var confirmed = await JS.InvokeAsync<bool>("confirm", "√ätes-vous s√ªr de vouloir supprimer cette t√¢che ?");
            if (confirmed)
            {
                try
                {
                    var token = await AuthService.GetTokenAsync();
                    Http.DefaultRequestHeaders.Authorization =
                        new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

                    var response = await Http.DeleteAsync($"api/tasks/{selectedTask.Id}");
                    if (response.IsSuccessStatusCode)
                    {
                        await JS.InvokeVoidAsync("showNotification", "T√¢che supprim√©e avec succ√®s");
                        CloseTaskDetailModal();
                        await LoadData();
                    }
                    else
                    {
                        await JS.InvokeVoidAsync("alert", "Erreur lors de la suppression de la t√¢che");
                    }
                }
                catch (Exception ex)
                {
                    await JS.InvokeVoidAsync("alert", $"Erreur: {ex.Message}");
                }
            }
        }
    }

    private bool IsTaskOverdue(ScheduledTaskDto task)
    {
        // Une t√¢che est en retard si elle est PENDING et que l'heure de fin est d√©pass√©e
        if (task.Status != "PENDING") return false;

        if (!task.ScheduledTimeEnd.HasValue) return false;

        var now = DateTime.Now;
        var taskDateTime = task.ScheduledDate.Date + task.ScheduledTimeEnd.Value;

        return now > taskDateTime;
    }

    private void UpdateStats()
    {
        stats.Total = allTasks.Count;
        stats.Pending = allTasks.Count(t => t.Status == "PENDING" && !IsTaskOverdue(t));
        stats.InProgress = allTasks.Count(t => t.Status == "IN_PROGRESS");
        stats.Completed = allTasks.Count(t => t.Status == "COMPLETED");
        stats.Overdue = overdueTasks.Count; // Utiliser le nombre de t√¢ches en retard charg√©es depuis l'API
        stats.Cancelled = allTasks.Count(t => t.Status == "CANCELLED");
    }

    private Guid taskToCancel;
    private string cancellationReason = string.Empty;
    private bool showCancellationModal = false;
    private string cancellationError = string.Empty;

    private bool showTaskDetailModal = false;
    private ScheduledTaskDto? selectedTask = null;

    // Variables pour l'√©dition
    private string editUserId = string.Empty;
    private DateTime editScheduledDate = DateTime.Today;
    private TimeOnly? editTimeStart = null;
    private TimeOnly? editTimeEnd = null;

    private void ShowCancellationModal(Guid taskId)
    {
        taskToCancel = taskId;
        cancellationReason = string.Empty;
        cancellationError = string.Empty;
        showCancellationModal = true;
    }

    private void CloseCancellationModal()
    {
        showCancellationModal = false;
        taskToCancel = Guid.Empty;
        cancellationReason = string.Empty;
        cancellationError = string.Empty;
    }

    private async Task CancelTask()
    {
        // Validation
        if (string.IsNullOrWhiteSpace(cancellationReason))
        {
            cancellationError = "Le motif d'annulation est obligatoire";
            return;
        }

        if (cancellationReason.Length < 10)
        {
            cancellationError = "Le motif doit contenir au moins 10 caract√®res";
            return;
        }

        try
        {
            var token = await AuthService.GetTokenAsync();
            Http.DefaultRequestHeaders.Authorization =
                new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            var request = new { CancellationReason = cancellationReason };
            var response = await Http.PostAsJsonAsync($"api/tasks/{taskToCancel}/cancel", request);

            if (response.IsSuccessStatusCode)
            {
                await JS.InvokeVoidAsync("showNotification", "Annulation de la t√¢che prise en compte");
                CloseCancellationModal();
                await LoadData();
            }
            else
            {
                var error = await response.Content.ReadFromJsonAsync<ErrorResponse>();
                cancellationError = error?.error ?? "Une erreur est survenue";
            }
        }
        catch (Exception ex)
        {
            cancellationError = $"Erreur: {ex.Message}";
        }
    }

    private class ErrorResponse
    {
        public string error { get; set; } = string.Empty;
    }

    // DTOs
    private class ScheduledTaskDto
    {
        public Guid Id { get; set; }
        public Guid CustomerId { get; set; }
        public Guid UserId { get; set; }
        public Guid ControlPointId { get; set; }
        public Guid? TaskTemplateId { get; set; }
        public DateTime ScheduledDate { get; set; }
        public TimeSpan? ScheduledTimeStart { get; set; }
        public TimeSpan? ScheduledTimeEnd { get; set; }
        public string Status { get; set; } = "PENDING";
        public string? Recurrence { get; set; }
        public string TaskType { get; set; } = "PROTOCOL";
        public UserDto? User { get; set; }
        public ControlPointDto? ControlPoint { get; set; }
        public TaskTemplateDto? TaskTemplate { get; set; }
        public AssetDto? Asset { get; set; }
        public MaintenanceScheduleDto? MaintenanceSchedule { get; set; }
    }

    private class UserDto
    {
        public Guid Id { get; set; }
        public string Email { get; set; } = string.Empty;
        public string Prenom { get; set; } = string.Empty;
        public string Nom { get; set; } = string.Empty;
        public string Role { get; set; } = string.Empty;
    }

    private class ControlPointDto
    {
        public Guid Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public Guid? SiteId { get; set; }
        public ZoneDto? Zone { get; set; }
    }

    private class ZoneDto
    {
        public Guid Id { get; set; }
        public Guid SiteId { get; set; }
        public string Name { get; set; } = string.Empty;
    }

    private class SiteDto
    {
        public Guid Id { get; set; }
        public string Name { get; set; } = string.Empty;
    }

    private class TaskTemplateDto
    {
        public Guid Id { get; set; }
        public string Name { get; set; } = string.Empty;
    }

    private class AssetDto
    {
        public string Name { get; set; } = string.Empty;
        public ZoneDto? Zone { get; set; }
    }

    private class MaintenanceScheduleDto
    {
        public string Name { get; set; } = string.Empty;
        public string Type { get; set; } = string.Empty;
        public string Priority { get; set; } = string.Empty;
    }

    private class TaskStats
    {
        public DateTime Date { get; set; }
        public int Total { get; set; }
        public int Pending { get; set; }
        public int InProgress { get; set; }
        public int Completed { get; set; }
        public int Overdue { get; set; }
        public int Cancelled { get; set; }
    }

    // Helper methods
    private string GetTaskTypeIndicatorClass(ScheduledTaskDto task)
    {
        return task.TaskType == "MAINTENANCE" ? "bg-orange-600" : "bg-blue-600";
    }

    private string GetTaskLocationName(ScheduledTaskDto task)
    {
        if (task.TaskType == "MAINTENANCE")
        {
            return task.Asset?.Name ?? "√âquipement inconnu";
        }
        else
        {
            return task.ControlPoint?.Name ?? "Point de contr√¥le inconnu";
        }
    }

    private string GetTaskZoneName(ScheduledTaskDto task)
    {
        if (task.TaskType == "MAINTENANCE")
        {
            return task.Asset?.Zone?.Name ?? "N/A";
        }
        else
        {
            return task.ControlPoint?.Zone?.Name ?? "N/A";
        }
    }

    private string GetTaskTemplateName(ScheduledTaskDto task)
    {
        if (task.TaskType == "MAINTENANCE")
        {
            return task.MaintenanceSchedule?.Name ?? task.TaskTemplate?.Name ?? "-";
        }
        else
        {
            return task.TaskTemplate?.Name ?? "-";
        }
    }

    private void NavigateToDashboard()
    {
        Navigation.NavigateTo("/dashboard");
    }
}
