@page "/assets/edit/{id:guid}"
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JS

<PageTitle>Modifier l'équipement - Labor Control</PageTitle>

<div class="min-h-screen bg-gray-50 py-8">
    <div class="max-w-4xl mx-auto px-4">
        <!-- Header -->
        <div class="mb-6">
            <button @onclick="GoBack"
                    class="inline-flex items-center px-4 py-2 bg-white text-gray-700 rounded-lg font-semibold hover:bg-gray-100 transition-all duration-300 shadow-md mb-4">
                ← Retour
            </button>
            <h1 class="text-3xl font-bold text-gray-900">Modifier l'équipement</h1>
            <p class="text-gray-600 mt-2">Mettez à jour les informations de l'équipement</p>
        </div>

        @if (loading)
        {
            <div class="text-center py-12">
                <div class="inline-block animate-spin rounded-full h-12 w-12 border-b-2 border-green-600"></div>
                <p class="mt-4 text-gray-600">Chargement...</p>
            </div>
        }
        else
        {
            <!-- Formulaire -->
            <div class="bg-white rounded-xl shadow-lg p-8">
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="bg-red-50 border-l-4 border-red-500 p-4 rounded-lg mb-6">
                        <p class="text-red-700">@errorMessage</p>
                    </div>
                }

                <form @onsubmit="HandleSubmit" class="space-y-6">
                    <!-- Nom -->
                    <div>
                        <label class="block text-sm font-semibold text-gray-700 mb-2">
                            Nom de l'équipement <span class="text-red-500">*</span>
                        </label>
                        <input type="text"
                               @bind="name"
                               required
                               class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent"
                               placeholder="Ex: Échangeur E-101, Compresseur C-01" />
                    </div>

                    <!-- Code -->
                    <div>
                        <label class="block text-sm font-semibold text-gray-700 mb-2">
                            Code
                        </label>
                        <input type="text"
                               @bind="code"
                               class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent"
                               placeholder="Ex: E-101, C-01" />
                    </div>

                    <!-- Zone -->
                    <div>
                        <label class="block text-sm font-semibold text-gray-700 mb-2">
                            Zone <span class="text-red-500">*</span>
                        </label>
                        @if (loadingZones)
                        {
                            <div class="w-full px-4 py-3 border border-gray-300 rounded-lg bg-gray-50 text-gray-500">
                                Chargement des zones...
                            </div>
                        }
                        else
                        {
                            <select @bind="selectedZoneId"
                                    required
                                    class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent">
                                <option value="">-- Sélectionner une zone --</option>
                                @foreach (var zone in availableZones)
                                {
                                    <option value="@zone.Id">@zone.SiteName / @zone.FullPath</option>
                                }
                            </select>
                        }
                    </div>

                    <!-- Type et Catégorie -->
                    <div class="grid grid-cols-2 gap-4">
                        <div>
                            <label class="block text-sm font-semibold text-gray-700 mb-2">
                                Type <span class="text-red-500">*</span>
                            </label>
                            <select @bind="type"
                                    required
                                    class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent">
                                <option value="">-- Sélectionner --</option>
                                <option value="EXCHANGER">Échangeur</option>
                                <option value="PUMP">Pompe</option>
                                <option value="COMPRESSOR">Compresseur</option>
                                <option value="VALVE">Vanne</option>
                                <option value="MOTOR">Moteur</option>
                                <option value="TANK">Réservoir</option>
                                <option value="FILTER">Filtre</option>
                                <option value="SENSOR">Capteur</option>
                                <option value="OTHER">Autre</option>
                            </select>
                        </div>

                        <div>
                            <label class="block text-sm font-semibold text-gray-700 mb-2">
                                Catégorie
                            </label>
                            <select @bind="category"
                                    class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent">
                                <option value="">-- Aucune --</option>
                                <option value="CRITICAL">Critique</option>
                                <option value="STANDARD">Standard</option>
                                <option value="SAFETY">Sécurité</option>
                            </select>
                        </div>
                    </div>

                    <!-- Statut -->
                    <div>
                        <label class="block text-sm font-semibold text-gray-700 mb-2">
                            Statut
                        </label>
                        <select @bind="status"
                                class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent">
                            <option value="">-- Aucun --</option>
                            <option value="OPERATIONAL">Opérationnel</option>
                            <option value="MAINTENANCE">En maintenance</option>
                            <option value="STOPPED">Arrêté</option>
                        </select>
                    </div>

                    <!-- Équipement parent -->
                    <div>
                        <label class="block text-sm font-semibold text-gray-700 mb-2">
                            Équipement parent
                        </label>
                        @if (loadingAssets)
                        {
                            <div class="w-full px-4 py-3 border border-gray-300 rounded-lg bg-gray-50 text-gray-500">
                                Chargement des équipements...
                            </div>
                        }
                        else
                        {
                            <select @bind="selectedParentAssetId"
                                    class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent">
                                <option value="">-- Aucun (équipement principal) --</option>
                                @foreach (var asset in availableAssets.Where(a => a.Id != Id))
                                {
                                    <option value="@asset.Id">@GetAssetHierarchyName(asset)</option>
                                }
                            </select>
                        }
                        <p class="text-xs text-gray-500 mt-1">
                            Sélectionnez un équipement parent pour créer une hiérarchie (ex: Manomètre sous Compresseur)
                        </p>
                    </div>

                    <!-- Fabricant, Modèle, N° de série -->
                    <div class="grid grid-cols-3 gap-4">
                        <div>
                            <label class="block text-sm font-semibold text-gray-700 mb-2">
                                Fabricant
                            </label>
                            <input type="text"
                                   @bind="manufacturer"
                                   class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent"
                                   placeholder="Ex: Schneider" />
                        </div>

                        <div>
                            <label class="block text-sm font-semibold text-gray-700 mb-2">
                                Modèle
                            </label>
                            <input type="text"
                                   @bind="model"
                                   class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent"
                                   placeholder="Ex: ABC-123" />
                        </div>

                        <div>
                            <label class="block text-sm font-semibold text-gray-700 mb-2">
                                N° de série
                            </label>
                            <input type="text"
                                   @bind="serialNumber"
                                   class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent"
                                   placeholder="Ex: SN123456" />
                        </div>
                    </div>

                    <!-- Statut actif -->
                    <div>
                        <label class="flex items-center">
                            <input type="checkbox"
                                   @bind="isActive"
                                   class="w-4 h-4 text-green-600 border-gray-300 rounded focus:ring-green-500" />
                            <span class="ml-2 text-sm font-semibold text-gray-700">Équipement actif</span>
                        </label>
                    </div>

                    <!-- Boutons -->
                    <div class="flex gap-4 pt-6">
                        <button type="submit"
                                disabled="@isSubmitting"
                                class="flex-1 py-3 bg-green-600 text-white rounded-lg font-semibold hover:bg-green-700 transition disabled:bg-gray-400">
                            @(isSubmitting ? "Enregistrement en cours..." : "✓ Enregistrer les modifications")
                        </button>
                        <button type="button"
                                @onclick="GoBack"
                                class="px-6 py-3 bg-gray-200 text-gray-700 rounded-lg font-semibold hover:bg-gray-300 transition">
                            Annuler
                        </button>
                    </div>
                </form>
            </div>
        }
    </div>
</div>

@code {
    [Parameter]
    public Guid Id { get; set; }

    private Guid zoneId;
    private string selectedZoneId = "";
    private string name = "";
    private string code = "";
    private string type = "";
    private string category = "";
    private string status = "";
    private string selectedParentAssetId = "";
    private string manufacturer = "";
    private string model = "";
    private string serialNumber = "";
    private bool isActive = true;
    private bool loading = true;
    private bool loadingZones = true;
    private bool loadingAssets = true;
    private bool isSubmitting = false;
    private string errorMessage = "";
    private List<ZoneInfo> availableZones = new();
    private List<AssetInfo> availableAssets = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadZones();
        await LoadAsset();
    }

    private async Task LoadAsset()
    {
        loading = true;
        errorMessage = "";

        try
        {
            var token = await JS.InvokeAsync<string>("localStorage.getItem", "authToken");
            if (!string.IsNullOrEmpty(token))
            {
                token = token.Trim('"');
            }

            if (string.IsNullOrEmpty(token))
            {
                Navigation.NavigateTo("/login");
                return;
            }

            Http.DefaultRequestHeaders.Clear();
            Http.DefaultRequestHeaders.Add("Authorization", $"Bearer {token}");

            var response = await Http.GetAsync($"api/assets/{Id}");

            if (response.IsSuccessStatusCode)
            {
                var asset = await response.Content.ReadFromJsonAsync<AssetDto>();

                if (asset != null)
                {
                    zoneId = asset.ZoneId;
                    selectedZoneId = asset.ZoneId.ToString();
                    name = asset.Name;
                    code = asset.Code ?? "";
                    type = asset.Type;
                    category = asset.Category ?? "";
                    status = asset.Status ?? "";
                    selectedParentAssetId = asset.ParentAssetId?.ToString() ?? "";
                    manufacturer = asset.Manufacturer ?? "";
                    model = asset.Model ?? "";
                    serialNumber = asset.SerialNumber ?? "";
                    isActive = asset.IsActive;

                    // Charger les équipements disponibles pour le parent
                    await LoadAvailableAssets();
                }
            }
            else
            {
                errorMessage = $"Erreur {(int)response.StatusCode}: Équipement introuvable";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Erreur: {ex.Message}";
        }
        finally
        {
            loading = false;
        }
    }

    private async Task LoadZones()
    {
        loadingZones = true;

        try
        {
            var token = await JS.InvokeAsync<string>("localStorage.getItem", "authToken");
            if (!string.IsNullOrEmpty(token))
            {
                token = token.Trim('"');
            }

            if (string.IsNullOrEmpty(token))
            {
                return;
            }

            Http.DefaultRequestHeaders.Clear();
            Http.DefaultRequestHeaders.Add("Authorization", $"Bearer {token}");

            var response = await Http.GetAsync("api/zones");

            if (response.IsSuccessStatusCode)
            {
                availableZones = await response.Content.ReadFromJsonAsync<List<ZoneInfo>>() ?? new();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[ERROR] Erreur lors du chargement des zones: {ex.Message}");
        }
        finally
        {
            loadingZones = false;
        }
    }

    private async Task LoadAvailableAssets()
    {
        loadingAssets = true;

        try
        {
            var token = await JS.InvokeAsync<string>("localStorage.getItem", "authToken");
            if (!string.IsNullOrEmpty(token))
            {
                token = token.Trim('"');
            }

            if (string.IsNullOrEmpty(token))
            {
                return;
            }

            Http.DefaultRequestHeaders.Clear();
            Http.DefaultRequestHeaders.Add("Authorization", $"Bearer {token}");

            var response = await Http.GetAsync($"api/assets?zoneId={zoneId}");

            if (response.IsSuccessStatusCode)
            {
                availableAssets = await response.Content.ReadFromJsonAsync<List<AssetInfo>>() ?? new();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[ERROR] Erreur lors du chargement des équipements: {ex.Message}");
        }
        finally
        {
            loadingAssets = false;
        }
    }

    private string GetAssetHierarchyName(AssetInfo asset)
    {
        var prefix = new string('─', asset.Level * 2);
        return asset.Level > 0 ? $"{prefix} {asset.Name}" : asset.Name;
    }

    private async Task GoBack()
    {
        await JS.InvokeVoidAsync("history.back");
    }

    private async Task HandleSubmit()
    {
        if (string.IsNullOrWhiteSpace(name))
        {
            errorMessage = "Le nom de l'équipement est obligatoire";
            return;
        }

        if (string.IsNullOrWhiteSpace(type))
        {
            errorMessage = "Le type est obligatoire";
            return;
        }

        isSubmitting = true;
        errorMessage = "";

        try
        {
            var token = await JS.InvokeAsync<string>("localStorage.getItem", "authToken");
            if (!string.IsNullOrEmpty(token))
            {
                token = token.Trim('"');
            }

            if (string.IsNullOrEmpty(token))
            {
                Navigation.NavigateTo("/login");
                return;
            }

            if (string.IsNullOrWhiteSpace(selectedZoneId))
            {
                errorMessage = "La zone est obligatoire";
                return;
            }

            // Formatage des champs selon les règles
            var formattedManufacturer = FormatAllWordsUpperCase(manufacturer);
            var formattedType = FormatAllWordsUpperCase(type);
            var formattedName = FormatFirstLetterUpperCase(name);
            var formattedCode = FormatFirstLetterUpperCase(code);
            var formattedModel = FormatFirstLetterUpperCase(model);
            var formattedSerialNumber = FormatFirstLetterUpperCase(serialNumber);
            var formattedCategory = FormatFirstLetterUpperCase(category);
            var formattedStatus = FormatFirstLetterUpperCase(status);

            var request = new
            {
                zoneId = Guid.Parse(selectedZoneId),
                name = formattedName,
                code = string.IsNullOrWhiteSpace(formattedCode) ? null : formattedCode,
                type = formattedType,
                category = string.IsNullOrWhiteSpace(formattedCategory) ? null : formattedCategory,
                status = string.IsNullOrWhiteSpace(formattedStatus) ? null : formattedStatus,
                parentAssetId = string.IsNullOrWhiteSpace(selectedParentAssetId) ? (Guid?)null : Guid.Parse(selectedParentAssetId),
                manufacturer = string.IsNullOrWhiteSpace(formattedManufacturer) ? null : formattedManufacturer,
                model = string.IsNullOrWhiteSpace(formattedModel) ? null : formattedModel,
                serialNumber = string.IsNullOrWhiteSpace(formattedSerialNumber) ? null : formattedSerialNumber,
                isActive = isActive
            };

            Http.DefaultRequestHeaders.Clear();
            Http.DefaultRequestHeaders.Add("Authorization", $"Bearer {token}");

            var response = await Http.PutAsJsonAsync($"api/assets/{Id}", request);

            if (response.IsSuccessStatusCode)
            {
                Navigation.NavigateTo($"/zones/{zoneId}/assets");
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                errorMessage = $"Erreur lors de la modification : {errorContent}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Erreur : {ex.Message}";
        }
        finally
        {
            isSubmitting = false;
        }
    }

    // Formate tous les mots entiers en majuscules (pour marque et type)
    private string FormatAllWordsUpperCase(string? input)
    {
        if (string.IsNullOrWhiteSpace(input))
            return "";

        return input.ToUpper();
    }

    // Formate première lettre en majuscule, reste en minuscule (pour les autres champs)
    private string FormatFirstLetterUpperCase(string? input)
    {
        if (string.IsNullOrWhiteSpace(input))
            return "";

        input = input.Trim();

        if (input.Length == 0)
            return "";

        if (input.Length == 1)
            return input.ToUpper();

        return char.ToUpper(input[0]) + input.Substring(1).ToLower();
    }

    private class AssetDto
    {
        public Guid Id { get; set; }
        public Guid ZoneId { get; set; }
        public string Name { get; set; } = "";
        public string? Code { get; set; }
        public string Type { get; set; } = "";
        public string? Category { get; set; }
        public string? Status { get; set; }
        public Guid? ParentAssetId { get; set; }
        public int Level { get; set; }
        public string? Manufacturer { get; set; }
        public string? Model { get; set; }
        public string? SerialNumber { get; set; }
        public bool IsActive { get; set; }
    }

    private class ZoneInfo
    {
        public Guid Id { get; set; }
        public string Name { get; set; } = "";
        public string SiteName { get; set; } = "";
        public string FullPath { get; set; } = "";
    }
}
