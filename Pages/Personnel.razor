@page "/personnel"
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JS

<PageTitle>Gestion du personnel - Labor Control</PageTitle>

<div class="min-h-screen bg-gray-50 py-8">
    <div class="max-w-7xl mx-auto px-4">
        <!-- Header -->
        <div class="mb-6 flex justify-between items-center">
            <div>
                <button @onclick="GoToDashboard"
                        class="inline-flex items-center px-4 py-2 bg-white text-gray-700 rounded-lg font-semibold hover:bg-gray-100 transition-all duration-300 shadow-md mb-4">
                    ‚Üê Retour √† l'espace client
                </button>
                <h1 class="text-3xl font-bold text-gray-900">Gestion du personnel</h1>
                <p class="text-gray-600 mt-2">G√©rez vos techniciens, superviseurs et administrateurs</p>
            </div>

            <button @onclick="ShowCreateModal"
                    class="px-6 py-3 bg-blue-600 text-white rounded-lg font-semibold hover:bg-blue-700 transition-all duration-300 shadow-lg">
                + Ajouter un utilisateur
            </button>
        </div>

        @if (loading)
        {
            <div class="text-center py-12">
                <div class="inline-block animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
                <p class="mt-4 text-gray-600">Chargement du personnel...</p>
            </div>
        }
        else if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="bg-red-50 border-l-4 border-red-500 p-4 rounded-lg">
                <p class="text-red-700">@errorMessage</p>
            </div>
        }
        else if (users.Count == 0)
        {
            <div class="bg-white rounded-xl shadow-lg p-12 text-center">
                <div class="text-6xl mb-4">üë§</div>
                <h3 class="text-xl font-bold text-gray-900 mb-2">Aucun utilisateur cr√©√©</h3>
                <p class="text-gray-600 mb-6">Ajoutez votre premier utilisateur pour commencer √† organiser votre √©quipe</p>
                <button @onclick="ShowCreateModal"
                        class="px-6 py-3 bg-blue-600 text-white rounded-lg font-semibold hover:bg-blue-700 transition">
                    + Ajouter un utilisateur
                </button>
            </div>
        }
        else
        {
            <!-- Filtres -->
            <div class="bg-white rounded-xl shadow-lg p-4 mb-6 flex gap-4 items-center">
                <div class="flex-1">
                    <input type="text"
                           @bind="searchTerm"
                           @bind:event="oninput"
                           @onkeyup="FilterUsers"
                           placeholder="üîç Rechercher par nom, email..."
                           class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent" />
                </div>
                <select @bind="filterRole" @bind:after="FilterUsers"
                        class="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500">
                    <option value="">Tous les r√¥les</option>
                    <option value="Admin">Admin</option>
                    <option value="Manager">Manager</option>
                    <option value="Supervisor">Superviseur</option>
                    <option value="Technician">Technicien</option>
                </select>
                <select @bind="filterActive" @bind:after="FilterUsers"
                        class="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500">
                    <option value="all">Tous</option>
                    <option value="active">Actifs</option>
                    <option value="inactive">Inactifs</option>
                </select>
            </div>

            <!-- Statistiques -->
            <div class="grid md:grid-cols-2 lg:grid-cols-5 gap-4 mb-6">
                <button @onclick="FilterAll"
                        class="bg-white rounded-xl shadow-lg p-6 hover:shadow-xl transition-all cursor-pointer text-left @(selectedCard == "all" ? "ring-2 ring-blue-500" : "")">
                    <div class="text-3xl font-bold text-blue-600">@users.Count</div>
                    <div class="text-sm text-gray-600 mt-1">Total utilisateurs</div>
                </button>
                <button @onclick="FilterActive"
                        class="bg-white rounded-xl shadow-lg p-6 hover:shadow-xl transition-all cursor-pointer text-left @(selectedCard == "active" ? "ring-2 ring-green-500" : "")">
                    <div class="text-3xl font-bold text-green-600">@users.Count(u => u.IsActive)</div>
                    <div class="text-sm text-gray-600 mt-1">Actifs</div>
                </button>
                <button @onclick="FilterManagers"
                        class="bg-white rounded-xl shadow-lg p-6 hover:shadow-xl transition-all cursor-pointer text-left @(selectedCard == "Manager" ? "ring-2 ring-purple-500" : "")">
                    <div class="text-3xl font-bold text-purple-600">@users.Count(u => u.Role == "Manager")</div>
                    <div class="text-sm text-gray-600 mt-1">Managers</div>
                </button>
                <button @onclick="FilterSupervisors"
                        class="bg-white rounded-xl shadow-lg p-6 hover:shadow-xl transition-all cursor-pointer text-left @(selectedCard == "Supervisor" ? "ring-2 ring-orange-500" : "")">
                    <div class="text-3xl font-bold text-orange-600">@users.Count(u => u.Role == "Supervisor")</div>
                    <div class="text-sm text-gray-600 mt-1">Superviseurs</div>
                </button>
                <button @onclick="FilterTechnicians"
                        class="bg-white rounded-xl shadow-lg p-6 hover:shadow-xl transition-all cursor-pointer text-left @(selectedCard == "Technician" ? "ring-2 ring-indigo-500" : "")">
                    <div class="text-3xl font-bold text-indigo-600">@users.Count(u => u.Role == "Technician")</div>
                    <div class="text-sm text-gray-600 mt-1">Techniciens</div>
                </button>
            </div>

            <!-- Liste des utilisateurs -->
            <div class="bg-white rounded-xl shadow-lg overflow-hidden">
                <div class="overflow-x-auto">
                    <table class="min-w-full divide-y divide-gray-200">
                        <thead class="bg-gray-50">
                            <tr>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                    Nom & Pr√©nom
                                </th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                    T√©l√©phone
                                </th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                    Email
                                </th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                    Site
                                </th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                    √âquipe
                                </th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                    M√©tier
                                </th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                    Sup√©rieur
                                </th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                    R√¥le
                                </th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                    Statut
                                </th>
                                <th class="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                                    Actions
                                </th>
                            </tr>
                        </thead>
                        <tbody class="bg-white divide-y divide-gray-200">
                            @foreach (var user in filteredUsers)
                            {
                                <tr class="hover:bg-gray-50 transition @(user.IsActive ? "" : "opacity-60")">
                                    <!-- Nom & Pr√©nom -->
                                    <td class="px-6 py-4 whitespace-nowrap">
                                        <div class="flex items-center">
                                            <div class="flex-shrink-0 h-10 w-10 bg-blue-100 rounded-full flex items-center justify-center">
                                                <span class="text-blue-600 font-semibold">@GetInitials(user.Prenom, user.Nom)</span>
                                            </div>
                                            <div class="ml-3">
                                                <div class="text-sm font-medium text-gray-900">
                                                    @user.Prenom @user.Nom
                                                </div>
                                            </div>
                                        </div>
                                    </td>

                                    <!-- T√©l√©phone -->
                                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                        @(user.Tel ?? "-")
                                    </td>

                                    <!-- Email -->
                                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                        @user.Email
                                    </td>

                                    <!-- Site -->
                                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                        @if (!string.IsNullOrEmpty(user.SiteName))
                                        {
                                            <span>@user.SiteName</span>
                                        }
                                        else
                                        {
                                            <span class="text-gray-400 text-xs">Non affect√©</span>
                                        }
                                    </td>

                                    <!-- √âquipe -->
                                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                        @if (!string.IsNullOrEmpty(user.TeamName))
                                        {
                                            <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
                                                @user.TeamName
                                            </span>
                                        }
                                        else
                                        {
                                            <span class="text-gray-400 text-xs">Non affect√©</span>
                                        }
                                    </td>

                                    <!-- M√©tier (JobTitle) -->
                                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                        @(user.JobTitle ?? "-")
                                    </td>

                                    <!-- Sup√©rieur hi√©rarchique -->
                                    <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                        @if (!string.IsNullOrEmpty(user.SupervisorName))
                                        {
                                            <span>@user.SupervisorName</span>
                                        }
                                        else
                                        {
                                            <span class="text-gray-400 text-xs">Aucun</span>
                                        }
                                    </td>

                                    <!-- R√¥le -->
                                    <td class="px-6 py-4 whitespace-nowrap">
                                        <span class="@GetRoleBadgeClass(user.Role)">
                                            @GetRoleLabel(user.Role)
                                        </span>
                                    </td>

                                    <!-- Statut -->
                                    <td class="px-6 py-4 whitespace-nowrap">
                                        @if (user.IsActive)
                                        {
                                            <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
                                                ‚úì Actif
                                            </span>
                                        }
                                        else
                                        {
                                            <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-100 text-red-800">
                                                ‚úï Inactif
                                            </span>
                                        }
                                    </td>

                                    <!-- Actions -->
                                    <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                                        <div class="flex justify-end gap-2">
                                            <button @onclick="() => ViewUser(user.Id)"
                                                    class="text-blue-600 hover:text-blue-900 transition">
                                                Voir
                                            </button>
                                            <button @onclick="() => EditUser(user.Id)"
                                                    class="text-green-600 hover:text-green-900 transition">
                                                Modifier
                                            </button>
                                            <button @onclick="() => ToggleUserStatus(user.Id, user.Prenom, user.Nom, user.IsActive)"
                                                    class="@(user.IsActive ? "text-orange-600 hover:text-orange-900" : "text-green-600 hover:text-green-900") transition">
                                                @(user.IsActive ? "D√©sactiver" : "Activer")
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>

            @if (filteredUsers.Count == 0 && users.Count > 0)
            {
                <div class="text-center py-12 text-gray-500">
                    <div class="text-4xl mb-4">üîç</div>
                    <p class="text-lg">Aucun r√©sultat pour ces filtres</p>
                </div>
            }
        }

        @if (showSuccessMessage)
        {
            <div class="fixed bottom-4 right-4 bg-green-500 text-white px-6 py-4 rounded-lg shadow-lg animate-slide-up">
                ‚úì @successMessage
            </div>
        }
    </div>
</div>

@code {
    private List<UserInfo> users = new();
    private List<UserInfo> filteredUsers = new();
    private bool loading = true;
    private string errorMessage = "";
    private bool showSuccessMessage = false;
    private string successMessage = "";

    // Filtres
    private string searchTerm = "";
    private string filterRole = "";
    private string filterActive = "all";
    private string selectedCard = "all";

    protected override async Task OnInitializedAsync()
    {
        await LoadUsers();
    }

    private void FilterAll() => FilterByCard("all");
    private void FilterActive() => FilterByCard("active");
    private void FilterManagers() => FilterByCard("Manager");
    private void FilterSupervisors() => FilterByCard("Supervisor");
    private void FilterTechnicians() => FilterByCard("Technician");

    private void FilterByCard(string cardType)
    {
        selectedCard = cardType;

        // R√©initialiser les filtres
        searchTerm = "";
        filterActive = "all";

        // Appliquer le filtre selon la carte cliqu√©e
        if (cardType == "all")
        {
            filterRole = "";
        }
        else if (cardType == "active")
        {
            filterRole = "";
            filterActive = "active";
        }
        else
        {
            // C'est un r√¥le (Manager, Supervisor, Technician)
            filterRole = cardType;
        }

        FilterUsers();
    }

    private async Task LoadUsers()
    {
        loading = true;
        errorMessage = "";

        try
        {
            var token = await JS.InvokeAsync<string>("localStorage.getItem", "authToken");

            // Enlever les guillemets si pr√©sents (bug localStorage)
            if (!string.IsNullOrEmpty(token))
            {
                token = token.Trim('"');
            }

            if (string.IsNullOrEmpty(token))
            {
                Navigation.NavigateTo("/login");
                return;
            }

            Http.DefaultRequestHeaders.Clear();
            Http.DefaultRequestHeaders.Add("Authorization", $"Bearer {token}");

            var response = await Http.GetAsync("api/users");

            if (response.IsSuccessStatusCode)
            {
                users = await response.Content.ReadFromJsonAsync<List<UserInfo>>() ?? new();
                filteredUsers = users;
                Console.WriteLine($"[DEBUG] {users.Count} utilisateurs charg√©s");
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                errorMessage = $"Erreur {(int)response.StatusCode}: {errorContent}";
                Console.WriteLine($"[DEBUG] Erreur: {errorMessage}");
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Erreur: {ex.Message}";
            Console.WriteLine($"[DEBUG] Exception: {ex.Message}");
        }
        finally
        {
            loading = false;
        }
    }

    private void FilterUsers()
    {
        filteredUsers = users.Where(u =>
        {
            // Filtre par recherche textuelle
            var matchesSearch = string.IsNullOrWhiteSpace(searchTerm) ||
                u.Prenom.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                u.Nom.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                u.Email.Contains(searchTerm, StringComparison.OrdinalIgnoreCase);

            // Filtre par r√¥le
            var matchesRole = string.IsNullOrEmpty(filterRole) || u.Role == filterRole;

            // Filtre par statut actif/inactif
            var matchesActive = filterActive == "all" ||
                (filterActive == "active" && u.IsActive) ||
                (filterActive == "inactive" && !u.IsActive);

            return matchesSearch && matchesRole && matchesActive;
        }).ToList();
    }

    private void GoToDashboard()
    {
        Navigation.NavigateTo("/dashboard");
    }

    private void ShowCreateModal()
    {
        Navigation.NavigateTo("/personnel/create");
    }

    private void ViewUser(Guid userId)
    {
        Navigation.NavigateTo($"/personnel/{userId}");
    }

    private void EditUser(Guid userId)
    {
        Navigation.NavigateTo($"/personnel/edit/{userId}");
    }

    private async Task ToggleUserStatus(Guid userId, string prenom, string nom, bool currentStatus)
    {
        var action = currentStatus ? "d√©sactiver" : "activer";
        bool confirmed = await JS.InvokeAsync<bool>("confirm", $"Voulez-vous {action} {prenom} {nom} ?");

        if (confirmed)
        {
            try
            {
                var token = await JS.InvokeAsync<string>("localStorage.getItem", "authToken");
                if (!string.IsNullOrEmpty(token))
                {
                    token = token.Trim('"');
                }

                Http.DefaultRequestHeaders.Clear();
                Http.DefaultRequestHeaders.Add("Authorization", $"Bearer {token}");

                var response = await Http.PatchAsync($"api/users/{userId}/toggle-status", null);

                if (response.IsSuccessStatusCode)
                {
                    successMessage = $"Utilisateur {(currentStatus ? "d√©sactiv√©" : "activ√©")} avec succ√®s";
                    showSuccessMessage = true;
                    await LoadUsers();

                    await Task.Delay(3000);
                    showSuccessMessage = false;
                }
                else
                {
                    errorMessage = "Erreur lors de la modification du statut";
                }
            }
            catch (Exception ex)
            {
                errorMessage = $"Erreur: {ex.Message}";
            }
        }
    }

    private string GetInitials(string prenom, string nom)
    {
        var prenomInitial = string.IsNullOrEmpty(prenom) ? "" : prenom.Substring(0, 1).ToUpper();
        var nomInitial = string.IsNullOrEmpty(nom) ? "" : nom.Substring(0, 1).ToUpper();
        return prenomInitial + nomInitial;
    }

    private string GetRoleLabel(string role)
    {
        return role switch
        {
            "Admin" => "Administrateur",
            "Manager" => "Manager",
            "Supervisor" => "Superviseur",
            "Technician" => "Technicien",
            _ => role
        };
    }

    private string GetRoleBadgeClass(string role)
    {
        var baseClass = "inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium";
        return role switch
        {
            "Admin" => $"{baseClass} bg-red-100 text-red-800",
            "Manager" => $"{baseClass} bg-purple-100 text-purple-800",
            "Supervisor" => $"{baseClass} bg-orange-100 text-orange-800",
            "Technician" => $"{baseClass} bg-blue-100 text-blue-800",
            _ => $"{baseClass} bg-gray-100 text-gray-800"
        };
    }

    private class UserInfo
    {
        public Guid Id { get; set; }
        public string Email { get; set; } = "";
        public string Prenom { get; set; } = "";
        public string Nom { get; set; } = "";
        public string? Tel { get; set; }
        public string Role { get; set; } = "";
        public string? JobTitle { get; set; }
        public bool IsActive { get; set; }
        public Guid? TeamId { get; set; }
        public string? TeamName { get; set; }
        public Guid? SiteId { get; set; }
        public string? SiteName { get; set; }
        public Guid? SupervisorId { get; set; }
        public string? SupervisorName { get; set; }
    }
}
